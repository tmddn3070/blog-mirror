{
  "version": 3,
  "sources": ["../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/cache.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/compatibility/isBrowser.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/alias.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/compatibility/apis.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/types.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/animation.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/array.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/strings.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/equal.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/noop.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/function.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/object.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/utils/math.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/attribute.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/class.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/traversal.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/manipulation.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/create.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/style.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/dimensions.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/events.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/scroll.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/dom/focus.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/support/eventListeners.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/options.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/classnames.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/environment.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/initialization.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/instances.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/observers/domObserver.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/plugins/plugins.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/structureSetup/structureSetup.utils.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/plugins/clickScrollPlugin/clickScrollPlugin.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/observers/sizeObserver.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/observers/trinsicObserver.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/observersSetup/observersSetup.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.events.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/structureSetup/structureSetup.elements.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/structureSetup/structureSetup.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/setups/setups.ts", "../../.pnpm/overlayscrollbars@2.8.3/node_modules/src/overlayscrollbars.ts"],
  "sourcesContent": ["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n", "export const isBrowser =\r\n  typeof window !== 'undefined' &&\r\n  // deno has the global `window` defined, so additionally check for document\r\n  typeof document !== 'undefined';\r\n", "import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const mathSign = Math.sign;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n", "import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n", "import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj)) {\r\n    return false;\r\n  }\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n", "import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n", "import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[] | readonly T[], item: T): boolean =>\r\n  arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n", "export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strVisible = 'visible';\r\nexport const strHidden = 'hidden';\r\nexport const strScroll = 'scroll';\r\n\r\nexport const capitalizeFirstLetter = (str: string | number | false | null | undefined): string => {\r\n  const finalStr = String(str || '');\r\n  return finalStr ? finalStr[0].toUpperCase() + finalStr.slice(1) : '';\r\n};\r\n", "import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T> | ReadonlyArray<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: Partial<WH<T>>, b?: Partial<WH<T>>) =>\r\n  equal<Partial<WH<T>>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: Partial<XY<T>>, b?: Partial<XY<T>>) =>\r\n  equal<Partial<XY<T>>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n", "export const noop = () => {}; // eslint-disable-line\r\n", "import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Defines the calling on the leading edge of the timeout.\r\n   */\r\n  _leading?: boolean;\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(() => callback(), isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  const { _timeout, _maxDelay, _leading, _mergeParams } = options || {};\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let leadingInvoked: boolean | undefined;\r\n  let clear = noop;\r\n\r\n  const invokeFunctionToDebounce = function (args: Parameters<FunctionToDebounce>) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    leadingInvoked = maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n      let timeoutId: number | undefined;\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      if (_leading && !leadingInvoked) {\r\n        boundInvoke();\r\n        leadingInvoked = true;\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(() => (leadingInvoked = undefined), finalTimeout);\r\n      } else {\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n\r\n        if (hasMaxWait && !maxTimeoutId) {\r\n          maxTimeoutId = setT(flush, finalMaxWait as number);\r\n        }\r\n      }\r\n\r\n      clear = () => clearTimeoutFn(timeoutId as number);\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n", "import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n", "import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n", "import type { HTMLElementTarget } from './types';\r\nimport { bind, each, from, isArray } from '../utils';\r\n\r\nexport type AttributeElementTarget = HTMLElementTarget | Element;\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  from(new Set((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token)));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Returns whether the given attribute exists on the given element.\r\n * @param elm The element.\r\n * @param attrName The attribute.\r\n * @returns A Truthy value indicates a present attrubte.\r\n */\r\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.hasAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeElementTarget,\r\n  attrNames: string | string[],\r\n  value: string | number | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    elm && elm.setAttribute(attrName, String(value || ''));\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => {\r\n      initialArrSet[operation](token);\r\n    });\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return bind(addAttrClass, elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): boolean => domTokenListAttr(elm, attrName)._has(value);\r\n", "import type { HTMLElementTarget } from './types';\r\nimport type { DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: HTMLElementTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: HTMLElementTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: HTMLElementTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: HTMLElementTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | false | null | undefined,\r\n  classNameB: string | false | null | undefined\r\n) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n", "import { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    return elm.matches(selector);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst isBodyElement = (elm: InputElementType) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Gets the focused element of the passed or default document.\r\n * @returns The focused element of the passed document.\r\n */\r\nconst getFocusedElement = (doc?: Document) => (doc || document).activeElement;\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport {\r\n  find,\r\n  findFirst,\r\n  is,\r\n  isBodyElement,\r\n  children,\r\n  contents,\r\n  parent,\r\n  liesBetween,\r\n  closest,\r\n  getFocusedElement,\r\n};\r\n", "import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype ManipulationTarget = Node | false | null | undefined;\r\ntype NodeCollection = ArrayLike<Node> | ManipulationTarget;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: ManipulationTarget,\r\n  preferredAnchor: ManipulationTarget,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: ManipulationTarget = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n", "import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n", "import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { HTMLElementTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each, from } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObject | false | null | undefined\r\n): void {\r\n  elm &&\r\n    styles &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : (rawValue || '') + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : from(styles).reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElementTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n", "import type { HTMLElementTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const getWindowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const getOffsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getClientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getScrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const getFractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n", "import type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerTarget = EventTarget | false | null | undefined;\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: ((event: any) => any) | false | null | undefined;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    target && target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: ((event: T) => any) | false | null | undefined,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener && listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target && target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventListenerTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n", "import type { XY } from './offset';\r\nimport type { WH } from './dimensions';\r\nimport { capNumber, isNumber, mathAbs, mathSign } from '../utils';\r\n\r\nexport interface ScrollCoordinates {\r\n  /** The start (origin) scroll coordinates for each axis. */\r\n  _start: XY<number>;\r\n  /** The end scroll coordinates for each axis. */\r\n  _end: XY<number>;\r\n}\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY<number | false | null | undefined>> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElementScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n\r\n/**\r\n * Scroll Coordinates which are 0.\r\n */\r\nexport const getZeroScrollCoordinates = (): ScrollCoordinates => ({\r\n  _start: { x: 0, y: 0 },\r\n  _end: { x: 0, y: 0 },\r\n});\r\n\r\n/**\r\n * Sanatizes raw scroll coordinates.\r\n * The passed `overflowAmount` is used as the \"max\" value for each axis if the sign of the raw max value is not `0`.\r\n * Makes sure that each axis has `0` either in the start or end coordinates.\r\n * @param rawScrollCoordinates The raw scroll coordinates.\r\n * @param overflowAmount The overflow amount.\r\n * @returns\r\n */\r\nexport const sanitizeScrollCoordinates = (\r\n  rawScrollCoordinates: ScrollCoordinates,\r\n  overflowAmount: WH<number>\r\n) => {\r\n  const { _start, _end } = rawScrollCoordinates;\r\n  const { w, h } = overflowAmount;\r\n  const sanitizeAxis = (start: number, end: number, amount: number) => {\r\n    let newStart = mathSign(start) * amount;\r\n    let newEnd = mathSign(end) * amount;\r\n\r\n    if (newStart === newEnd) {\r\n      const startAbs = mathAbs(start);\r\n      const endAbs = mathAbs(end);\r\n\r\n      newEnd = startAbs > endAbs ? 0 : newEnd;\r\n      newStart = startAbs < endAbs ? 0 : newStart;\r\n    }\r\n\r\n    // in doubt set start to 0\r\n    newStart = newStart === newEnd ? 0 : newStart;\r\n\r\n    return [newStart + 0, newEnd + 0] as const; // \"+ 0\" prevents \"-0\" to be in the result\r\n  };\r\n\r\n  const [startX, endX] = sanitizeAxis(_start.x, _end.x, w);\r\n  const [startY, endY] = sanitizeAxis(_start.y, _end.y, h);\r\n\r\n  return {\r\n    _start: {\r\n      x: startX,\r\n      y: startY,\r\n    },\r\n    _end: {\r\n      x: endX,\r\n      y: endY,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Returns whether the passed scroll coordinates represent the browsers default scroll direction.\r\n * For the default scroll direction the following must be true:\r\n * 1. Start value is `0`.\r\n * 2. End value <= Start value.\r\n * @param scrollCoordinates The scroll coordinates.\r\n */\r\nexport const isDefaultDirectionScrollCoordinates = ({\r\n  _start,\r\n  _end,\r\n}: ScrollCoordinates): XY<boolean> => {\r\n  const getAxis = (start: number, end: number) => start === 0 && start <= end;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x),\r\n    y: getAxis(_start.y, _end.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the current scroll percent between 0..1 for each axis.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param currentScroll The current scroll position of the element.\r\n */\r\nexport const getScrollCoordinatesPercent = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  currentScroll: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, current: number) =>\r\n    capNumber(0, 1, (start - current) / (start - end) || 0);\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, currentScroll.x),\r\n    y: getAxis(_start.y, _end.y, currentScroll.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the scroll position of the given percent.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param percent The percentage of the scroll.\r\n */\r\nexport const getScrollCoordinatesPosition = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  percent: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, p: number) => start + (end - start) * p;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, percent.x),\r\n    y: getAxis(_start.y, _end.y, percent.y),\r\n  };\r\n};\r\n", "export const focusElement = (element: Element | false | null | undefined) => {\r\n  if (element && (element as HTMLElement).focus) {\r\n    (element as HTMLElement).focus({ preventScroll: true });\r\n  }\r\n};\r\n", "import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n", "import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n", "import { strOverflowX, strOverflowY } from './support';\r\n\r\nconst dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// shared\r\nexport const dataValueNoClipping = 'noClipping';\r\n\r\n// body\r\nexport const dataAttributeHtmlBody = `${dataAttributePrefix}-body`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataValueHostIsHost = 'host';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportOverflowXPrefix = strOverflowX;\r\nexport const dataValueViewportOverflowYPrefix = strOverflowY;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportMeasuring = 'measuring';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueViewportNoContent = 'noContent';\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n", "import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  getFractionalSize,\r\n  getClientSize,\r\n  getOffsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  getStyles,\r\n  isBodyElement,\r\n  isFunction,\r\n  addEventListener,\r\n} from '~/support';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    // fix weird safari issue where getComputedStyle returns all empty styles by appending twice\r\n    appendChildren(document.body, measureElm);\r\n    appendChildren(document.body, measureElm);\r\n\r\n    const cSize = getClientSize(measureElm);\r\n    const oSize = getOffsetSize(measureElm);\r\n    const fSize = getFractionalSize(measureElmChild);\r\n\r\n    clear && removeElements(measureElm);\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\r\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\r\n  const envDOM = createDOM(\r\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\r\n  );\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  addEventListener(wnd, 'resize', () => {\r\n    triggerEvent('r', []);\r\n  });\r\n\r\n  if (\r\n    isFunction(wnd.matchMedia) &&\r\n    !nativeScrollbarsHiding &&\r\n    (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)\r\n  ) {\r\n    const addZoomListener = (onZoom: () => void) => {\r\n      const media = wnd.matchMedia(`(resolution: ${wnd.devicePixelRatio}dppx)`);\r\n      addEventListener(\r\n        media,\r\n        'change',\r\n        () => {\r\n          onZoom();\r\n          addZoomListener(onZoom);\r\n        },\r\n        {\r\n          _once: true,\r\n        }\r\n      );\r\n    };\r\n    addZoomListener(() => {\r\n      const [updatedNativeScrollbarSize, nativeScrollbarSizeChanged] =\r\n        updateNativeScrollbarSizeCache();\r\n\r\n      assignDeep(env._nativeScrollbarsSize, updatedNativeScrollbarSize); // keep the object and just re-assign!\r\n      triggerEvent('r', [nativeScrollbarSizeChanged]);\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n", "import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n", "import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n", "import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n  isString,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[] | readonly string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        const newValue =\r\n          isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '');\r\n        // narrow down attributeValue type to `string` or `null` but don't overwrite `<empty string>` with `null`\r\n        const attributeValue = isString(newValue) ? newValue : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n", "import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n", "import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n", "import {\r\n  createDOM,\r\n  appendChildren,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = getOffsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = getOffsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n", "import { strHidden, strScroll, strVisible } from '~/support';\r\nimport type { Env } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle } from '~/typings';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Creates a viewport overflow state object.\r\n * @param hasOverflow The information whether an axis has overflow.\r\n * @param overflowBehavior The overflow behavior according to the options.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const createViewportOverflowState = (\r\n  hasOverflow: Partial<XY<boolean>>,\r\n  overflowBehavior: XY<OverflowBehavior>\r\n): ViewportOverflowState => {\r\n  const getAxisOverflowStyle = (\r\n    axisBehavior: OverflowBehavior,\r\n    axisHasOverflow: boolean | undefined,\r\n    perpendicularBehavior: OverflowBehavior,\r\n    perpendicularOverflow: boolean | undefined\r\n  ): OverflowStyle => {\r\n    // convert behavior to style:\r\n    // 'visible'        -> 'hidden'\r\n    // 'hidden'         -> 'hidden'\r\n    // 'scroll'         -> 'scroll'\r\n    // 'visible-hidden' -> 'hidden'\r\n    // 'visible-scroll' -> 'scroll'\r\n    const behaviorStyle =\r\n      axisBehavior === strVisible\r\n        ? strHidden\r\n        : (axisBehavior.replace(`${strVisible}-`, '') as OverflowStyle);\r\n    const axisOverflowVisible = overflowIsVisible(axisBehavior);\r\n    const perpendicularOverflowVisible = overflowIsVisible(perpendicularBehavior);\r\n\r\n    // if no axis has overflow set 'hidden'\r\n    if (!axisHasOverflow && !perpendicularOverflow) {\r\n      return strHidden;\r\n    }\r\n\r\n    // if both axis have a visible behavior ('visible', 'visible-hidden', 'visible-scroll') set 'visible'\r\n    if (axisOverflowVisible && perpendicularOverflowVisible) {\r\n      return strVisible;\r\n    }\r\n\r\n    // this this axis has a visible behavior\r\n    if (axisOverflowVisible) {\r\n      const nonPerpendicularOverflow = axisHasOverflow ? strVisible : strHidden;\r\n      return axisHasOverflow && perpendicularOverflow\r\n        ? behaviorStyle // if both axis have an overflow set ('hidden' or 'scroll')\r\n        : nonPerpendicularOverflow; // if only this axis has an overflow set 'visible', if no axis has an overflow set 'hidden'\r\n    }\r\n\r\n    const nonOverflow =\r\n      perpendicularOverflowVisible && perpendicularOverflow ? strVisible : strHidden;\r\n    return axisHasOverflow\r\n      ? behaviorStyle // if this axis has an overflow\r\n      : nonOverflow; // if the perp. axis has a visible behavior and has an overflow set 'visible', otherwise set 'hidden'\r\n  };\r\n\r\n  const _overflowStyle = {\r\n    x: getAxisOverflowStyle(overflowBehavior.x, hasOverflow.x, overflowBehavior.y, hasOverflow.y),\r\n    y: getAxisOverflowStyle(overflowBehavior.y, hasOverflow.y, overflowBehavior.x, hasOverflow.x),\r\n  };\r\n\r\n  return {\r\n    _overflowStyle,\r\n    _overflowScroll: {\r\n      x: _overflowStyle.x === strScroll,\r\n      y: _overflowStyle.y === strScroll,\r\n    },\r\n  };\r\n};\r\n", "import {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  removeAttrClass,\r\n  strWidth,\r\n  strOverflowY,\r\n  strOverflowX,\r\n  strScroll,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport { getShowNativeOverlaidScrollbars } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { Env } from '~/environment';\r\nimport type { WH } from '~/support';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        /**\r\n         * Gets the current overflow state of the viewport.\r\n         */\r\n        const readViewportOverflowState = (): ViewportOverflowState => {\r\n          const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n            const overflowStyle = getStyles(_viewport, styleKey) as OverflowStyle;\r\n            const overflowScroll = overflowStyle === strScroll;\r\n\r\n            return [overflowStyle, overflowScroll] as const;\r\n          };\r\n\r\n          const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n          const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n          return {\r\n            _overflowStyle: {\r\n              x: xOverflowStyle,\r\n              y: yOverflowStyle,\r\n            },\r\n            _overflowScroll: {\r\n              x: xOverflowScroll,\r\n              y: yOverflowScroll,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Gets the hide offset matching the passed overflow state.\r\n         * @param viewportOverflowState The overflow state of the viewport\r\n         */\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean\r\n        ): StyleObject | undefined => {\r\n          if (!_viewportIsTarget) {\r\n            const viewportStyleObj: StyleObject = assignDeep(\r\n              {},\r\n              {\r\n                [strMarginRight]: 0,\r\n                [strMarginBottom]: 0,\r\n                [strMarginLeft]: 0,\r\n              }\r\n            );\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n\r\n            return viewportStyleObj;\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState = viewportOverflowState || readViewportOverflowState();\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            const addArrange = removeAttrClass(\r\n              _viewport,\r\n              dataAttributeViewport,\r\n              dataValueViewportArrange\r\n            );\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                setStyles(\r\n                  _viewport,\r\n                  assignDeep(\r\n                    {},\r\n                    prevStyle,\r\n                    _hideNativeScrollbars(\r\n                      finalViewportOverflowState,\r\n                      observersSetupState,\r\n                      doViewportArrange\r\n                    )\r\n                  )\r\n                );\r\n                addArrange();\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n", "import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n", "import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  appendChildren,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (sizeChangedContext?: ResizeObserverEntry | boolean) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        appear = domRectAppeared(currRContentRect, prevContentRect);\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _sizeChanged: true,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n", "import {\r\n  createDiv,\r\n  getOffsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = getOffsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n", "import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  equalWH,\r\n  getFractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  keys,\r\n  liesBetween,\r\n  getScrollSize,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n  getStyles,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportMeasuring,\r\n  dataValueViewportArrange,\r\n  dataValueNoClipping,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = [] as const;\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'] as const;\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'] as const;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _isBody,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n\r\n  const getDirectionIsRTL = (elm: HTMLElement): boolean => getStyles(elm, 'direction') === 'rtl';\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n      const noClipping =\r\n        !viewportIsTargetBody && hasAttrClass(_host, dataAttributeHost, dataValueNoClipping);\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElementScroll(_scrollOffsetElement);\r\n\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, noClipping);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n      const viewportScroll = getScrollSize(_viewport);\r\n      const fractional = getFractionalSize(_viewport);\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      noClipping && revertMeasuring();\r\n\r\n      return {\r\n        w: viewportScroll.w + fractional.w,\r\n        h: viewportScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirection = (updateHints: ObserversSetupUpdateHints) => {\r\n    const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n    assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n    assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n    prevDirectionIsRTL = newDirectionIsRTL;\r\n  };\r\n\r\n  /*\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = getAttr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          setAttrs(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttrs(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  */\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({ _sizeChanged, _appear }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && env._nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    }\r\n    /*\r\n    else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    */\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n  const onWindowResizeDebounced = debounce(\r\n    () => {\r\n      const [, _contentMutation] = updateContentSizeCache();\r\n      onObserversUpdated({ _contentMutation });\r\n    },\r\n    {\r\n      _timeout: 222,\r\n      _leading: true,\r\n    }\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      // updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = env._addResizeListener((_scrollbarSizeChanged) => {\r\n        if (_scrollbarSizeChanged) {\r\n          onObserversUpdatedDebounced({ _scrollbarSizeChanged });\r\n        } else {\r\n          onWindowResizeDebounced();\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      setDirection(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n", "import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  bind,\r\n  getElementScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n  getBoundingClientRect,\r\n  capNumber,\r\n  getScrollCoordinatesPercent,\r\n  isDefaultDirectionScrollCoordinates,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type { XY } from '~/support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: keyof XY<unknown>) =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimeline = {\r\n    x: initScrollTimeline('x'),\r\n    y: initScrollTimeline('y'),\r\n  };\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  /**\r\n   * Gets the scrollbar handle length ratio.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n   * @returns The scrollbar handle length ratio.\r\n   */\r\n  const getScrollbarHandleLengthRatio = (\r\n    isHorizontal: boolean | undefined,\r\n    scrollbarStructure?: ScrollbarStructure\r\n  ) => {\r\n    if (scrollbarStructure) {\r\n      const axis = isHorizontal ? strWidth : strHeight;\r\n      const { _track, _handle } = scrollbarStructure;\r\n\r\n      const handleSize = getBoundingClientRect(_handle)[axis];\r\n      const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n      return capNumber(0, 1, handleSize / trackSize || 0);\r\n    }\r\n\r\n    const axis = isHorizontal ? 'x' : 'y';\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n    const viewportSize = _overflowEdge[axis];\r\n    const overflowAmount = _overflowAmount[axis];\r\n\r\n    return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount) || 0);\r\n  };\r\n\r\n  /**\r\n   * Gets the scrollbar handle offset ratio.\r\n   * @param structureSetupState The structure setup state.\r\n   * @param scrollbarStructure The scrollbar structure.\r\n   * @param scrollPercent The scroll percent 0..1.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @returns The scrollbar handle offset ratio.\r\n   */\r\n  const getScrollbarHandleOffsetRatio = (\r\n    scrollbarStructure: ScrollbarStructure,\r\n    scrollPercent: number,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const lengthRatio = getScrollbarHandleLengthRatio(isHorizontal, scrollbarStructure);\r\n\r\n    return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n  };\r\n\r\n  /**\r\n   * Adds additional directional keyframes to the passed keyframes.\r\n   * @param keyframes The keyframes.\r\n   * @param directionRTL Whether the direction is RTL.\r\n   * @returns The passed keyframes with additional directional keyframes.\r\n   */\r\n  const addDirectionRTLKeyframes = (keyframes: Keyframe[] | PropertyIndexedKeyframes | null) =>\r\n    assignDeep(keyframes, {\r\n      // dummy keyframe which fixes bug where the scrollbar handle is reverted to origin position when it should be at its max position\r\n      clear: ['left'],\r\n    });\r\n\r\n  /**\r\n   * Cancels the animations of the passed elements or of all elements if no elements are passed.\r\n   * @param elements The elements of which the animation shall be canceled.\r\n   */\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Sets of overwrites the animation of the passed element.\r\n   * @param element The element of which the animation shall be set.\r\n   * @param timeline The animation timeline of the animation.\r\n   * @param keyframes The keyframes of the animation.\r\n   * @param composite The composite information of the animation.\r\n   */\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject | false | null | undefined]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const { _scrollCoordinates } = structureSetupState;\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n    const axisScrollTimeline = scrollTimeline[xyKey];\r\n    const axisIsDefaultDirectionScroll =\r\n      isDefaultDirectionScrollCoordinates(_scrollCoordinates)[xyKey];\r\n    const getAxisTransformValue = (scrollbarStructure: ScrollbarStructure, scrollPercent: number) =>\r\n      getTrasformTranslateValue(\r\n        ratioToCssPercent(\r\n          getScrollbarHandleOffsetRatio(\r\n            scrollbarStructure,\r\n            axisIsDefaultDirectionScroll ? scrollPercent : 1 - scrollPercent,\r\n            isHorizontal\r\n          )\r\n        ),\r\n        isHorizontal\r\n      );\r\n\r\n    if (axisScrollTimeline) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _handle } = structure;\r\n        setElementAnimation(\r\n          _handle,\r\n          axisScrollTimeline,\r\n          addDirectionRTLKeyframes({\r\n            transform: [0, 1].map((percent) => getAxisTransformValue(structure, percent)),\r\n          })\r\n        );\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => [\r\n        structure._handle,\r\n        {\r\n          transform: getAxisTransformValue(\r\n            structure,\r\n            getScrollCoordinatesPercent(_scrollCoordinates, getElementScroll(_scrollOffsetElement))[\r\n              xyKey\r\n            ]\r\n          ),\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      const { _overflowAmount, _scrollCoordinates } = structureSetupState;\r\n      const isDefaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n      const cushion = 0.5; // otherwise it sometimes happens that scrolling to 100% will cause the scrollbars to disappear\r\n\r\n      if (scrollTimeline.x && scrollTimeline.y) {\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            const setScrollbarElementAnimation = (axis: keyof XY<unknown>) =>\r\n              setElementAnimation(\r\n                _scrollbar,\r\n                scrollTimeline[axis],\r\n                addDirectionRTLKeyframes({\r\n                  transform: [0, isDefaultDirectionScroll[axis] ? 1 : -1].map((percent) =>\r\n                    getTrasformTranslateValue(\r\n                      numberToCssPx(percent * (_overflowAmount[axis] - cushion)),\r\n                      axis === 'x'\r\n                    )\r\n                  ),\r\n                }),\r\n                'add'\r\n              );\r\n\r\n            setScrollbarElementAnimation('x');\r\n            setScrollbarElementAnimation('y');\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        const scrollPercent = getScrollCoordinatesPercent(\r\n          _scrollCoordinates,\r\n          getElementScroll(_scrollOffsetElement)\r\n        );\r\n        const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n          const { _scrollbar } = structure;\r\n          const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n          const getTranslateValue = (\r\n            axisScrollPercent: number,\r\n            axisOverflowAmount: number,\r\n            axisIsDefaultCoordinates: boolean\r\n          ) => {\r\n            const px = axisOverflowAmount * axisScrollPercent;\r\n            return numberToCssPx(axisIsDefaultCoordinates ? px : -px);\r\n          };\r\n\r\n          return [\r\n            elm,\r\n            elm && {\r\n              transform: getTrasformTranslateValue({\r\n                x: getTranslateValue(\r\n                  scrollPercent.x,\r\n                  _overflowAmount.x,\r\n                  isDefaultDirectionScroll.x\r\n                ),\r\n                y: getTranslateValue(\r\n                  scrollPercent.y,\r\n                  _overflowAmount.y,\r\n                  isDefaultDirectionScroll.y\r\n                ),\r\n              }),\r\n            },\r\n          ] as [HTMLElement | false, StyleObject | false];\r\n        };\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimeline.x,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimeline.y,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n", "import {\r\n  getBoundingClientRect,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  getFocusedElement,\r\n  setT,\r\n  hasAttr,\r\n  stopAndPrevent,\r\n  isFunction,\r\n  mathAbs,\r\n  focusElement,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { XY } from '~/support';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\r\n): ScrollbarsSetupEvents => {\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const {\r\n      _host,\r\n      _viewport,\r\n      _viewportIsTarget,\r\n      _scrollOffsetElement,\r\n      _documentElm,\r\n      _viewportAddRemoveClass,\r\n    } = structureSetupElements;\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [scrollSnapScrollTransitionTimeout, clearScrollSnapScrollTransitionTimeout] =\r\n      selfClearTimeout(444);\r\n    const [requestHandleTransitionAnimationFrame, clearHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollOffsetElementScrollBy = (coordinates: XY<number>) => {\r\n      isFunction(_scrollOffsetElement.scrollBy) &&\r\n        _scrollOffsetElement.scrollBy({\r\n          behavior: 'smooth',\r\n          left: coordinates.x,\r\n          top: coordinates.y,\r\n        });\r\n    };\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointercancel lostpointercapture';\r\n      const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n      const leftTopKey = isHorizontal ? 'left' : 'top';\r\n      const whKey = isHorizontal ? 'w' : 'h';\r\n      const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = getOffsetSize(_track)[whKey] - getOffsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          clearScrollSnapScrollTransitionTimeout();\r\n\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              getOffsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElementScroll(_scrollOffsetElement)[xyKey],\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const addScrollbarPressedClass = () =>\r\n            _viewportAddRemoveClass(dataValueViewportScrollbarPressed, true);\r\n          const removeScrollbarPressedClass = addScrollbarPressedClass();\r\n\r\n          const offFns = [\r\n            () => {\r\n              const withoutSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n              removeScrollbarPressedClass();\r\n              const withSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n              const snapScrollDiff = {\r\n                x: withSnapScrollOffset.x - withoutSnapScrollOffset.x,\r\n                y: withSnapScrollOffset.y - withoutSnapScrollOffset.y,\r\n              };\r\n\r\n              if (mathAbs(snapScrollDiff.x) > 3 || mathAbs(snapScrollDiff.y) > 3) {\r\n                addScrollbarPressedClass();\r\n                scrollElementTo(_scrollOffsetElement, withoutSnapScrollOffset);\r\n                scrollOffsetElementScrollBy(snapScrollDiff);\r\n                scrollSnapScrollTransitionTimeout(removeScrollbarPressedClass);\r\n              }\r\n            },\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      // focus viewport when clicking on a scrollbar (mouse only)\r\n      !_viewportIsTarget &&\r\n        addEventListener(_scrollbar, 'mousedown', () => {\r\n          const focusedElement = getFocusedElement();\r\n          if (\r\n            hasAttr(focusedElement, dataAttributeViewport) ||\r\n            hasAttr(focusedElement, dataAttributeHost) ||\r\n            focusedElement === document.body\r\n          ) {\r\n            setT(bind(focusElement, _viewport), 25);\r\n          }\r\n        }),\r\n      // propagate wheel events to viewport when mouse is over scrollbar\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            scrollOffsetElementScrollBy({\r\n              x: deltaX,\r\n              y: deltaY,\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      // when the handle has a size transition, update the handle offset each frame for the time of the transition\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          clearHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // solve problem of interaction causing click events\r\n      addEventListener(\r\n        _scrollbar,\r\n        'pointerdown',\r\n        // stopPropagation for stopping event propagation (causing click listeners to be invoked)\r\n        // preventDefault to prevent the pointer to cause any actions (e.g. releasing mouse button over an <a> tag causes an navigation)\r\n        bind(addEventListener, _documentElm, 'click', stopAndPrevent, {\r\n          _once: true,\r\n          _capture: true,\r\n          _passive: false,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      clearScrollSnapScrollTransitionTimeout,\r\n      clearHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n", "import {\r\n  bind,\r\n  noop,\r\n  addEventListener,\r\n  push,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  strScroll,\r\n  strVisible,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport type { OverflowBehavior, ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let mouseInHost: boolean | undefined;\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideIsNever: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\r\n    selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(\r\n      options,\r\n      structureSetupElements,\r\n      structureSetupState,\r\n      (event) =>\r\n        isHoverablePointerType(event) &&\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        manageScrollbarsAutoHideInstantInteraction()\r\n    )\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoHideTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const manageScrollbarsAutoHideInstantInteraction = () => {\r\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\r\n      manageScrollbarsAutoHide(true);\r\n      autoHideInstantInteractionTimeout(() => {\r\n        manageScrollbarsAutoHide(false);\r\n      });\r\n    }\r\n  };\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearAutoHideTimeout,\r\n    clearAutoHideInstantInteractionTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _scrollCoordinatesChanged,\r\n      } = _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const [overflow, overflowChanged] = _checkOption('overflow');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged ||\r\n        _overflowAmountChanged ||\r\n        _scrollCoordinatesChanged ||\r\n        _directionChanged ||\r\n        _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowBehavior: OverflowBehavior,\r\n        overflowStyle: OverflowStyle,\r\n        isHorizontal: boolean\r\n      ) => {\r\n        const isVisible =\r\n          overflowBehavior.includes(strScroll) &&\r\n          (visibility === strVisible || (visibility === 'auto' && overflowStyle === strScroll));\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideIsNever = autoHide === 'never';\r\n        manageScrollbarsAutoHide(autoHideIsNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n", "import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  isBodyElement,\r\n  getFocusedElement,\r\n  wnd,\r\n  focusElement,\r\n  stopAndPrevent,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataAttributeHtmlBody,\r\n  dataValueHostIsHost,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _windowElm: () => Window;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => () => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isBody = isBodyElement(targetElement);\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const getDocumentWindow = () => ownerDocument.defaultView || wnd;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // viewport element has higher priority and content element will not be generated\r\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\r\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const paddingElement =\r\n    !viewportIsTarget &&\r\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\r\n  const contentElement = !viewportIsContent && possibleContentElement;\r\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\r\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\r\n  );\r\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\r\n  const originalNonBodyScrollOffsetElement = elementIsGenerated(viewportElement)\r\n    ? targetElement\r\n    : viewportElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding: paddingElement,\r\n    _content: contentElement,\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _windowElm: getDocumentWindow,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName, add),\r\n  };\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elm && !elementIsGenerated(elm)\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const docWnd = getDocumentWindow();\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement: Element | false | null | undefined) =>\r\n      addEventListener(activeElement, 'focusin focusout focus blur', stopAndPrevent, {\r\n        _capture: true,\r\n        _passive: false,\r\n      });\r\n    const tabIndexStr = 'tabindex';\r\n    const originalViewportTabIndex = getAttr(_viewport, tabIndexStr);\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? '' : dataValueHostIsHost);\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_viewport, dataAttributeViewport, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, tabIndexStr, originalViewportTabIndex || '-1');\r\n      isBody && setAttrs(docElement, dataAttributeHtmlBody, '');\r\n    }\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const viewportIsGenerated = elementIsGenerated(_viewport);\r\n        // if the focused element is viewport and viewport will be destroyed shift the focus to target\r\n        // otherwise keep the focused element\r\n        const destroyFocusElement =\r\n          viewportIsGenerated && destroyActiveElm === _viewport ? _target : destroyActiveElm;\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyFocusElement);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, dataAttributeViewport);\r\n        isBody && removeAttrs(docElement, dataAttributeHtmlBody);\r\n        originalViewportTabIndex\r\n          ? setAttrs(_viewport, tabIndexStr, originalViewportTabIndex)\r\n          : removeAttrs(_viewport, tabIndexStr);\r\n\r\n        elementIsGenerated(_content) && unwrap(_content);\r\n        viewportIsGenerated && unwrap(_viewport);\r\n        elementIsGenerated(_padding) && unwrap(_padding);\r\n        focusElement(destroyFocusElement);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n\r\n    // keep the original focused element focused except when\r\n    // the target is body and viewport is not target, then shift the focus to the viewport element\r\n    focusElement(\r\n      !viewportIsTarget && isBody && initActiveElm === _target && docWnd.top === docWnd\r\n        ? _viewport\r\n        : initActiveElm\r\n    );\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n", "import { setStyles, strHeight } from '~/support';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n", "import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n", "import {\r\n  createCache,\r\n  getScrollSize,\r\n  getFractionalSize,\r\n  equalWH,\r\n  getClientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  getWindowSize,\r\n  addRemoveAttrClass,\r\n  capitalizeFirstLetter,\r\n  setStyles,\r\n  strVisible,\r\n  strHidden,\r\n  keys,\r\n  strScroll,\r\n  scrollElementTo,\r\n  getElementScroll,\r\n  sanitizeScrollCoordinates,\r\n  getStyles,\r\n  equal,\r\n  getZeroScrollCoordinates,\r\n  hasDimensions,\r\n  addEventListener,\r\n  stopPropagation,\r\n  rAF,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueNoClipping,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataValueViewportOverflowXPrefix,\r\n  dataValueViewportOverflowYPrefix,\r\n  dataValueViewportNoContent,\r\n  dataValueViewportMeasuring,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { ScrollCoordinates, WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport {\r\n  createViewportOverflowState,\r\n  getShowNativeOverlaidScrollbars,\r\n  overflowIsVisible,\r\n} from '../structureSetup.utils';\r\n\r\ninterface FlowDirectionStyles {\r\n  display?: string;\r\n  direction?: string;\r\n  flexDirection?: string;\r\n  writingMode?: string;\r\n}\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _scrollEventElement,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportAddRemoveClass,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n  const flowDirectionStyleArr = ['display', 'direction', 'flexDirection', 'writingMode'] as const;\r\n\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const partialXYOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: {},\r\n  };\r\n  const setMeasuringMode = (active: boolean) => {\r\n    // viewportIsTargetBody never needs measuring\r\n    _viewportAddRemoveClass(dataValueViewportMeasuring, !viewportIsTargetBody && active);\r\n  };\r\n\r\n  const getOverflowAmount = (\r\n    viewportScrollSize: WH<number>,\r\n    viewportClientSize: WH<number>\r\n  ): WH<number> => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(getFractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(getScrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateHasOverflowCache] = createCache<Partial<XY<boolean>>>(partialXYOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<Partial<XY<OverflowStyle>>>(partialXYOptions);\r\n  const [updateFlowDirectionStyles] = createCache<FlowDirectionStyles>(\r\n    {\r\n      _equal: (currVal, newValu) => equal(currVal, newValu, flowDirectionStyleArr),\r\n      _initialValue: {},\r\n    },\r\n    () => (hasDimensions(_viewport) ? getStyles(_viewport, flowDirectionStyleArr) : {})\r\n  );\r\n  const [updateMeasuredScrollCoordinates, getCurrentMeasuredScrollCoordinates] =\r\n    createCache<ScrollCoordinates>(\r\n      {\r\n        _equal: (currVal, newVal) =>\r\n          equalXY(currVal._start, newVal._start) && equalXY(currVal._end, newVal._end),\r\n        _initialValue: getZeroScrollCoordinates(),\r\n      },\r\n      () => {\r\n        setMeasuringMode(true);\r\n\r\n        const originalScrollOffset = getElementScroll(_scrollOffsetElement);\r\n        const removeNoContent = _viewportAddRemoveClass(dataValueViewportNoContent, true);\r\n        const removeScrollBlock = addEventListener(\r\n          _scrollEventElement,\r\n          strScroll,\r\n          (event) => {\r\n            const scrollEventScrollOffset = getElementScroll(_scrollOffsetElement);\r\n            // if scroll offset didnt change\r\n            if (\r\n              event.isTrusted &&\r\n              scrollEventScrollOffset.x === originalScrollOffset.x &&\r\n              scrollEventScrollOffset.y === originalScrollOffset.y\r\n            ) {\r\n              stopPropagation(event);\r\n            }\r\n          },\r\n          {\r\n            _capture: true,\r\n            _once: true,\r\n          }\r\n        );\r\n\r\n        scrollElementTo(_scrollOffsetElement, {\r\n          x: 0,\r\n          y: 0,\r\n        });\r\n        removeNoContent();\r\n\r\n        const _start = getElementScroll(_scrollOffsetElement);\r\n        const scrollSize = getScrollSize(_scrollOffsetElement);\r\n        scrollElementTo(_scrollOffsetElement, {\r\n          x: scrollSize.w,\r\n          y: scrollSize.h,\r\n        });\r\n\r\n        const tmp = getElementScroll(_scrollOffsetElement);\r\n        scrollElementTo(_scrollOffsetElement, {\r\n          // if tmp is very close start there porbably wasn't any scroll happening so scroll again in different direction\r\n          x: tmp.x - _start.x < 1 && -scrollSize.w,\r\n          y: tmp.y - _start.y < 1 && -scrollSize.h,\r\n        });\r\n\r\n        const _end = getElementScroll(_scrollOffsetElement);\r\n        scrollElementTo(_scrollOffsetElement, originalScrollOffset);\r\n        rAF(() => removeScrollBlock());\r\n\r\n        return {\r\n          _start,\r\n          _end,\r\n        };\r\n      }\r\n    );\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const createViewportOverflowStyleClassName = (\r\n    overflowStyle: OverflowStyle,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const prefix = isHorizontal\r\n      ? dataValueViewportOverflowXPrefix\r\n      : dataValueViewportOverflowYPrefix;\r\n    return `${prefix}${capitalizeFirstLetter(overflowStyle)}`;\r\n  };\r\n  const setViewportOverflowStyle = (viewportOverflowStyle: XY<OverflowStyle>) => {\r\n    // `createAllOverflowStyleClassNames` and `allOverflowStyleClassNames` could be one scope further up but would increase bundle size\r\n    const createAllOverflowStyleClassNames = (isHorizontal?: boolean) =>\r\n      ([strVisible, strHidden, strScroll] as OverflowStyle[]).map((style) =>\r\n        createViewportOverflowStyleClassName(style, isHorizontal)\r\n      );\r\n    const allOverflowStyleClassNames = createAllOverflowStyleClassNames(true)\r\n      .concat(createAllOverflowStyleClassNames())\r\n      .join(' ');\r\n\r\n    _viewportAddRemoveClass(allOverflowStyleClassNames);\r\n    _viewportAddRemoveClass(\r\n      (keys(viewportOverflowStyle) as Array<keyof typeof viewportOverflowStyle>)\r\n        .map((axis) =>\r\n          createViewportOverflowStyleClassName(viewportOverflowStyle[axis], axis === 'x')\r\n        )\r\n        .join(' '),\r\n      true\r\n    );\r\n  };\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const { _sizeChanged, _contentMutation, _directionChanged, _appear, _scrollbarSizeChanged } =\r\n      _observersUpdateHints || {};\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\r\n      scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n\r\n    const viewportChanged =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (viewportChanged) {\r\n      if (hasAttrClass(_host, dataAttributeHost, dataValueNoClipping)) {\r\n        setMeasuringMode(true);\r\n      }\r\n\r\n      const [redoViewportArrange] = _undoViewportArrange ? _undoViewportArrange() : [];\r\n\r\n      const [sizeFraction] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = getClientSize(_viewport);\r\n      const windowInnerSize = viewportIsTargetBody && getWindowSize(_windowElm());\r\n      const overflowAmountScrollSize = {\r\n        w: max0(viewportScrollSize.w + sizeFraction.w),\r\n        h: max0(viewportScrollSize.h + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.w\r\n            : viewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.h\r\n            : viewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const [hasOverflow, hasOverflowChanged] = updateHasOverflowCache({\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    });\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      viewportChanged;\r\n    const viewportOverflowState = createViewportOverflowState(hasOverflow, overflow);\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      viewportOverflowState._overflowStyle\r\n    );\r\n    const [, flowDirectionStylesChanged] = updateFlowDirectionStyles(_force);\r\n\r\n    const adjustMeasuredScrollCoordinates =\r\n      _directionChanged || _appear || flowDirectionStylesChanged || hasOverflowChanged || _force;\r\n    const [scrollCoordinates, scrollCoordinatesChanged] = adjustMeasuredScrollCoordinates\r\n      ? updateMeasuredScrollCoordinates(_force)\r\n      : getCurrentMeasuredScrollCoordinates();\r\n\r\n    if (adjustViewportStyle) {\r\n      overflowStyleChanged && setViewportOverflowStyle(viewportOverflowState._overflowStyle);\r\n\r\n      if (_hideNativeScrollbars && _arrangeViewport) {\r\n        setStyles(\r\n          _viewport,\r\n          _hideNativeScrollbars(\r\n            viewportOverflowState,\r\n            _observersState,\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction)\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    setMeasuringMode(false);\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueNoClipping, removeClipping);\r\n    addRemoveAttrClass(_padding, dataAttributePadding, dataValueNoClipping, removeClipping);\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n      _scrollCoordinates: sanitizeScrollCoordinates(scrollCoordinates, overflowAmount),\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n      _scrollCoordinatesChanged: scrollCoordinatesChanged || overflowAmountChanged,\r\n      _scrolled: adjustMeasuredScrollCoordinates,\r\n    };\r\n  };\r\n};\r\n", "import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElementScroll,\r\n  getZeroScrollCoordinates,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport type { ScrollCoordinates } from '~/support';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _scrollCoordinates: ScrollCoordinates;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n  _scrollCoordinatesChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n    _scrollCoordinates: getZeroScrollCoordinates(),\r\n  };\r\n  const { _target, _scrollOffsetElement, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const scrollOffset = adjustScrollOffset && getElementScroll(_scrollOffsetElement);\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n", "import {\r\n  assignDeep,\r\n  bind,\r\n  getElementScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  isDestroyed: () => boolean,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    if (isDestroyed()) {\r\n      return false;\r\n    }\r\n\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _scrollOffsetElement } = structureSetupElements;\r\n      const initialScroll = getElementScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_scrollOffsetElement, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n", "import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** The scroll coordinates of the viewport. */\r\n  scrollCoordinates: {\r\n    /** The start (origin) scroll coordinates for each axis. */\r\n    start: XY<number>;\r\n    /** The end scroll coordinates for each axis. */\r\n    end: XY<number>;\r\n  };\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        () => destroyed,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const {\r\n            _overflowEdgeChanged,\r\n            _overflowAmountChanged,\r\n            _overflowStyleChanged,\r\n            _scrollCoordinatesChanged,\r\n          } = _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                scrollCoordinatesChanged: !!_scrollCoordinatesChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _scrollCoordinates,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            scrollCoordinates: {\r\n              start: _scrollCoordinates._start,\r\n              end: _scrollCoordinates._end,\r\n            },\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],
  "mappings": "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",
  "names": ["createCache", "options", "update", "o", "_initialValue", "i", "_equal", "u", "_alwaysUpdateValues", "_value", "_previous", "cacheUpdateContextual", "newValue", "force", "curr", "newVal", "changed", "cacheUpdateIsolated", "getCurrentCache", "isBrowser", "window", "document", "wnd", "mathMax", "Math", "max", "mathMin", "min", "mathRound", "round", "mathAbs", "abs", "mathSign", "sign", "cAF", "cancelAnimationFrame", "rAF", "requestAnimationFrame", "setT", "setTimeout", "clearT", "clearTimeout", "getApi", "name", "MutationObserverConstructor", "IntersectionObserverConstructor", "ResizeObserverConstructor", "scrollT", "ElementNodeType", "Node", "ELEMENT_NODE", "toString", "hasOwnProperty", "Object", "prototype", "isUndefined", "obj", "isNull", "isNumber", "isString", "isBoolean", "isFunction", "isArray", "Array", "isObject", "isArrayLike", "length", "lengthCorrectFormat", "isPlainObject", "key", "cstr", "ctor", "ctorProto", "hasOwnConstructor", "call", "hasIsPrototypeOf", "isHTMLElement", "instanceofObj", "HTMLElement", "nodeType", "isElement", "Element", "animationCurrentTime", "performance", "now", "animateNumber", "from", "to", "duration", "onFrame", "easing", "animationFrameId", "timeStart", "finalDuration", "frame", "complete", "timeNow", "timeElapsed", "stopAnimation", "percent", "progress", "animationCompleted", "each", "source", "callback", "keys", "inArray", "arr", "item", "indexOf", "concat", "a", "b", "push", "array", "items", "arrayIsSingleItem", "apply", "createOrKeepArray", "value", "isEmptyArray", "deduplicateArray", "Set", "runEachAndClear", "args", "keep", "runFn", "fn", "strPaddingTop", "strPaddingRight", "strPaddingLeft", "strPaddingBottom", "strMarginLeft", "strMarginRight", "strMarginBottom", "strOverflowX", "strOverflowY", "strWidth", "strHeight", "strVisible", "strHidden", "strScroll", "capitalizeFirstLetter", "str", "finalStr", "String", "toUpperCase", "slice", "equal", "props", "propMutation", "result", "prop", "compareA", "compareB", "equalWH", "equalXY", "equalTRBL", "noop", "bind", "selfClearTimeout", "timeout", "id", "setTFn", "clearTFn", "debounce", "functionToDebounce", "_", "_timeout", "p", "_maxDelay", "v", "_leading", "m", "_mergeParams", "maxTimeoutId", "prevArguments", "latestArguments", "leadingInvoked", "clear", "invokeFunctionToDebounce", "this", "mergeParms", "flush", "debouncedFn", "arguments", "finalTimeout", "hasTimeout", "finalMaxWait", "hasMaxWait", "setTimeoutFn", "clearTimeoutFn", "mergeParamsResult", "invokedArgs", "boundInvoke", "timeoutId", "_flush", "assignDeep", "target", "object1", "object2", "object3", "object4", "object5", "object6", "sources", "copy", "copyIsArray", "src", "clone", "removeUndefinedProperties", "deep", "undefined", "isEmptyObject", "capNumber", "number", "getDomTokensArray", "tokens", "split", "filter", "token", "getAttr", "elm", "attrName", "getAttribute", "hasAttr", "hasAttribute", "setAttrs", "attrNames", "setAttribute", "removeAttrs", "removeAttribute", "domTokenListAttr", "initialArr", "setElmAttr", "domTokenListOperation", "operationTokens", "operation", "initialArrSet", "join", "_remove", "removeTokens", "_add", "addTokens", "_has", "hasTokens", "tokenSet", "reduce", "boolean", "includes", "removeAttrClass", "addAttrClass", "addRemoveAttrClass", "add", "hasAttrClass", "createDomTokenListClass", "removeClass", "className", "addClass", "find", "selector", "rootElm", "querySelectorAll", "findFirst", "querySelector", "is", "matches", "isBodyElement", "contents", "childNodes", "parent", "parentElement", "closest", "getFocusedElement", "doc", "activeElement", "liesBetween", "highBoundarySelector", "deepBoundarySelector", "closestHighBoundaryElm", "closestDeepBoundaryElm", "deepBoundaryIsValid", "removeElements", "nodes", "e", "parentElm", "removeChild", "before", "preferredAnchor", "insertedElms", "anchor", "fragment", "createDocumentFragment", "insertedElm", "previousSibling", "appendChild", "firstChild", "nextSibling", "insertBefore", "appendChildren", "node", "children", "insertAfter", "insertedNodes", "createDiv", "classNames", "div", "createElement", "createDOM", "html", "createdDiv", "innerHTML", "trim", "customCssPropRegex", "getCSSVal", "computedStyle", "getPropertyValue", "validFiniteNumber", "notNaN", "isFinite", "parseToZeroOrNumber", "parseFloat", "ratioToCssPercent", "ratio", "toFixed", "numberToCssPx", "setStyles", "styles", "rawValue", "elmStyle", "style", "test", "setProperty", "_unused", "getStyles", "pseudoElm", "getSingleStyle", "getStylesResult", "getComputedStyle", "topRightBottomLeft", "propertyPrefix", "propertySuffix", "finalPrefix", "finalSuffix", "top", "right", "bottom", "left", "t", "r", "l", "getTrasformTranslateValue", "isHorizontal", "x", "y", "elementHasDimensions", "offsetWidth", "offsetHeight", "getClientRects", "zeroObj", "w", "h", "getElmWidthHeightProperty", "property", "getWindowSize", "customWnd", "getOffsetSize", "getClientSize", "getScrollSize", "getFractionalSize", "cssWidth", "cssHeight", "getBoundingClientRect", "hasDimensions", "domRectHasDimensions", "rect", "domRectAppeared", "currContentRect", "prevContentRect", "rectHasDimensions", "rectHadDimensions", "removeEventListener", "eventNames", "listener", "capture", "eventName", "addEventListener", "_ref", "passive", "_passive", "_capture", "once", "_once", "nativeOptions", "map", "finalListener", "evt", "stopPropagation", "preventDefault", "stopAndPrevent", "scrollElementTo", "position", "scrollLeft", "scrollTop", "getElementScroll", "getZeroScrollCoordinates", "_start", "_end", "sanitizeScrollCoordinates", "rawScrollCoordinates", "overflowAmount", "T", "D", "sanitizeAxis", "start", "end", "amount", "newStart", "newEnd", "startAbs", "endAbs", "startX", "endX", "startY", "endY", "isDefaultDirectionScrollCoordinates", "getAxis", "getScrollCoordinatesPercent", "currentScroll", "current", "focusElement", "element", "focus", "preventScroll", "manageListener", "createEventListenerHub", "initialEventListeners", "events", "Map", "removeEvent", "eventSet", "get", "currListener", "forEach", "addEvent", "nameOrEventListeners", "listenerOrPure", "set", "eventListenerKeys", "offFns", "eventListener", "triggerEvent", "event", "opsStringify", "JSON", "stringify", "val", "getPropByPath", "path", "defaultOptions", "paddingAbsolute", "showNativeOverlaidScrollbars", "elementEvents", "attributes", "ignoreMutation", "overflow", "scrollbars", "theme", "visibility", "autoHide", "autoHideDelay", "autoHideSuspend", "dragScroll", "clickScroll", "pointers", "getOptionsDiff", "currOptions", "newOptions", "diff", "optionsKeys", "optionKey", "currOptionValue", "newOptionValue", "isDiff", "createOptionCheck", "changedOptions", "dataAttributePrefix", "classNameEnvironment", "classNameEnvironmentScrollbarHidden", "dataAttributeInitialize", "dataValueNoClipping", "dataAttributeHtmlBody", "dataAttributeHost", "dataValueHostIsHost", "dataAttributeViewport", "dataValueViewportOverflowXPrefix", "dataValueViewportOverflowYPrefix", "dataValueViewportArrange", "dataValueViewportMeasuring", "dataValueViewportScrollbarHidden", "dataValueViewportScrollbarPressed", "dataValueViewportNoContent", "dataAttributePadding", "dataAttributeContent", "classNameSizeObserver", "classNameSizeObserverAppear", "classNameSizeObserverListener", "classNameSizeObserverListenerScroll", "classNameSizeObserverListenerItem", "classNameSizeObserverListenerItemFinal", "classNameTrinsicObserver", "classNameScrollbarThemeNone", "classNameScrollbar", "classNameScrollbarRtl", "classNameScrollbarHorizontal", "classNameScrollbarVertical", "classNameScrollbarTrack", "classNameScrollbarHandle", "classNameScrollbarVisible", "classNameScrollbarCornerless", "classNameScrollbarInteraction", "classNameScrollbarUnusable", "classNameScrollbarAutoHide", "classNameScrollbarAutoHideHidden", "classNameScrollbarWheel", "classNameScrollbarTrackInteractive", "classNameScrollbarHandleInteractive", "environmentInstance", "createEnvironment", "getNativeScrollbarSize", "measureElm", "measureElmChild", "body", "cSize", "oSize", "fSize", "getNativeScrollbarsHiding", "testElm", "revertClass", "envStyle", "envDOM", "envElm", "envChildElm", "updateNativeScrollbarSizeCache", "getNativeScrollbarSizeCache", "nativeScrollbarsSize", "nativeScrollbarsHiding", "nativeScrollbarsOverlaid", "staticDefaultInitialization", "elements", "host", "padding", "viewport", "content", "slot", "cancel", "staticDefaultOptions", "getDefaultOptions", "getDefaultInitialization", "env", "_nativeScrollbarsSize", "_nativeScrollbarsOverlaid", "_nativeScrollbarsHiding", "_scrollTimeline", "_addResizeListener", "_getDefaultInitialization", "_setDefaultInitialization", "newInitializationStrategy", "_getDefaultOptions", "_setDefaultOptions", "newDefaultOptions", "_staticDefaultInitialization", "_staticDefaultOptions", "matchMedia", "addZoomListener", "onZoom", "media", "devicePixelRatio", "updatedNativeScrollbarSize", "nativeScrollbarSizeChanged", "getEnvironment", "resolveInitialization", "staticInitializationElement", "fallbackStaticInitializationElement", "defaultStaticInitializationElement", "staticInitializationElementValue", "staticInitialization", "resolvedInitialization", "dynamicInitializationElement", "fallbackDynamicInitializationElement", "defaultDynamicInitializationElement", "dynamicInitializationElementValue", "dynamicInitialization", "cancelInitialization", "isBody", "cancelInitializationValue", "M", "R", "P", "defaultNativeScrollbarsOverlaid", "defaultbody", "resolvedNativeScrollbarsOverlaid", "resolvedDocumentScrollingElement", "finalNativeScrollbarsOverlaid", "finalDocumentScrollingElement", "targetInstanceMap", "WeakMap", "addInstance", "osInstance", "removeInstance", "delete", "getInstance", "createEventContentChange", "eventContentChange", "destroyed", "destroy", "updateElements", "getElements", "eventElmList", "entries", "isTargetChild", "contains", "removeListener", "createDOMObserver", "isContentObserver", "isConnected", "j", "_attributes", "X", "_styleChangingAttributes", "Y", "_eventContentChange", "W", "_nestedTargetSelector", "J", "_ignoreTargetChange", "K", "_ignoreContentChange", "debouncedEventContentChange", "destroyEventContentChange", "updateEventContentChangeElements", "finalAttributes", "finalStyleChangingAttributes", "observedAttributes", "observerCallback", "fromRecords", "mutations", "ignoreTargetChange", "ignoreContentChange", "totalChangedNodes", "targetChangedAttrs", "targetStyleChanged", "contentChanged", "mutation", "attributeName", "mutationTarget", "type", "oldValue", "addedNodes", "removedNodes", "isAttributesType", "isChildListType", "targetIsMutationTarget", "isAttrChange", "attributeValue", "attributeChanged", "styleChangingAttrChanged", "contentAttrChanged", "isNestedTarget", "baseAssertion", "contentFinalChanged", "mutationObserver", "observe", "attributeOldValue", "attributeFilter", "subtree", "childList", "characterData", "disconnect", "takeRecords", "pluginModules", "staticPluginModuleInstances", "addPlugins", "addedPlugin", "plugin", "registerPluginModuleInstances", "staticObj", "instanceInfo", "static", "osStatic", "instance", "instanceObj", "instancePluginMap", "getStaticPluginModuleInstance", "pluginModuleName", "optionsValidationPluginModuleName", "sizeObserverPluginName", "SizeObserverPlugin", "listenerElement", "onSizeChangedCallback", "observeAppearChange", "scrollAmount", "scrollEventName", "observerElementChildren", "observerElementChildrenRoot", "shrinkElement", "lastChild", "expandElement", "expandElementChild", "cacheSize", "currSize", "isDirty", "rAFId", "reset", "onResized", "appear", "onScroll", "scrollEvent", "destroyFns", "getShowNativeOverlaidScrollbars", "checkOption", "showNativeOverlaidScrollbarsOption", "showNativeOverlaidScrollbarsChanged", "overflowIsVisible", "overflowBehavior", "createViewportOverflowState", "hasOverflow", "getAxisOverflowStyle", "axisBehavior", "axisHasOverflow", "perpendicularBehavior", "perpendicularOverflow", "behaviorStyle", "replace", "axisOverflowVisible", "perpendicularOverflowVisible", "nonPerpendicularOverflow", "nonOverflow", "_overflowStyle", "_overflowScroll", "scrollbarsHidingPluginName", "ScrollbarsHidingPlugin", "_viewportArrangement", "structureSetupElements", "structureSetupState", "observersSetupState", "checkOptions", "nt", "_viewportIsTarget", "ot", "_viewport", "k", "doViewportArrange", "readViewportOverflowState", "getStatePerAxis", "styleKey", "overflowStyle", "overflowScroll", "xOverflowStyle", "xOverflowScroll", "yOverflowStyle", "yOverflowScroll", "_getViewportOverflowHideOffset", "viewportOverflowState", "Z", "arrangeHideOffset", "getHideOffsetPerAxis", "isOverlaid", "nativeScrollbarSize", "nonScrollbarStylingHideOffset", "scrollbarsHideOffset", "scrollbarsHideOffsetArrange", "xScrollbarsHideOffset", "xScrollbarsHideOffsetArrange", "yScrollbarsHideOffset", "yScrollbarsHideOffsetArrange", "_scrollbarsHideOffset", "_scrollbarsHideOffsetArrange", "_hideNativeScrollbars", "_directionIsRTL", "viewportArrange", "viewportStyleObj", "st", "et", "arrangeX", "arrangeY", "hideOffsetX", "hideOffsetY", "rt", "_viewportPaddingStyle", "horizontalMarginKey", "viewportHorizontalPaddingKey", "horizontalMarginValue", "verticalMarginValue", "horizontalPaddingValue", "verticalPaddingValue", "_arrangeViewport", "viewportScrollSize", "sizeFraction", "ct", "viewportArrangeHorizontalPaddingKey", "viewportArrangeHorizontalPaddingValue", "viewportArrangeVerticalPaddingValue", "paddingTop", "fractionalContentWidth", "fractionalContenHeight", "arrangeSize", "_undoViewportArrange", "finalViewportOverflowState", "viewportPaddingStyle", "finalPaddingStyle", "assignProps", "prevStyle", "addArrange", "clickScrollPluginModuleName", "ClickScrollPlugin", "moveHandleRelative", "getHandleOffset", "startOffset", "handleLength", "relativeTrackPointerOffset", "iteration", "animateClickScroll", "clickScrollProgress", "animationProgress", "handleStartBound", "handleEndBound", "mouseBetweenHandleBounds", "firstIterationPauseTimeout", "createSizeObserver", "_appear", "sizeObserverPlugin", "updateResizeObserverContentRectCache", "baseElements", "sizeObserver", "onSizeChangedCallbackProxy", "sizeChangedContext", "isResizeObserverCall", "ResizeObserverEntry", "skip", "currRContentRect", "contentRect", "_sizeChanged", "resizeObserverInstance", "pop", "pluginAppearCallback", "pluginDestroyFns", "createTrinsicObserver", "onTrinsicChangedCallback", "intersectionObserverInstance", "isHeightIntrinsic", "ioEntryOrSize", "isIntersecting", "intersectionRatio", "trinsicObserver", "updateHeightIntrinsicCache", "triggerOnTrinsicChangedCallback", "updateValue", "heightIntrinsic", "heightIntrinsicChanged", "intersectionObserverCallback", "root", "onSizeChanged", "newSize", "createObserversSetup", "getCurrentOption", "onObserversUpdated", "debounceTimeout", "debounceMaxDelay", "updateContentMutationObserver", "destroyContentMutationObserver", "prevDirectionIsRTL", "hostSelector", "viewportSelector", "viewportAttrsFromTarget", "baseStyleChangingAttrsTextarea", "baseStyleChangingAttrs", "vt", "_target", "ht", "_host", "gt", "_scrollOffsetElement", "bt", "_content", "wt", "_isTextarea", "yt", "_isBody", "St", "_viewportHasClass", "Ot", "_viewportAddRemoveClass", "getDirectionIsRTL", "state", "_heightIntrinsic", "scrollbarsHidingPlugin", "updateContentSizeCache", "viewportIsTargetBody", "noClipping", "isArranged", "scrollOffset", "revertMeasuring", "redoViewportArrange", "viewportScroll", "fractional", "contentMutationObserverAttr", "onObserversUpdatedDebounced", "prev", "prevObj", "currObj", "setDirection", "updateHints", "newDirectionIsRTL", "_directionChanged", "onTrinsicChanged", "heightIntrinsicCache", "_heightIntrinsicChanged", "exclusiveSizeChange", "updateFn", "onContentMutation", "contentChangedThroughEvent", "_contentMutation", "onHostMutation", "_hostMutation", "constructTrinsicObserver", "updateTrinsicObserver", "constructSizeObserver", "constructHostMutationObserver", "updateHostMutationObserver", "viewportIsTargetResizeObserver", "onWindowResizeDebounced", "destroySizeObserver", "destroyTrinsicObserver", "destroyHostMutationObserver", "removeResizeListener", "_scrollbarSizeChanged", "_checkOption", "_takeRecords", "_force", "attributesChanged", "elementEventsChanged", "debounceValue", "debounceChanged", "contentMutationObserverChanged", "ignoreMutationFromOptions", "construct", "ignore", "maxWait", "hostUpdateResult", "trinsicUpdateResult", "contentUpdateResult", "createScrollbarsSetupElements", "scrollbarsSetupEvents", "defaultInitScrollbars", "defaultInitScrollbarsSlot", "Dt", "_targetIsElm", "scrollbarsInit", "initScrollbarsSlot", "elementAnimations", "initScrollTimeline", "axis", "scrollTimeline", "evaluatedScrollbarSlot", "generalDynamicInitializationElement", "getScrollbarHandleLengthRatio", "scrollbarStructure", "kt", "_track", "Mt", "_handle", "handleSize", "trackSize", "Rt", "_overflowAmount", "Vt", "_overflowEdge", "viewportSize", "getScrollbarHandleOffsetRatio", "scrollPercent", "lengthRatio", "addDirectionRTLKeyframes", "keyframes", "cancelElementAnimations", "currAnimations", "doCancel", "animation", "setElementAnimation", "timeline", "composite", "activeAnimations", "activeAnimation", "effect", "KeyframeEffect", "animate", "scrollbarStructureAddRemoveClass", "scrollbarStructures", "action", "_scrollbar", "scrollbarStyle", "scrollbarStructureRefreshHandleLength", "structure", "scrollbarStructureRefreshHandleOffset", "Pt", "_scrollCoordinates", "xyKey", "axisScrollTimeline", "axisIsDefaultDirectionScroll", "getAxisTransformValue", "transform", "doRefreshScrollbarOffset", "scrollbar", "horizontalScrollbars", "verticalScrollbars", "scrollbarsAddRemoveClass", "onlyHorizontal", "singleAxis", "runHorizontal", "runVertical", "refreshScrollbarsHandleLength", "refreshScrollbarsHandleOffset", "refreshScrollbarsScrollbarOffset", "isDefaultDirectionScroll", "cushion", "setScrollbarElementAnimation", "styleScrollbarPosition", "Lt", "getTranslateValue", "axisScrollPercent", "axisOverflowAmount", "axisIsDefaultCoordinates", "px", "generateScrollbarDOM", "scrollbarClassName", "track", "handle", "generateHorizontalScrollbarStructure", "generateVerticalScrollbarStructure", "appendElements", "_refreshScrollbarsHandleLength", "_refreshScrollbarsHandleOffset", "_refreshScrollbarsScrollbarOffset", "_scrollbarsAddRemoveClass", "_horizontal", "_scrollbarStructures", "_clone", "_style", "_vertical", "createScrollbarsSetupEvents", "scrollbarHandlePointerInteraction", "refreshScrollbarStructuresHandleOffset", "Jt", "_documentElm", "wheelTimeout", "clearWheelTimeout", "scrollSnapScrollTransitionTimeout", "clearScrollSnapScrollTransitionTimeout", "requestHandleTransitionAnimationFrame", "clearHandleTransitionTimeout", "refreshHandleOffsetTransition", "scrollOffsetElementScrollBy", "coordinates", "scrollBy", "behavior", "widthHeightKey", "createInteractiveScrollEvents", "releasePointerCaptureEvents", "clientXYKey", "leftTopKey", "whKey", "createRelativeHandleMove", "mouseDownScroll", "invertedScale", "deltaMovement", "handleTrackDiff", "scrollDeltaPercent", "scrollDelta", "pointerDownEvent", "isDragScroll", "pointerCaptureElement", "scrollbarOptions", "button", "isPrimary", "pointerType", "continuePointerDown", "instantClickScroll", "shiftKey", "getHandleRect", "getTrackRect", "handleRect", "trackRect", "axisScale", "pointerDownOffset", "handleCenter", "releasePointerCapture", "pointerUpEvent", "pointerId", "addScrollbarPressedClass", "removeScrollbarPressedClass", "withoutSnapScrollOffset", "withSnapScrollOffset", "snapScrollDiff", "pointerMoveEvent", "relativeMovement", "setPointerCapture", "wheelScrollBy", "isAffectingTransition", "propertyName", "focusedElement", "wheelEvent", "deltaX", "deltaY", "deltaMode", "animateHandleOffset", "createScrollbarsSetup", "mouseInHost", "autoHideIsMove", "autoHideIsLeave", "autoHideIsNever", "prevTheme", "instanceAutoHideSuspendScrollDestroyFn", "instanceAutoHideDelay", "isHoverablePointerType", "requestScrollAnimationFrame", "cancelScrollAnimationFrame", "autoHideInstantInteractionTimeout", "clearAutoHideInstantInteractionTimeout", "autoHideSuspendTimeout", "clearAutoHideSuspendTimeout", "auotHideTimeout", "clearAutoHideTimeout", "manageScrollbarsAutoHideInstantInteraction", "Kt", "_scrollEventElement", "Bt", "Ut", "Nt", "qt", "manageScrollbarsAutoHide", "removeAutoHide", "delayless", "hide", "manageAutoHideSuspension", "onHostMouseEnter", "_observersUpdateHints", "_structureUpdateHints", "Zt", "_overflowEdgeChanged", "tn", "_overflowAmountChanged", "nn", "_overflowStyleChanged", "sn", "_scrollCoordinatesChanged", "Ct", "dt", "G", "en", "_hasOverflow", "themeChanged", "visibilityChanged", "autoHideChanged", "autoHideSuspendChanged", "dragScrollChanged", "clickScrollChanged", "overflowChanged", "trulyAppeared", "updateScrollbars", "updateVisibility", "setScrollbarVisibility", "isVisible", "xVisible", "yVisible", "hasCorner", "createStructureSetupElements", "defaultInitElements", "defaultHostInitialization", "defaultPaddingInitialization", "defaultViewportInitialization", "defaultContentInitialization", "targetIsElm", "targetStructureInitialization", "initElements", "hostInitialization", "paddingInitialization", "viewportInitialization", "contentInitialization", "targetElement", "isTextarea", "ownerDocument", "docElement", "documentElement", "getDocumentWindow", "defaultView", "generalStaticInitializationElement", "createNewDiv", "generateViewportElement", "generateContentElement", "possibleViewportElement", "viewportIsTarget", "possibleContentElement", "viewportIsContent", "viewportElement", "nonBodyHostElement", "hostElement", "paddingElement", "contentElement", "generatedElements", "elementIsGenerated", "originalNonBodyScrollOffsetElement", "evaluatedTargetObj", "_padding", "_originalScrollOffsetElement", "_windowElm", "viewportAttributeClassName", "cn", "isTextareaHostGenerated", "targetContents", "contentSlot", "docWnd", "initActiveElm", "unwrap", "prepareWrapUnwrapFocus", "tabIndexStr", "originalViewportTabIndex", "undoInitWrapUndwrapFocus", "destroyActiveElm", "viewportIsGenerated", "destroyFocusElement", "undoDestroyWrapUndwrapFocus", "createTrinsicUpdateSegment", "_observersState", "xt", "$t", "createPaddingUpdateSegment", "updatePaddingCache", "currentPaddingCache", "paddingChanged", "ft", "Ht", "paddingAbsoluteChanged", "contentMutation", "paddingStyleChanged", "paddingRelative", "paddingHorizontal", "paddingVertical", "paddingStyle", "viewportStyle", "_paddingAbsolute", "_paddingStyleChanged", "createOverflowUpdateSegment", "ln", "max0", "flowDirectionStyleArr", "whCacheOptions", "partialXYOptions", "setMeasuringMode", "active", "getOverflowAmount", "viewportClientSize", "tollerance", "updateSizeFraction", "getCurrentSizeFraction", "updateViewportScrollSizeCache", "getCurrentViewportScrollSizeCache", "updateOverflowAmountCache", "getCurrentOverflowAmountCache", "updateHasOverflowCache", "updateOverflowEdge", "getCurrentOverflowEdgeCache", "updateOverflowStyleCache", "updateFlowDirectionStyles", "currVal", "newValu", "updateMeasuredScrollCoordinates", "getCurrentMeasuredScrollCoordinates", "originalScrollOffset", "removeNoContent", "removeScrollBlock", "scrollEventScrollOffset", "isTrusted", "scrollSize", "tmp", "createViewportOverflowStyleClassName", "prefix", "setViewportOverflowStyle", "viewportOverflowStyle", "createAllOverflowStyleClassNames", "allOverflowStyleClassNames", "zt", "scrollbarsHidingPluginViewportArrangement", "it", "ut", "_t", "overflowXVisible", "overflowYVisible", "viewportChanged", "sizeFractionCache", "viewportScrollSizeCache", "overflowAmuntCache", "overflowEdgeCache", "windowInnerSize", "overflowAmountScrollSize", "overflowAmountClientSize", "overflowEdge", "overflowEdgeChanged", "overflowAmountChanged", "viewportScrollSizeChanged", "sizeFractionChanged", "hasOverflowChanged", "removeClipping", "adjustViewportStyle", "overflowStyleChanged", "flowDirectionStylesChanged", "adjustMeasuredScrollCoordinates", "scrollCoordinates", "scrollCoordinatesChanged", "_scrolled", "createStructureSetup", "appendStructureElements", "canceled", "updateSegments", "updateInfo", "adjustScrollOffset", "updateSegment", "createSetups", "isDestroyed", "onUpdated", "structureSetupCreate", "structureSetupUpdate", "structureSetupCanceled", "observersSetupCreate", "observersSetupUpdate", "observersUpdateHints", "scrollbarsSetupCreate", "scrollbarsSetupUpdate", "scrollbarsSetupElements", "updateHintsAreTruthy", "hints", "some", "observerUpdateHints", "_changedOptions", "rawChangedOptions", "rawForce", "At", "pn", "_cloneScrollbar", "baseUpdateInfoObj", "observersHints", "structureHints", "truthyObserversHints", "truthyStructureHints", "rn", "initialScroll", "_observersSetupState", "_structureSetupState", "_structureSetupElements", "_scrollbarsSetupElements", "OverlayScrollbars", "eventListeners", "N", "targetIsElement", "instanceTarget", "potentialInstance", "instancePluginModuleInstances", "validateOptions", "newOptionsWithoutUndefined", "pluginValidate", "currentOptions", "addPluginEvent", "removePluginEvents", "triggerPluginEvent", "addInstanceEvent", "removeInstanceEvents", "triggerInstanceEvent", "setupsConstruct", "setupsUpdate", "setupsState", "setupsElements", "setupsCanceled", "Et", "sizeChanged", "directionChanged", "hostMutation", "pure", "base", "on", "off", "vn", "hn", "un", "directionRTL", "Ft", "Wt", "translateScrollbarStructure", "translateScrollbarsSetupElement", "scrollbarsSetupElement", "jt", "Xt", "translatedStructure", "scrollOffsetElement", "scrollEventElement", "scrollbarHorizontal", "scrollbarVertical", "plugins", "isArr", "pluginsToAdd", "valid", "hasElmsFn", "V", "B", "F", "U", "q", "scrollbarsSize", "scrollbarsOverlaid", "scrollbarsHiding", "setDefaultInitialization", "setDefaultOptions"]
}

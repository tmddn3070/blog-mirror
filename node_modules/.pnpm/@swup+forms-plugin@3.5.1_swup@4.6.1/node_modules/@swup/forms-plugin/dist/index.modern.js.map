{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import Plugin from '@swup/plugin';\nimport { Location, getCurrentUrl } from 'swup';\nimport type { DelegateEvent, DelegateEventUnsubscribe, Handler } from 'swup';\n\ndeclare module 'swup' {\n\texport interface HookDefinitions {\n\t\t'form:submit': { el: HTMLFormElement; event: DelegatedSubmitEvent };\n\t\t'form:submit:newtab': { el: HTMLFormElement; event: DelegatedSubmitEvent };\n\t}\n}\n\ntype DelegatedSubmitEvent = DelegateEvent<SubmitEvent, HTMLFormElement>;\n\ntype Options = {\n\tformSelector: string;\n\tinlineFormSelector: string;\n\tstripEmptyParams: boolean;\n};\n\ntype FormInfo = {\n\turl: string;\n\thash: string;\n\tmethod: 'GET' | 'POST';\n\tdata: FormData;\n\tbody: URLSearchParams | FormData;\n\tencoding: string;\n};\n\nexport default class SwupFormsPlugin extends Plugin {\n\tname = 'SwupFormsPlugin';\n\n\trequires = { swup: '>=4' };\n\n\tdefaults: Options = {\n\t\tformSelector: 'form[data-swup-form]',\n\t\tinlineFormSelector: 'form[data-swup-inline-form]',\n\t\tstripEmptyParams: false\n\t};\n\toptions: Options;\n\n\t// Track pressed keys to detect form submissions to a new tab\n\tspecialKeys: { [key: string]: boolean } = {\n\t\tMeta: false,\n\t\tControl: false,\n\t\tShift: false\n\t};\n\n\tformSubmitDelegate?: DelegateEventUnsubscribe;\n\n\tconstructor(options: Partial<Options> = {}) {\n\t\tsuper();\n\t\tthis.options = { ...this.defaults, ...options };\n\t}\n\n\tmount() {\n\t\tthis.swup.hooks.create('form:submit');\n\t\tthis.swup.hooks.create('form:submit:newtab');\n\n\t\t// Register the submit handler. Using `capture:true` to be\n\t\t// able to set the form's target attribute on the fly.\n\t\tthis.formSubmitDelegate = this.swup.delegateEvent(\n\t\t\tthis.options.formSelector,\n\t\t\t'submit',\n\t\t\tthis.beforeFormSubmit.bind(this),\n\t\t\t{\n\t\t\t\tcapture: true\n\t\t\t}\n\t\t);\n\n\t\tthis.on('visit:start', this.handleInlineForms, { priority: 1 });\n\n\t\tdocument.addEventListener('keydown', this.onKeyDown);\n\t\tdocument.addEventListener('keyup', this.onKeyUp);\n\t\twindow.addEventListener('blur', this.onBlur);\n\t}\n\n\tunmount() {\n\t\tthis.formSubmitDelegate?.destroy();\n\n\t\tdocument.removeEventListener('keydown', this.onKeyDown);\n\t\tdocument.removeEventListener('keyup', this.onKeyUp);\n\t\twindow.removeEventListener('blur', this.onBlur);\n\t}\n\n\t/**\n\t * Handles form 'submit' events during the capture phase\n\t */\n\tbeforeFormSubmit(event: DelegatedSubmitEvent): void {\n\t\tconst swup = this.swup;\n\t\tconst { delegateTarget: form, submitter } = event;\n\t\tconst action = this.getFormAttr('action', form, submitter) || getCurrentUrl();\n\t\tconst opensInNewTabFromKeyPress = this.isSpecialKeyPressed();\n\t\tconst opensInNewTabFromTargetAttr =\n\t\t\tthis.getFormAttr('target', form, submitter) === '_blank';\n\t\tconst opensInNewTab = opensInNewTabFromKeyPress || opensInNewTabFromTargetAttr;\n\n\t\t// Create temporary visit object for form:submit:* hooks\n\t\tconst { url: to, hash } = Location.fromUrl(action);\n\t\t// @ts-expect-error: createVisit is currently private, need to make this semi-public somehow\n\t\tconst visit = swup.createVisit({ to, hash, el: form, event });\n\n\t\t/**\n\t\t * Allow ignoring this form submission via callback\n\t\t * No use in checking if it will open in a new tab anyway\n\t\t */\n\t\tif (!opensInNewTab && swup.shouldIgnoreVisit(action, { el: form, event })) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Open the form in a new tab because of its target attribute\n\t\t */\n\t\tif (opensInNewTabFromTargetAttr) {\n\t\t\tswup.hooks.callSync('form:submit:newtab', visit, { el: form, event });\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Open the form in a new tab if either Command (Mac), Control (Windows) or Shift is pressed.\n\t\t * Normalizes behavior across browsers.\n\t\t */\n\t\tif (opensInNewTabFromKeyPress) {\n\t\t\tswup.hooks.callSync('form:submit:newtab', visit, { el: form, event });\n\n\t\t\tform.dataset.swupOriginalFormTarget = form.getAttribute('target') || '';\n\t\t\tform.setAttribute('target', '_blank');\n\t\t\tform.addEventListener(\n\t\t\t\t'submit',\n\t\t\t\t() => requestAnimationFrame(() => this.restorePreviousFormTarget(form)),\n\t\t\t\t{ once: true }\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * Trigger the form:submit hook.\n\t\t */\n\t\tswup.hooks.callSync('form:submit', visit, { el: form, event }, () => {\n\t\t\tthis.submitForm(event);\n\t\t});\n\t}\n\n\t/**\n\t * Restores the previous form target if available\n\t */\n\trestorePreviousFormTarget(form: HTMLFormElement): void {\n\t\tif (form.dataset.swupOriginalFormTarget) {\n\t\t\tform.setAttribute('target', form.dataset.swupOriginalFormTarget);\n\t\t} else {\n\t\t\tform.removeAttribute('target');\n\t\t}\n\t}\n\n\t/**\n\t * Submits a form through swup\n\t */\n\tsubmitForm(event: DelegatedSubmitEvent): void {\n\t\tconst el = event.delegateTarget;\n\t\tconst { url, hash, method, data, body } = this.getFormInfo(el, event);\n\t\tlet action = url;\n\t\tlet params: { method: 'GET' | 'POST'; body?: FormData | URLSearchParams } = { method };\n\n\t\tswitch (method) {\n\t\t\tcase 'POST':\n\t\t\t\tparams = { method, body };\n\t\t\t\tbreak;\n\t\t\tcase 'GET':\n\t\t\t\tthis.maybeStripEmptyParams(data);\n\t\t\t\taction = this.appendQueryParams(action, data);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Unsupported form method: ${method}`);\n\t\t\t\treturn;\n\t\t}\n\n\t\tevent.preventDefault();\n\t\tthis.swup.cache.delete(action);\n\t\tthis.swup.navigate(action + hash, params, { el, event });\n\t}\n\n\t/**\n\t * Get information about where and how a form will submit\n\t */\n\tgetFormInfo(form: HTMLFormElement, { submitter }: SubmitEvent): FormInfo {\n\t\tconst method = (this.getFormAttr('method', form, submitter) || 'get').toUpperCase() as\n\t\t\t| 'GET'\n\t\t\t| 'POST';\n\t\tconst action = this.getFormAttr('action', form, submitter) || getCurrentUrl();\n\t\tconst { url, hash } = Location.fromUrl(action);\n\t\tconst encoding = (\n\t\t\tthis.getFormAttr('enctype', form, submitter) || 'application/x-www-form-urlencoded'\n\t\t).toLowerCase();\n\t\tconst multipart = encoding === 'multipart/form-data';\n\n\t\tconst data = new FormData(form);\n\t\tlet body: FormData | URLSearchParams;\n\t\tif (multipart) {\n\t\t\tbody = data;\n\t\t} else {\n\t\t\tbody = new URLSearchParams(data as unknown as Record<string, string>);\n\t\t}\n\n\t\treturn { url, hash, method, data, body, encoding };\n\t}\n\n\t/**\n\t * Get a form attribute either from the form, or the submitter element if present\n\t */\n\tgetFormAttr(\n\t\tattr: string,\n\t\tform: HTMLFormElement,\n\t\tsubmitter: HTMLElement | null = null\n\t): string | null {\n\t\treturn submitter?.getAttribute(`form${attr}`) ?? form.getAttribute(attr);\n\t}\n\n\t/**\n\t * Appends query parameters to a URL\n\t */\n\tappendQueryParams(url: string, data: FormData): string {\n\t\tconst path = url.split('?')[0];\n\t\tconst query = new URLSearchParams(data as unknown as Record<string, string>).toString();\n\t\treturn query ? `${path}?${query}` : path;\n\t}\n\n\t/**\n\t * Strip empty params from the FormData (by reference)\n\t * @see https://stackoverflow.com/a/64029534/586823\n\t */\n\tmaybeStripEmptyParams(data: FormData): void {\n\t\tif (!this.options.stripEmptyParams) return;\n\n\t\tfor (const [name, value] of Array.from(data.entries())) {\n\t\t\tif (value === '') data.delete(name);\n\t\t}\n\t}\n\n\t/**\n\t * Is either command or control key down at the moment\n\t */\n\tisSpecialKeyPressed(): boolean {\n\t\treturn Object.values(this.specialKeys).some((value) => value);\n\t}\n\n\t/**\n\t * Reset all entries in `specialKeys` to false\n\t */\n\tresetSpecialKeys() {\n\t\tfor (const key of Object.keys(this.specialKeys)) {\n\t\t\tthis.specialKeys[key] = false;\n\t\t}\n\t}\n\n\t/**\n\t * Run every time the window looses focus\n\t */\n\tonBlur = () => {\n\t\tthis.resetSpecialKeys();\n\t};\n\n\t/**\n\t * Adjust `specialKeys` on keyDown\n\t */\n\tonKeyDown = (event: KeyboardEvent): void => {\n\t\tif (this.specialKeys.hasOwnProperty(event.key)) {\n\t\t\tthis.specialKeys[event.key] = true;\n\t\t}\n\t};\n\n\t/**\n\t * Adjust `specialKeys` on keyUp\n\t */\n\tonKeyUp = (event: KeyboardEvent): void => {\n\t\tif (this.specialKeys.hasOwnProperty(event.key)) {\n\t\t\tthis.specialKeys[event.key] = false;\n\t\t}\n\t};\n\n\t/**\n\t * Handles visits triggered by forms matching [data-swup-inline-form]\n\t */\n\thandleInlineForms: Handler<'visit:start'> = (visit) => {\n\t\tconst { el } = visit.trigger;\n\t\tif (!el?.matches(this.options.inlineFormSelector)) return;\n\n\t\tif (!el.id) {\n\t\t\tconsole.error(`[@swup/forms-plugin] inline forms must have an id attribute:`, el);\n\t\t\treturn;\n\t\t}\n\n\t\t// Modify visit to only replace and animate the form's container\n\t\tconst selector = `#${el.id}`;\n\t\tvisit.containers = [selector];\n\t\tvisit.animation.scope = 'containers';\n\t\tvisit.animation.selector = selector;\n\t\tvisit.scroll.target = selector;\n\n\t\t// Modify visit to focus the form after the transition\n\t\t// @ts-expect-error: can't know if A11yPlugin is installed\n\t\tconst a11y = visit.a11y as { focus?: boolean | string };\n\t\tif (typeof a11y === 'object') {\n\t\t\ta11y.focus = selector;\n\t\t}\n\t};\n}\n"],"names":["SwupFormsPlugin","Plugin","constructor","options","super","this","name","requires","swup","defaults","formSelector","inlineFormSelector","stripEmptyParams","specialKeys","Meta","Control","Shift","formSubmitDelegate","onBlur","resetSpecialKeys","onKeyDown","event","hasOwnProperty","key","onKeyUp","handleInlineForms","visit","el","trigger","matches","id","console","error","selector","containers","animation","scope","scroll","target","a11y","focus","_extends","mount","hooks","create","delegateEvent","beforeFormSubmit","bind","capture","on","priority","document","addEventListener","window","unmount","_this$formSubmitDeleg","destroy","removeEventListener","delegateTarget","form","submitter","action","getFormAttr","getCurrentUrl","opensInNewTabFromKeyPress","isSpecialKeyPressed","opensInNewTabFromTargetAttr","opensInNewTab","url","to","hash","Location","fromUrl","createVisit","shouldIgnoreVisit","callSync","dataset","swupOriginalFormTarget","getAttribute","setAttribute","requestAnimationFrame","restorePreviousFormTarget","once","submitForm","removeAttribute","method","data","body","getFormInfo","params","maybeStripEmptyParams","appendQueryParams","warn","preventDefault","cache","delete","navigate","toUpperCase","encoding","toLowerCase","multipart","FormData","URLSearchParams","attr","_submitter$getAttribu","path","split","query","toString","value","Array","from","entries","Object","values","some","keys"],"mappings":"yTA4BqBA,UAAwBC,EAqB5CC,WAAAA,CAAYC,EAA4B,CAAA,GACvCC,QAAQC,KArBTC,KAAO,kBAAiBD,KAExBE,SAAW,CAAEC,KAAM,OAEnBC,KAAAA,SAAoB,CACnBC,aAAc,uBACdC,mBAAoB,8BACpBC,kBAAkB,QAEnBT,aAAO,EAAAE,KAGPQ,YAA0C,CACzCC,MAAM,EACNC,SAAS,EACTC,OAAO,GACPX,KAEDY,wBAkNAC,EAAAA,KAAAA,OAAS,KACRb,KAAKc,kBACN,EAKAC,KAAAA,UAAaC,IACRhB,KAAKQ,YAAYS,eAAeD,EAAME,OACzClB,KAAKQ,YAAYQ,EAAME,MAAO,EAC/B,EAMDC,KAAAA,QAAWH,IACNhB,KAAKQ,YAAYS,eAAeD,EAAME,OACzClB,KAAKQ,YAAYQ,EAAME,MAAO,EAC/B,EACAlB,KAKDoB,kBAA6CC,IAC5C,MAAMC,GAAEA,GAAOD,EAAME,QACrB,GAAO,MAAFD,IAAAA,EAAIE,QAAQxB,KAAKF,QAAQQ,oBAAqB,OAEnD,IAAKgB,EAAGG,GAEP,YADAC,QAAQC,qEAAsEL,GAK/E,MAAMM,EAAW,IAAIN,EAAGG,KACxBJ,EAAMQ,WAAa,CAACD,GACpBP,EAAMS,UAAUC,MAAQ,aACxBV,EAAMS,UAAUF,SAAWA,EAC3BP,EAAMW,OAAOC,OAASL,EAItB,MAAMM,EAAOb,EAAMa,KACC,iBAATA,IACVA,EAAKC,MAAQP,EACd,EA5PA5B,KAAKF,QAAOsC,EAAQ,CAAA,EAAApC,KAAKI,SAAaN,EACvC,CAEAuC,KAAAA,GACCrC,KAAKG,KAAKmC,MAAMC,OAAO,eACvBvC,KAAKG,KAAKmC,MAAMC,OAAO,sBAIvBvC,KAAKY,mBAAqBZ,KAAKG,KAAKqC,cACnCxC,KAAKF,QAAQO,aACb,SACAL,KAAKyC,iBAAiBC,KAAK1C,MAC3B,CACC2C,SAAS,IAIX3C,KAAK4C,GAAG,cAAe5C,KAAKoB,kBAAmB,CAAEyB,SAAU,IAE3DC,SAASC,iBAAiB,UAAW/C,KAAKe,WAC1C+B,SAASC,iBAAiB,QAAS/C,KAAKmB,SACxC6B,OAAOD,iBAAiB,OAAQ/C,KAAKa,OACtC,CAEAoC,OAAAA,GAAO,IAAAC,EACNA,OAAAA,OAAKtC,qBAALsC,EAAyBC,UAEzBL,SAASM,oBAAoB,UAAWpD,KAAKe,WAC7C+B,SAASM,oBAAoB,QAASpD,KAAKmB,SAC3C6B,OAAOI,oBAAoB,OAAQpD,KAAKa,OACzC,CAKA4B,gBAAAA,CAAiBzB,GAChB,MAAMb,EAAOH,KAAKG,MACVkD,eAAgBC,EAAIC,UAAEA,GAAcvC,EACtCwC,EAASxD,KAAKyD,YAAY,SAAUH,EAAMC,IAAcG,IACxDC,EAA4B3D,KAAK4D,sBACjCC,EAC2C,WAAhD7D,KAAKyD,YAAY,SAAUH,EAAMC,GAC5BO,EAAgBH,GAA6BE,GAG3CE,IAAKC,EAAEC,KAAEA,GAASC,EAASC,QAAQX,GAErCnC,EAAQlB,EAAKiE,YAAY,CAAEJ,KAAIC,OAAM3C,GAAIgC,EAAMtC,UAMrD,GAAK8C,IAAiB3D,EAAKkE,kBAAkBb,EAAQ,CAAElC,GAAIgC,EAAMtC,UAAjE,CAOA,IAAI6C,EASJ,OAAIF,GACHxD,EAAKmC,MAAMgC,SAAS,qBAAsBjD,EAAO,CAAEC,GAAIgC,EAAMtC,UAE7DsC,EAAKiB,QAAQC,uBAAyBlB,EAAKmB,aAAa,WAAa,GACrEnB,EAAKoB,aAAa,SAAU,eAC5BpB,EAAKP,iBACJ,SACA,IAAM4B,sBAAsB,IAAM3E,KAAK4E,0BAA0BtB,IACjE,CAAEuB,MAAM,UASV1E,EAAKmC,MAAMgC,SAAS,cAAejD,EAAO,CAAEC,GAAIgC,EAAMtC,SAAS,KAC9DhB,KAAK8E,WAAW9D,KA1BhBb,EAAKmC,MAAMgC,SAAS,qBAAsBjD,EAAO,CAAEC,GAAIgC,EAAMtC,SAN9D,CAkCD,CAKA4D,yBAAAA,CAA0BtB,GACrBA,EAAKiB,QAAQC,uBAChBlB,EAAKoB,aAAa,SAAUpB,EAAKiB,QAAQC,wBAEzClB,EAAKyB,gBAAgB,SAEvB,CAKAD,UAAAA,CAAW9D,GACV,MAAMM,EAAKN,EAAMqC,gBACXU,IAAEA,EAAGE,KAAEA,EAAIe,OAAEA,EAAMC,KAAEA,EAAIC,KAAEA,GAASlF,KAAKmF,YAAY7D,EAAIN,GAC/D,IAAIwC,EAASO,EACTqB,EAAwE,CAAEJ,UAE9E,OAAQA,GACP,IAAK,OACJI,EAAS,CAAEJ,SAAQE,QACnB,MACD,IAAK,MACJlF,KAAKqF,sBAAsBJ,GAC3BzB,EAASxD,KAAKsF,kBAAkB9B,EAAQyB,GACxC,MACD,QAEC,YADAvD,QAAQ6D,iCAAiCP,KAI3ChE,EAAMwE,iBACNxF,KAAKG,KAAKsF,MAAMC,OAAOlC,GACvBxD,KAAKG,KAAKwF,SAASnC,EAASS,EAAMmB,EAAQ,CAAE9D,KAAIN,SACjD,CAKAmE,WAAAA,CAAY7B,GAAuBC,UAAEA,IACpC,MAAMyB,GAAUhF,KAAKyD,YAAY,SAAUH,EAAMC,IAAc,OAAOqC,cAGhEpC,EAASxD,KAAKyD,YAAY,SAAUH,EAAMC,IAAcG,KACxDK,IAAEA,EAAGE,KAAEA,GAASC,EAASC,QAAQX,GACjCqC,GACL7F,KAAKyD,YAAY,UAAWH,EAAMC,IAAc,qCAC/CuC,cACIC,EAAyB,wBAAbF,EAEZZ,EAAO,IAAIe,SAAS1C,GAC1B,IAAI4B,EAOJ,OALCA,EADGa,EACId,EAEA,IAAIgB,gBAAgBhB,GAGrB,CAAElB,MAAKE,OAAMe,SAAQC,OAAMC,OAAMW,WACzC,CAKApC,WAAAA,CACCyC,EACA5C,EACAC,EAAgC,MAAI4C,IAAAA,EAEpC,cAAAA,EAAO5C,MAAAA,OAAAA,EAAAA,EAAWkB,oBAAoByB,MAAOC,EAAI7C,EAAKmB,aAAayB,EACpE,CAKAZ,iBAAAA,CAAkBvB,EAAakB,GAC9B,MAAMmB,EAAOrC,EAAIsC,MAAM,KAAK,GACtBC,EAAQ,IAAIL,gBAAgBhB,GAA2CsB,WAC7E,OAAOD,EAAW,GAAAF,KAAQE,IAAUF,CACrC,CAMAf,qBAAAA,CAAsBJ,GACrB,GAAKjF,KAAKF,QAAQS,iBAElB,IAAK,MAAON,EAAMuG,KAAUC,MAAMC,KAAKzB,EAAK0B,WAC7B,KAAVH,GAAcvB,EAAKS,OAAOzF,EAEhC,CAKA2D,mBAAAA,GACC,OAAOgD,OAAOC,OAAO7G,KAAKQ,aAAasG,KAAMN,GAAUA,EACxD,CAKA1F,gBAAAA,GACC,IAAK,MAAMI,KAAO0F,OAAOG,KAAK/G,KAAKQ,aAClCR,KAAKQ,YAAYU,IAAO,CAE1B"}
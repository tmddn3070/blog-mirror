{"version":3,"file":"overlayscrollbars.browser.es5.js","sources":["../../src/support/cache.ts","../../src/support/compatibility/isBrowser.ts","../../src/support/utils/alias.ts","../../src/support/compatibility/apis.ts","../../src/support/utils/types.ts","../../src/support/utils/animation.ts","../../src/support/utils/array.ts","../../src/support/utils/strings.ts","../../src/support/utils/equal.ts","../../src/support/utils/noop.ts","../../src/support/utils/function.ts","../../src/support/utils/object.ts","../../src/support/utils/math.ts","../../src/support/dom/attribute.ts","../../src/support/dom/class.ts","../../src/support/dom/traversal.ts","../../src/support/dom/manipulation.ts","../../src/support/dom/create.ts","../../src/support/dom/style.ts","../../src/support/dom/dimensions.ts","../../src/support/dom/events.ts","../../src/support/dom/scroll.ts","../../src/support/dom/focus.ts","../../src/support/eventListeners.ts","../../src/options.ts","../../src/classnames.ts","../../src/environment.ts","../../src/initialization.ts","../../src/instances.ts","../../src/observers/domObserver.ts","../../src/plugins/plugins.ts","../../../../node_modules/@babel/runtime/helpers/extends.js","../../src/plugins/optionsValidationPlugin/validation.ts","../../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../../src/setups/structureSetup/structureSetup.utils.ts","../../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../../src/observers/sizeObserver.ts","../../src/observers/trinsicObserver.ts","../../src/setups/observersSetup/observersSetup.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../../src/setups/structureSetup/structureSetup.elements.ts","../../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../../src/setups/structureSetup/structureSetup.ts","../../src/setups/setups.ts","../../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser =\r\n  typeof window !== 'undefined' &&\r\n  // deno has the global `window` defined, so additionally check for document\r\n  typeof document !== 'undefined';\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const mathSign = Math.sign;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj)) {\r\n    return false;\r\n  }\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | false | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[] | readonly T[], item: T): boolean =>\r\n  arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strVisible = 'visible';\r\nexport const strHidden = 'hidden';\r\nexport const strScroll = 'scroll';\r\n\r\nexport const capitalizeFirstLetter = (str: string | number | false | null | undefined): string => {\r\n  const finalStr = String(str || '');\r\n  return finalStr ? finalStr[0].toUpperCase() + finalStr.slice(1) : '';\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T> | ReadonlyArray<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: Partial<WH<T>>, b?: Partial<WH<T>>) =>\r\n  equal<Partial<WH<T>>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: Partial<XY<T>>, b?: Partial<XY<T>>) =>\r\n  equal<Partial<XY<T>>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Defines the calling on the leading edge of the timeout.\r\n   */\r\n  _leading?: boolean;\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(() => callback(), isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  const { _timeout, _maxDelay, _leading, _mergeParams } = options || {};\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let leadingInvoked: boolean | undefined;\r\n  let clear = noop;\r\n\r\n  const invokeFunctionToDebounce = function (args: Parameters<FunctionToDebounce>) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    leadingInvoked = maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n      let timeoutId: number | undefined;\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      if (_leading && !leadingInvoked) {\r\n        boundInvoke();\r\n        leadingInvoked = true;\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(() => (leadingInvoked = undefined), finalTimeout);\r\n      } else {\r\n        // @ts-ignore\r\n        timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n\r\n        if (hasMaxWait && !maxTimeoutId) {\r\n          maxTimeoutId = setT(flush, finalMaxWait as number);\r\n        }\r\n      }\r\n\r\n      clear = () => clearTimeoutFn(timeoutId as number);\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n","import type { HTMLElementTarget } from './types';\r\nimport { bind, each, from, isArray } from '../utils';\r\n\r\nexport type AttributeElementTarget = HTMLElementTarget | Element;\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  from(new Set((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token)));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Returns whether the given attribute exists on the given element.\r\n * @param elm The element.\r\n * @param attrName The attribute.\r\n * @returns A Truthy value indicates a present attrubte.\r\n */\r\nexport const hasAttr = (elm: AttributeElementTarget, attrName: string) =>\r\n  elm && elm.hasAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeElementTarget,\r\n  attrNames: string | string[],\r\n  value: string | number | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    elm && elm.setAttribute(attrName, String(value || ''));\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeElementTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeElementTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => {\r\n      initialArrSet[operation](token);\r\n    });\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n  return bind(addAttrClass, elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): (() => void) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: AttributeElementTarget,\r\n  attrName: string,\r\n  value: DomTokens\r\n): boolean => domTokenListAttr(elm, attrName)._has(value);\r\n","import type { HTMLElementTarget } from './types';\r\nimport type { DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: HTMLElementTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: HTMLElementTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: HTMLElementTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: HTMLElementTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (\r\n  classNameA: string | false | null | undefined,\r\n  classNameB: string | false | null | undefined\r\n) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    return elm.matches(selector);\r\n  }\r\n  return false;\r\n};\r\n\r\nconst isBodyElement = (elm: InputElementType) => is(elm, 'body'); // don't do targetElement === ownerDocument.body in case initialization happens in memory\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Gets the focused element of the passed or default document.\r\n * @returns The focused element of the passed document.\r\n */\r\nconst getFocusedElement = (doc?: Document) => (doc || document).activeElement;\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport {\r\n  find,\r\n  findFirst,\r\n  is,\r\n  isBodyElement,\r\n  children,\r\n  contents,\r\n  parent,\r\n  liesBetween,\r\n  closest,\r\n  getFocusedElement,\r\n};\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype ManipulationTarget = Node | false | null | undefined;\r\ntype NodeCollection = ArrayLike<Node> | ManipulationTarget;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: ManipulationTarget,\r\n  preferredAnchor: ManipulationTarget,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: ManipulationTarget = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { HTMLElementTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each, from } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObject | false | null | undefined\r\n): void {\r\n  elm &&\r\n    styles &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : (rawValue || '') + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElementTarget,\r\n  styles: Array<StyleObjectKey> | ReadonlyArray<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : from(styles).reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElementTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","import type { HTMLElementTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const getWindowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const getOffsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getClientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const getScrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElementTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const getFractionalSize = (elm: HTMLElementTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElementTarget): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerTarget = EventTarget | false | null | undefined;\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: ((event: any) => any) | false | null | undefined;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    target && target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventListenerTarget,\r\n  eventNames: DomTokens,\r\n  listener: ((event: T) => any) | false | null | undefined,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener && listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target && target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventListenerTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import type { XY } from './offset';\r\nimport type { WH } from './dimensions';\r\nimport { capNumber, isNumber, mathAbs, mathSign } from '../utils';\r\n\r\nexport interface ScrollCoordinates {\r\n  /** The start (origin) scroll coordinates for each axis. */\r\n  _start: XY<number>;\r\n  /** The end scroll coordinates for each axis. */\r\n  _end: XY<number>;\r\n}\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY<number | false | null | undefined>> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElementScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n\r\n/**\r\n * Scroll Coordinates which are 0.\r\n */\r\nexport const getZeroScrollCoordinates = (): ScrollCoordinates => ({\r\n  _start: { x: 0, y: 0 },\r\n  _end: { x: 0, y: 0 },\r\n});\r\n\r\n/**\r\n * Sanatizes raw scroll coordinates.\r\n * The passed `overflowAmount` is used as the \"max\" value for each axis if the sign of the raw max value is not `0`.\r\n * Makes sure that each axis has `0` either in the start or end coordinates.\r\n * @param rawScrollCoordinates The raw scroll coordinates.\r\n * @param overflowAmount The overflow amount.\r\n * @returns\r\n */\r\nexport const sanitizeScrollCoordinates = (\r\n  rawScrollCoordinates: ScrollCoordinates,\r\n  overflowAmount: WH<number>\r\n) => {\r\n  const { _start, _end } = rawScrollCoordinates;\r\n  const { w, h } = overflowAmount;\r\n  const sanitizeAxis = (start: number, end: number, amount: number) => {\r\n    let newStart = mathSign(start) * amount;\r\n    let newEnd = mathSign(end) * amount;\r\n\r\n    if (newStart === newEnd) {\r\n      const startAbs = mathAbs(start);\r\n      const endAbs = mathAbs(end);\r\n\r\n      newEnd = startAbs > endAbs ? 0 : newEnd;\r\n      newStart = startAbs < endAbs ? 0 : newStart;\r\n    }\r\n\r\n    // in doubt set start to 0\r\n    newStart = newStart === newEnd ? 0 : newStart;\r\n\r\n    return [newStart + 0, newEnd + 0] as const; // \"+ 0\" prevents \"-0\" to be in the result\r\n  };\r\n\r\n  const [startX, endX] = sanitizeAxis(_start.x, _end.x, w);\r\n  const [startY, endY] = sanitizeAxis(_start.y, _end.y, h);\r\n\r\n  return {\r\n    _start: {\r\n      x: startX,\r\n      y: startY,\r\n    },\r\n    _end: {\r\n      x: endX,\r\n      y: endY,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Returns whether the passed scroll coordinates represent the browsers default scroll direction.\r\n * For the default scroll direction the following must be true:\r\n * 1. Start value is `0`.\r\n * 2. End value <= Start value.\r\n * @param scrollCoordinates The scroll coordinates.\r\n */\r\nexport const isDefaultDirectionScrollCoordinates = ({\r\n  _start,\r\n  _end,\r\n}: ScrollCoordinates): XY<boolean> => {\r\n  const getAxis = (start: number, end: number) => start === 0 && start <= end;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x),\r\n    y: getAxis(_start.y, _end.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the current scroll percent between 0..1 for each axis.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param currentScroll The current scroll position of the element.\r\n */\r\nexport const getScrollCoordinatesPercent = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  currentScroll: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, current: number) =>\r\n    capNumber(0, 1, (start - current) / (start - end) || 0);\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, currentScroll.x),\r\n    y: getAxis(_start.y, _end.y, currentScroll.y),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets the scroll position of the given percent.\r\n * @param scrollCoordinates The scroll coordinates.\r\n * @param percent The percentage of the scroll.\r\n */\r\nexport const getScrollCoordinatesPosition = (\r\n  { _start, _end }: ScrollCoordinates,\r\n  percent: XY<number>\r\n) => {\r\n  const getAxis = (start: number, end: number, p: number) => start + (end - start) * p;\r\n\r\n  return {\r\n    x: getAxis(_start.x, _end.x, percent.x),\r\n    y: getAxis(_start.y, _end.y, percent.y),\r\n  };\r\n};\r\n","export const focusElement = (element: Element | false | null | undefined) => {\r\n  if (element && (element as HTMLElement).focus) {\r\n    (element as HTMLElement).focus({ preventScroll: true });\r\n  }\r\n};\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","import { strOverflowX, strOverflowY } from './support';\r\n\r\nconst dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// shared\r\nexport const dataValueNoClipping = 'noClipping';\r\n\r\n// body\r\nexport const dataAttributeHtmlBody = `${dataAttributePrefix}-body`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataValueHostIsHost = 'host';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportOverflowXPrefix = strOverflowX;\r\nexport const dataValueViewportOverflowYPrefix = strOverflowY;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportMeasuring = 'measuring';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueViewportNoContent = 'noContent';\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  getFractionalSize,\r\n  getClientSize,\r\n  getOffsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  getStyles,\r\n  isBodyElement,\r\n  isFunction,\r\n  addEventListener,\r\n} from '~/support';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    // fix weird safari issue where getComputedStyle returns all empty styles by appending twice\r\n    appendChildren(document.body, measureElm);\r\n    appendChildren(document.body, measureElm);\r\n\r\n    const cSize = getClientSize(measureElm);\r\n    const oSize = getOffsetSize(measureElm);\r\n    const fSize = getFractionalSize(measureElmChild);\r\n\r\n    clear && removeElements(measureElm);\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  // changes to this styles need to be reflected in the \"hide native scrollbars\" section of the structure styles\r\n  const envStyle = `.${classNameEnvironment}{scroll-behavior:auto!important;position:fixed;opacity:0;visibility:hidden;overflow:scroll;height:200px;width:200px;z-index:-1}.${classNameEnvironment} div{width:200%;height:200%;margin:10px 0}.${classNameEnvironmentScrollbarHidden}{scrollbar-width:none!important}.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar,.${classNameEnvironmentScrollbarHidden}::-webkit-scrollbar-corner{appearance:none!important;display:none!important;width:0!important;height:0!important}`;\r\n  const envDOM = createDOM(\r\n    `<div class=\"${classNameEnvironment}\"><div></div><style>${envStyle}</style></div>`\r\n  );\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) => nativeScrollbarsHiding && isBodyElement(target) && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  addEventListener(wnd, 'resize', () => {\r\n    triggerEvent('r', []);\r\n  });\r\n\r\n  if (\r\n    isFunction(wnd.matchMedia) &&\r\n    !nativeScrollbarsHiding &&\r\n    (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)\r\n  ) {\r\n    const addZoomListener = (onZoom: () => void) => {\r\n      const media = wnd.matchMedia(`(resolution: ${wnd.devicePixelRatio}dppx)`);\r\n      addEventListener(\r\n        media,\r\n        'change',\r\n        () => {\r\n          onZoom();\r\n          addZoomListener(onZoom);\r\n        },\r\n        {\r\n          _once: true,\r\n        }\r\n      );\r\n    };\r\n    addZoomListener(() => {\r\n      const [updatedNativeScrollbarSize, nativeScrollbarSizeChanged] =\r\n        updateNativeScrollbarSizeCache();\r\n\r\n      assignDeep(env._nativeScrollbarsSize, updatedNativeScrollbarSize); // keep the object and just re-assign!\r\n      triggerEvent('r', [nativeScrollbarSizeChanged]);\r\n    });\r\n  }\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n  isString,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[] | readonly string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        const newValue =\r\n          isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '');\r\n        // narrow down attributeValue type to `string` or `null` but don't overwrite `<empty string>` with `null`\r\n        const attributeValue = isString(newValue) ? newValue : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import {\r\n  each,\r\n  hasOwnProperty,\r\n  keys,\r\n  push,\r\n  isEmptyObject,\r\n  type,\r\n  isUndefined,\r\n  isPlainObject,\r\n  isString,\r\n  createOrKeepArray,\r\n} from '~/support';\r\nimport type { PlainObject, DeepPartial } from '~/typings';\r\nimport type { OptionsObject } from '~/options';\r\n\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObject\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  validated: DeepPartial<T>,\r\n  foreign: Record<string, unknown>\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObject;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObject>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: DeepPartial<T> = {};\r\n  const optionsCopy: DeepPartial<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue) as keyof typeof optionsTemplateTypes;\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> =\r\n        createOrKeepArray(templateValue);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = getOffsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = getOffsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import { strHidden, strScroll, strVisible } from '~/support';\r\nimport type { Env } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle } from '~/typings';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Creates a viewport overflow state object.\r\n * @param hasOverflow The information whether an axis has overflow.\r\n * @param overflowBehavior The overflow behavior according to the options.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const createViewportOverflowState = (\r\n  hasOverflow: Partial<XY<boolean>>,\r\n  overflowBehavior: XY<OverflowBehavior>\r\n): ViewportOverflowState => {\r\n  const getAxisOverflowStyle = (\r\n    axisBehavior: OverflowBehavior,\r\n    axisHasOverflow: boolean | undefined,\r\n    perpendicularBehavior: OverflowBehavior,\r\n    perpendicularOverflow: boolean | undefined\r\n  ): OverflowStyle => {\r\n    // convert behavior to style:\r\n    // 'visible'        -> 'hidden'\r\n    // 'hidden'         -> 'hidden'\r\n    // 'scroll'         -> 'scroll'\r\n    // 'visible-hidden' -> 'hidden'\r\n    // 'visible-scroll' -> 'scroll'\r\n    const behaviorStyle =\r\n      axisBehavior === strVisible\r\n        ? strHidden\r\n        : (axisBehavior.replace(`${strVisible}-`, '') as OverflowStyle);\r\n    const axisOverflowVisible = overflowIsVisible(axisBehavior);\r\n    const perpendicularOverflowVisible = overflowIsVisible(perpendicularBehavior);\r\n\r\n    // if no axis has overflow set 'hidden'\r\n    if (!axisHasOverflow && !perpendicularOverflow) {\r\n      return strHidden;\r\n    }\r\n\r\n    // if both axis have a visible behavior ('visible', 'visible-hidden', 'visible-scroll') set 'visible'\r\n    if (axisOverflowVisible && perpendicularOverflowVisible) {\r\n      return strVisible;\r\n    }\r\n\r\n    // this this axis has a visible behavior\r\n    if (axisOverflowVisible) {\r\n      const nonPerpendicularOverflow = axisHasOverflow ? strVisible : strHidden;\r\n      return axisHasOverflow && perpendicularOverflow\r\n        ? behaviorStyle // if both axis have an overflow set ('hidden' or 'scroll')\r\n        : nonPerpendicularOverflow; // if only this axis has an overflow set 'visible', if no axis has an overflow set 'hidden'\r\n    }\r\n\r\n    const nonOverflow =\r\n      perpendicularOverflowVisible && perpendicularOverflow ? strVisible : strHidden;\r\n    return axisHasOverflow\r\n      ? behaviorStyle // if this axis has an overflow\r\n      : nonOverflow; // if the perp. axis has a visible behavior and has an overflow set 'visible', otherwise set 'hidden'\r\n  };\r\n\r\n  const _overflowStyle = {\r\n    x: getAxisOverflowStyle(overflowBehavior.x, hasOverflow.x, overflowBehavior.y, hasOverflow.y),\r\n    y: getAxisOverflowStyle(overflowBehavior.y, hasOverflow.y, overflowBehavior.x, hasOverflow.x),\r\n  };\r\n\r\n  return {\r\n    _overflowStyle,\r\n    _overflowScroll: {\r\n      x: _overflowStyle.x === strScroll,\r\n      y: _overflowStyle.y === strScroll,\r\n    },\r\n  };\r\n};\r\n","import {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  removeAttrClass,\r\n  strWidth,\r\n  strOverflowY,\r\n  strOverflowX,\r\n  strScroll,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport { getShowNativeOverlaidScrollbars } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { Env } from '~/environment';\r\nimport type { WH } from '~/support';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        /**\r\n         * Gets the current overflow state of the viewport.\r\n         */\r\n        const readViewportOverflowState = (): ViewportOverflowState => {\r\n          const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n            const overflowStyle = getStyles(_viewport, styleKey) as OverflowStyle;\r\n            const overflowScroll = overflowStyle === strScroll;\r\n\r\n            return [overflowStyle, overflowScroll] as const;\r\n          };\r\n\r\n          const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n          const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n          return {\r\n            _overflowStyle: {\r\n              x: xOverflowStyle,\r\n              y: yOverflowStyle,\r\n            },\r\n            _overflowScroll: {\r\n              x: xOverflowScroll,\r\n              y: yOverflowScroll,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Gets the hide offset matching the passed overflow state.\r\n         * @param viewportOverflowState The overflow state of the viewport\r\n         */\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean\r\n        ): StyleObject | undefined => {\r\n          if (!_viewportIsTarget) {\r\n            const viewportStyleObj: StyleObject = assignDeep(\r\n              {},\r\n              {\r\n                [strMarginRight]: 0,\r\n                [strMarginBottom]: 0,\r\n                [strMarginLeft]: 0,\r\n              }\r\n            );\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n\r\n            return viewportStyleObj;\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState = viewportOverflowState || readViewportOverflowState();\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            const addArrange = removeAttrClass(\r\n              _viewport,\r\n              dataAttributeViewport,\r\n              dataValueViewportArrange\r\n            );\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                setStyles(\r\n                  _viewport,\r\n                  assignDeep(\r\n                    {},\r\n                    prevStyle,\r\n                    _hideNativeScrollbars(\r\n                      finalViewportOverflowState,\r\n                      observersSetupState,\r\n                      doViewportArrange\r\n                    )\r\n                  )\r\n                );\r\n                addArrange();\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  appendChildren,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const { _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (sizeChangedContext?: ResizeObserverEntry | boolean) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        appear = domRectAppeared(currRContentRect, prevContentRect);\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _sizeChanged: true,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  getOffsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = getOffsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  equalWH,\r\n  getFractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  keys,\r\n  liesBetween,\r\n  getScrollSize,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n  getStyles,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportMeasuring,\r\n  dataValueViewportArrange,\r\n  dataValueNoClipping,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = [] as const;\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'] as const;\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'] as const;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _scrollOffsetElement,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _isBody,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n\r\n  const getDirectionIsRTL = (elm: HTMLElement): boolean => getStyles(elm, 'direction') === 'rtl';\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n      const noClipping =\r\n        !viewportIsTargetBody && hasAttrClass(_host, dataAttributeHost, dataValueNoClipping);\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElementScroll(_scrollOffsetElement);\r\n\r\n      const revertMeasuring = _viewportAddRemoveClass(dataValueViewportMeasuring, noClipping);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n      const viewportScroll = getScrollSize(_viewport);\r\n      const fractional = getFractionalSize(_viewport);\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      noClipping && revertMeasuring();\r\n\r\n      return {\r\n        w: viewportScroll.w + fractional.w,\r\n        h: viewportScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirection = (updateHints: ObserversSetupUpdateHints) => {\r\n    const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n    assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n    assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n    prevDirectionIsRTL = newDirectionIsRTL;\r\n  };\r\n\r\n  /*\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = getAttr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          setAttrs(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttrs(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  */\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({ _sizeChanged, _appear }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && env._nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirection(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    }\r\n    /*\r\n    else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n    */\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n  const onWindowResizeDebounced = debounce(\r\n    () => {\r\n      const [, _contentMutation] = updateContentSizeCache();\r\n      onObserversUpdated({ _contentMutation });\r\n    },\r\n    {\r\n      _timeout: 222,\r\n      _leading: true,\r\n    }\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      // updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = env._addResizeListener((_scrollbarSizeChanged) => {\r\n        if (_scrollbarSizeChanged) {\r\n          onObserversUpdatedDebounced({ _scrollbarSizeChanged });\r\n        } else {\r\n          onWindowResizeDebounced();\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      setDirection(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  bind,\r\n  getElementScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n  getBoundingClientRect,\r\n  capNumber,\r\n  getScrollCoordinatesPercent,\r\n  isDefaultDirectionScrollCoordinates,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type { XY } from '~/support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: keyof XY<unknown>) =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimeline = {\r\n    x: initScrollTimeline('x'),\r\n    y: initScrollTimeline('y'),\r\n  };\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  /**\r\n   * Gets the scrollbar handle length ratio.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n   * @returns The scrollbar handle length ratio.\r\n   */\r\n  const getScrollbarHandleLengthRatio = (\r\n    isHorizontal: boolean | undefined,\r\n    scrollbarStructure?: ScrollbarStructure\r\n  ) => {\r\n    if (scrollbarStructure) {\r\n      const axis = isHorizontal ? strWidth : strHeight;\r\n      const { _track, _handle } = scrollbarStructure;\r\n\r\n      const handleSize = getBoundingClientRect(_handle)[axis];\r\n      const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n      return capNumber(0, 1, handleSize / trackSize || 0);\r\n    }\r\n\r\n    const axis = isHorizontal ? 'x' : 'y';\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n    const viewportSize = _overflowEdge[axis];\r\n    const overflowAmount = _overflowAmount[axis];\r\n\r\n    return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount) || 0);\r\n  };\r\n\r\n  /**\r\n   * Gets the scrollbar handle offset ratio.\r\n   * @param structureSetupState The structure setup state.\r\n   * @param scrollbarStructure The scrollbar structure.\r\n   * @param scrollPercent The scroll percent 0..1.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @returns The scrollbar handle offset ratio.\r\n   */\r\n  const getScrollbarHandleOffsetRatio = (\r\n    scrollbarStructure: ScrollbarStructure,\r\n    scrollPercent: number,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const lengthRatio = getScrollbarHandleLengthRatio(isHorizontal, scrollbarStructure);\r\n\r\n    return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n  };\r\n\r\n  /**\r\n   * Adds additional directional keyframes to the passed keyframes.\r\n   * @param keyframes The keyframes.\r\n   * @param directionRTL Whether the direction is RTL.\r\n   * @returns The passed keyframes with additional directional keyframes.\r\n   */\r\n  const addDirectionRTLKeyframes = (keyframes: Keyframe[] | PropertyIndexedKeyframes | null) =>\r\n    assignDeep(keyframes, {\r\n      // dummy keyframe which fixes bug where the scrollbar handle is reverted to origin position when it should be at its max position\r\n      clear: ['left'],\r\n    });\r\n\r\n  /**\r\n   * Cancels the animations of the passed elements or of all elements if no elements are passed.\r\n   * @param elements The elements of which the animation shall be canceled.\r\n   */\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Sets of overwrites the animation of the passed element.\r\n   * @param element The element of which the animation shall be set.\r\n   * @param timeline The animation timeline of the animation.\r\n   * @param keyframes The keyframes of the animation.\r\n   * @param composite The composite information of the animation.\r\n   */\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject | false | null | undefined]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const { _scrollCoordinates } = structureSetupState;\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n    const axisScrollTimeline = scrollTimeline[xyKey];\r\n    const axisIsDefaultDirectionScroll =\r\n      isDefaultDirectionScrollCoordinates(_scrollCoordinates)[xyKey];\r\n    const getAxisTransformValue = (scrollbarStructure: ScrollbarStructure, scrollPercent: number) =>\r\n      getTrasformTranslateValue(\r\n        ratioToCssPercent(\r\n          getScrollbarHandleOffsetRatio(\r\n            scrollbarStructure,\r\n            axisIsDefaultDirectionScroll ? scrollPercent : 1 - scrollPercent,\r\n            isHorizontal\r\n          )\r\n        ),\r\n        isHorizontal\r\n      );\r\n\r\n    if (axisScrollTimeline) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _handle } = structure;\r\n        setElementAnimation(\r\n          _handle,\r\n          axisScrollTimeline,\r\n          addDirectionRTLKeyframes({\r\n            transform: [0, 1].map((percent) => getAxisTransformValue(structure, percent)),\r\n          })\r\n        );\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => [\r\n        structure._handle,\r\n        {\r\n          transform: getAxisTransformValue(\r\n            structure,\r\n            getScrollCoordinatesPercent(_scrollCoordinates, getElementScroll(_scrollOffsetElement))[\r\n              xyKey\r\n            ]\r\n          ),\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      const { _overflowAmount, _scrollCoordinates } = structureSetupState;\r\n      const isDefaultDirectionScroll = isDefaultDirectionScrollCoordinates(_scrollCoordinates);\r\n      const cushion = 0.5; // otherwise it sometimes happens that scrolling to 100% will cause the scrollbars to disappear\r\n\r\n      if (scrollTimeline.x && scrollTimeline.y) {\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            const setScrollbarElementAnimation = (axis: keyof XY<unknown>) =>\r\n              setElementAnimation(\r\n                _scrollbar,\r\n                scrollTimeline[axis],\r\n                addDirectionRTLKeyframes({\r\n                  transform: [0, isDefaultDirectionScroll[axis] ? 1 : -1].map((percent) =>\r\n                    getTrasformTranslateValue(\r\n                      numberToCssPx(percent * (_overflowAmount[axis] - cushion)),\r\n                      axis === 'x'\r\n                    )\r\n                  ),\r\n                }),\r\n                'add'\r\n              );\r\n\r\n            setScrollbarElementAnimation('x');\r\n            setScrollbarElementAnimation('y');\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        const scrollPercent = getScrollCoordinatesPercent(\r\n          _scrollCoordinates,\r\n          getElementScroll(_scrollOffsetElement)\r\n        );\r\n        const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n          const { _scrollbar } = structure;\r\n          const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n          const getTranslateValue = (\r\n            axisScrollPercent: number,\r\n            axisOverflowAmount: number,\r\n            axisIsDefaultCoordinates: boolean\r\n          ) => {\r\n            const px = axisOverflowAmount * axisScrollPercent;\r\n            return numberToCssPx(axisIsDefaultCoordinates ? px : -px);\r\n          };\r\n\r\n          return [\r\n            elm,\r\n            elm && {\r\n              transform: getTrasformTranslateValue({\r\n                x: getTranslateValue(\r\n                  scrollPercent.x,\r\n                  _overflowAmount.x,\r\n                  isDefaultDirectionScroll.x\r\n                ),\r\n                y: getTranslateValue(\r\n                  scrollPercent.y,\r\n                  _overflowAmount.y,\r\n                  isDefaultDirectionScroll.y\r\n                ),\r\n              }),\r\n            },\r\n          ] as [HTMLElement | false, StyleObject | false];\r\n        };\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const scrollbar = createDiv(`${classNameScrollbar} ${scrollbarClassName}`);\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    push(isHorizontal ? horizontalScrollbars : verticalScrollbars, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimeline.x,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimeline.y,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getOffsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElementScroll,\r\n  scrollElementTo,\r\n  getFocusedElement,\r\n  setT,\r\n  hasAttr,\r\n  stopAndPrevent,\r\n  isFunction,\r\n  mathAbs,\r\n  focusElement,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { XY } from '~/support';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarHandlePointerInteraction: (event: PointerEvent) => void\r\n): ScrollbarsSetupEvents => {\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const {\r\n      _host,\r\n      _viewport,\r\n      _viewportIsTarget,\r\n      _scrollOffsetElement,\r\n      _documentElm,\r\n      _viewportAddRemoveClass,\r\n    } = structureSetupElements;\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [scrollSnapScrollTransitionTimeout, clearScrollSnapScrollTransitionTimeout] =\r\n      selfClearTimeout(444);\r\n    const [requestHandleTransitionAnimationFrame, clearHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollOffsetElementScrollBy = (coordinates: XY<number>) => {\r\n      isFunction(_scrollOffsetElement.scrollBy) &&\r\n        _scrollOffsetElement.scrollBy({\r\n          behavior: 'smooth',\r\n          left: coordinates.x,\r\n          top: coordinates.y,\r\n        });\r\n    };\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointercancel lostpointercapture';\r\n      const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n      const leftTopKey = isHorizontal ? 'left' : 'top';\r\n      const whKey = isHorizontal ? 'w' : 'h';\r\n      const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = getOffsetSize(_track)[whKey] - getOffsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          clearScrollSnapScrollTransitionTimeout();\r\n\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              getOffsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElementScroll(_scrollOffsetElement)[xyKey],\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const addScrollbarPressedClass = () =>\r\n            _viewportAddRemoveClass(dataValueViewportScrollbarPressed, true);\r\n          const removeScrollbarPressedClass = addScrollbarPressedClass();\r\n\r\n          const offFns = [\r\n            () => {\r\n              const withoutSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n              removeScrollbarPressedClass();\r\n              const withSnapScrollOffset = getElementScroll(_scrollOffsetElement);\r\n              const snapScrollDiff = {\r\n                x: withSnapScrollOffset.x - withoutSnapScrollOffset.x,\r\n                y: withSnapScrollOffset.y - withoutSnapScrollOffset.y,\r\n              };\r\n\r\n              if (mathAbs(snapScrollDiff.x) > 3 || mathAbs(snapScrollDiff.y) > 3) {\r\n                addScrollbarPressedClass();\r\n                scrollElementTo(_scrollOffsetElement, withoutSnapScrollOffset);\r\n                scrollOffsetElementScrollBy(snapScrollDiff);\r\n                scrollSnapScrollTransitionTimeout(removeScrollbarPressedClass);\r\n              }\r\n            },\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_handle, 'pointermove pointerleave', scrollbarHandlePointerInteraction),\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      // focus viewport when clicking on a scrollbar (mouse only)\r\n      !_viewportIsTarget &&\r\n        addEventListener(_scrollbar, 'mousedown', () => {\r\n          const focusedElement = getFocusedElement();\r\n          if (\r\n            hasAttr(focusedElement, dataAttributeViewport) ||\r\n            hasAttr(focusedElement, dataAttributeHost) ||\r\n            focusedElement === document.body\r\n          ) {\r\n            setT(bind(focusElement, _viewport), 25);\r\n          }\r\n        }),\r\n      // propagate wheel events to viewport when mouse is over scrollbar\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            scrollOffsetElementScrollBy({\r\n              x: deltaX,\r\n              y: deltaY,\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      // when the handle has a size transition, update the handle offset each frame for the time of the transition\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          clearHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // solve problem of interaction causing click events\r\n      addEventListener(\r\n        _scrollbar,\r\n        'pointerdown',\r\n        // stopPropagation for stopping event propagation (causing click listeners to be invoked)\r\n        // preventDefault to prevent the pointer to cause any actions (e.g. releasing mouse button over an <a> tag causes an navigation)\r\n        bind(addEventListener, _documentElm, 'click', stopAndPrevent, {\r\n          _once: true,\r\n          _capture: true,\r\n          _passive: false,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      clearScrollSnapScrollTransitionTimeout,\r\n      clearHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import {\r\n  bind,\r\n  noop,\r\n  addEventListener,\r\n  push,\r\n  runEachAndClear,\r\n  selfClearTimeout,\r\n  strScroll,\r\n  strVisible,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport type { OverflowBehavior, ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let mouseInHost: boolean | undefined;\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideIsNever: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [autoHideInstantInteractionTimeout, clearAutoHideInstantInteractionTimeout] =\r\n    selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoHideTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(\r\n      options,\r\n      structureSetupElements,\r\n      structureSetupState,\r\n      (event) =>\r\n        isHoverablePointerType(event) &&\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        manageScrollbarsAutoHideInstantInteraction()\r\n    )\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoHideTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n  const manageScrollbarsAutoHideInstantInteraction = () => {\r\n    if (autoHideIsLeave ? !mouseInHost : !autoHideIsNever) {\r\n      manageScrollbarsAutoHide(true);\r\n      autoHideInstantInteractionTimeout(() => {\r\n        manageScrollbarsAutoHide(false);\r\n      });\r\n    }\r\n  };\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      autoHideIsLeave && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n  const destroyFns: (() => void)[] = [\r\n    clearAutoHideTimeout,\r\n    clearAutoHideInstantInteractionTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n        manageScrollbarsAutoHideInstantInteraction();\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const {\r\n        _overflowEdgeChanged,\r\n        _overflowAmountChanged,\r\n        _overflowStyleChanged,\r\n        _scrollCoordinatesChanged,\r\n      } = _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const [overflow, overflowChanged] = _checkOption('overflow');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged ||\r\n        _overflowAmountChanged ||\r\n        _scrollCoordinatesChanged ||\r\n        _directionChanged ||\r\n        _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged || overflowChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (\r\n        overflowBehavior: OverflowBehavior,\r\n        overflowStyle: OverflowStyle,\r\n        isHorizontal: boolean\r\n      ) => {\r\n        const isVisible =\r\n          overflowBehavior.includes(strScroll) &&\r\n          (visibility === strVisible || (visibility === 'auto' && overflowStyle === strScroll));\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideIsNever = autoHide === 'never';\r\n        manageScrollbarsAutoHide(autoHideIsNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(overflow.x, _overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(overflow.y, _overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_hasOverflow.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  isBodyElement,\r\n  getFocusedElement,\r\n  wnd,\r\n  focusElement,\r\n  stopAndPrevent,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataAttributeHtmlBody,\r\n  dataValueHostIsHost,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n} from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _windowElm: () => Window;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => () => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isBody = isBodyElement(targetElement);\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const getDocumentWindow = () => ownerDocument.defaultView || wnd;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // viewport element has higher priority and content element will not be generated\r\n  // will act the same way as initialization: `{ elements: { viewport, content: false } }`\r\n  const viewportIsContent = !viewportIsTarget && possibleViewportElement === possibleContentElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : possibleViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const paddingElement =\r\n    !viewportIsTarget &&\r\n    dynamicInitializationElement(createNewDiv, defaultPaddingInitialization, paddingInitialization);\r\n  const contentElement = !viewportIsContent && possibleContentElement;\r\n  const generatedElements = [contentElement, viewportElement, paddingElement, hostElement].map(\r\n    (elm) => isHTMLElement(elm) && !parent(elm) && elm\r\n  );\r\n  const elementIsGenerated = (elm: HTMLElement | false) => elm && inArray(generatedElements, elm);\r\n  const originalNonBodyScrollOffsetElement = elementIsGenerated(viewportElement)\r\n    ? targetElement\r\n    : viewportElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding: paddingElement,\r\n    _content: contentElement,\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : originalNonBodyScrollOffsetElement,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _windowElm: getDocumentWindow,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(viewportElement, dataAttributeViewport, viewportAttributeClassName, add),\r\n  };\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elm && !elementIsGenerated(elm)\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const docWnd = getDocumentWindow();\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement: Element | false | null | undefined) =>\r\n      addEventListener(activeElement, 'focusin focusout focus blur', stopAndPrevent, {\r\n        _capture: true,\r\n        _passive: false,\r\n      });\r\n    const tabIndexStr = 'tabindex';\r\n    const originalViewportTabIndex = getAttr(_viewport, tabIndexStr);\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? '' : dataValueHostIsHost);\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_viewport, dataAttributeViewport, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, tabIndexStr, originalViewportTabIndex || '-1');\r\n      isBody && setAttrs(docElement, dataAttributeHtmlBody, '');\r\n    }\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const viewportIsGenerated = elementIsGenerated(_viewport);\r\n        // if the focused element is viewport and viewport will be destroyed shift the focus to target\r\n        // otherwise keep the focused element\r\n        const destroyFocusElement =\r\n          viewportIsGenerated && destroyActiveElm === _viewport ? _target : destroyActiveElm;\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyFocusElement);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, dataAttributeViewport);\r\n        isBody && removeAttrs(docElement, dataAttributeHtmlBody);\r\n        originalViewportTabIndex\r\n          ? setAttrs(_viewport, tabIndexStr, originalViewportTabIndex)\r\n          : removeAttrs(_viewport, tabIndexStr);\r\n\r\n        elementIsGenerated(_content) && unwrap(_content);\r\n        viewportIsGenerated && unwrap(_viewport);\r\n        elementIsGenerated(_padding) && unwrap(_padding);\r\n        focusElement(destroyFocusElement);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n\r\n    // keep the original focused element focused except when\r\n    // the target is body and viewport is not target, then shift the focus to the viewport element\r\n    focusElement(\r\n      !viewportIsTarget && isBody && initActiveElm === _target && docWnd.top === docWnd\r\n        ? _viewport\r\n        : initActiveElm\r\n    );\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  getScrollSize,\r\n  getFractionalSize,\r\n  equalWH,\r\n  getClientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  getWindowSize,\r\n  addRemoveAttrClass,\r\n  capitalizeFirstLetter,\r\n  setStyles,\r\n  strVisible,\r\n  strHidden,\r\n  keys,\r\n  strScroll,\r\n  scrollElementTo,\r\n  getElementScroll,\r\n  sanitizeScrollCoordinates,\r\n  getStyles,\r\n  equal,\r\n  getZeroScrollCoordinates,\r\n  hasDimensions,\r\n  addEventListener,\r\n  stopPropagation,\r\n  rAF,\r\n  hasAttrClass,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataValueNoClipping,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataValueViewportOverflowXPrefix,\r\n  dataValueViewportOverflowYPrefix,\r\n  dataValueViewportNoContent,\r\n  dataValueViewportMeasuring,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { ScrollCoordinates, WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport {\r\n  createViewportOverflowState,\r\n  getShowNativeOverlaidScrollbars,\r\n  overflowIsVisible,\r\n} from '../structureSetup.utils';\r\n\r\ninterface FlowDirectionStyles {\r\n  display?: string;\r\n  direction?: string;\r\n  flexDirection?: string;\r\n  writingMode?: string;\r\n}\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _scrollEventElement,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportAddRemoveClass,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n  const flowDirectionStyleArr = ['display', 'direction', 'flexDirection', 'writingMode'] as const;\r\n\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const partialXYOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: {},\r\n  };\r\n  const setMeasuringMode = (active: boolean) => {\r\n    // viewportIsTargetBody never needs measuring\r\n    _viewportAddRemoveClass(dataValueViewportMeasuring, !viewportIsTargetBody && active);\r\n  };\r\n\r\n  const getOverflowAmount = (\r\n    viewportScrollSize: WH<number>,\r\n    viewportClientSize: WH<number>\r\n  ): WH<number> => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(getFractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(getScrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateHasOverflowCache] = createCache<Partial<XY<boolean>>>(partialXYOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<Partial<XY<OverflowStyle>>>(partialXYOptions);\r\n  const [updateFlowDirectionStyles] = createCache<FlowDirectionStyles>(\r\n    {\r\n      _equal: (currVal, newValu) => equal(currVal, newValu, flowDirectionStyleArr),\r\n      _initialValue: {},\r\n    },\r\n    () => (hasDimensions(_viewport) ? getStyles(_viewport, flowDirectionStyleArr) : {})\r\n  );\r\n  const [updateMeasuredScrollCoordinates, getCurrentMeasuredScrollCoordinates] =\r\n    createCache<ScrollCoordinates>(\r\n      {\r\n        _equal: (currVal, newVal) =>\r\n          equalXY(currVal._start, newVal._start) && equalXY(currVal._end, newVal._end),\r\n        _initialValue: getZeroScrollCoordinates(),\r\n      },\r\n      () => {\r\n        setMeasuringMode(true);\r\n\r\n        const originalScrollOffset = getElementScroll(_scrollOffsetElement);\r\n        const removeNoContent = _viewportAddRemoveClass(dataValueViewportNoContent, true);\r\n        const removeScrollBlock = addEventListener(\r\n          _scrollEventElement,\r\n          strScroll,\r\n          (event) => {\r\n            const scrollEventScrollOffset = getElementScroll(_scrollOffsetElement);\r\n            // if scroll offset didnt change\r\n            if (\r\n              event.isTrusted &&\r\n              scrollEventScrollOffset.x === originalScrollOffset.x &&\r\n              scrollEventScrollOffset.y === originalScrollOffset.y\r\n            ) {\r\n              stopPropagation(event);\r\n            }\r\n          },\r\n          {\r\n            _capture: true,\r\n            _once: true,\r\n          }\r\n        );\r\n\r\n        scrollElementTo(_scrollOffsetElement, {\r\n          x: 0,\r\n          y: 0,\r\n        });\r\n        removeNoContent();\r\n\r\n        const _start = getElementScroll(_scrollOffsetElement);\r\n        const scrollSize = getScrollSize(_scrollOffsetElement);\r\n        scrollElementTo(_scrollOffsetElement, {\r\n          x: scrollSize.w,\r\n          y: scrollSize.h,\r\n        });\r\n\r\n        const tmp = getElementScroll(_scrollOffsetElement);\r\n        scrollElementTo(_scrollOffsetElement, {\r\n          // if tmp is very close start there porbably wasn't any scroll happening so scroll again in different direction\r\n          x: tmp.x - _start.x < 1 && -scrollSize.w,\r\n          y: tmp.y - _start.y < 1 && -scrollSize.h,\r\n        });\r\n\r\n        const _end = getElementScroll(_scrollOffsetElement);\r\n        scrollElementTo(_scrollOffsetElement, originalScrollOffset);\r\n        rAF(() => removeScrollBlock());\r\n\r\n        return {\r\n          _start,\r\n          _end,\r\n        };\r\n      }\r\n    );\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const createViewportOverflowStyleClassName = (\r\n    overflowStyle: OverflowStyle,\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const prefix = isHorizontal\r\n      ? dataValueViewportOverflowXPrefix\r\n      : dataValueViewportOverflowYPrefix;\r\n    return `${prefix}${capitalizeFirstLetter(overflowStyle)}`;\r\n  };\r\n  const setViewportOverflowStyle = (viewportOverflowStyle: XY<OverflowStyle>) => {\r\n    // `createAllOverflowStyleClassNames` and `allOverflowStyleClassNames` could be one scope further up but would increase bundle size\r\n    const createAllOverflowStyleClassNames = (isHorizontal?: boolean) =>\r\n      ([strVisible, strHidden, strScroll] as OverflowStyle[]).map((style) =>\r\n        createViewportOverflowStyleClassName(style, isHorizontal)\r\n      );\r\n    const allOverflowStyleClassNames = createAllOverflowStyleClassNames(true)\r\n      .concat(createAllOverflowStyleClassNames())\r\n      .join(' ');\r\n\r\n    _viewportAddRemoveClass(allOverflowStyleClassNames);\r\n    _viewportAddRemoveClass(\r\n      (keys(viewportOverflowStyle) as Array<keyof typeof viewportOverflowStyle>)\r\n        .map((axis) =>\r\n          createViewportOverflowStyleClassName(viewportOverflowStyle[axis], axis === 'x')\r\n        )\r\n        .join(' '),\r\n      true\r\n    );\r\n  };\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const { _sizeChanged, _contentMutation, _directionChanged, _appear, _scrollbarSizeChanged } =\r\n      _observersUpdateHints || {};\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const { _arrangeViewport, _undoViewportArrange, _hideNativeScrollbars } =\r\n      scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n\r\n    const viewportChanged =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (viewportChanged) {\r\n      if (hasAttrClass(_host, dataAttributeHost, dataValueNoClipping)) {\r\n        setMeasuringMode(true);\r\n      }\r\n\r\n      const [redoViewportArrange] = _undoViewportArrange ? _undoViewportArrange() : [];\r\n\r\n      const [sizeFraction] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = getClientSize(_viewport);\r\n      const windowInnerSize = viewportIsTargetBody && getWindowSize(_windowElm());\r\n      const overflowAmountScrollSize = {\r\n        w: max0(viewportScrollSize.w + sizeFraction.w),\r\n        h: max0(viewportScrollSize.h + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.w\r\n            : viewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (windowInnerSize\r\n            ? windowInnerSize.h\r\n            : viewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const [hasOverflow, hasOverflowChanged] = updateHasOverflowCache({\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    });\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      viewportChanged;\r\n    const viewportOverflowState = createViewportOverflowState(hasOverflow, overflow);\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      viewportOverflowState._overflowStyle\r\n    );\r\n    const [, flowDirectionStylesChanged] = updateFlowDirectionStyles(_force);\r\n\r\n    const adjustMeasuredScrollCoordinates =\r\n      _directionChanged || _appear || flowDirectionStylesChanged || hasOverflowChanged || _force;\r\n    const [scrollCoordinates, scrollCoordinatesChanged] = adjustMeasuredScrollCoordinates\r\n      ? updateMeasuredScrollCoordinates(_force)\r\n      : getCurrentMeasuredScrollCoordinates();\r\n\r\n    if (adjustViewportStyle) {\r\n      overflowStyleChanged && setViewportOverflowStyle(viewportOverflowState._overflowStyle);\r\n\r\n      if (_hideNativeScrollbars && _arrangeViewport) {\r\n        setStyles(\r\n          _viewport,\r\n          _hideNativeScrollbars(\r\n            viewportOverflowState,\r\n            _observersState,\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction)\r\n          )\r\n        );\r\n      }\r\n    }\r\n\r\n    setMeasuringMode(false);\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueNoClipping, removeClipping);\r\n    addRemoveAttrClass(_padding, dataAttributePadding, dataValueNoClipping, removeClipping);\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n      _scrollCoordinates: sanitizeScrollCoordinates(scrollCoordinates, overflowAmount),\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n      _scrollCoordinatesChanged: scrollCoordinatesChanged || overflowAmountChanged,\r\n      _scrolled: adjustMeasuredScrollCoordinates,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElementScroll,\r\n  getZeroScrollCoordinates,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport type { ScrollCoordinates } from '~/support';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n  _scrollCoordinates: ScrollCoordinates;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n  _scrollCoordinatesChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n    _scrollCoordinates: getZeroScrollCoordinates(),\r\n  };\r\n  const { _target, _scrollOffsetElement, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const scrollOffset = adjustScrollOffset && getElementScroll(_scrollOffsetElement);\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      scrollElementTo(_scrollOffsetElement, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElementScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  isDestroyed: () => boolean,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    if (isDestroyed()) {\r\n      return false;\r\n    }\r\n\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _scrollOffsetElement } = structureSetupElements;\r\n      const initialScroll = getElementScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_scrollOffsetElement, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** The scroll coordinates of the viewport. */\r\n  scrollCoordinates: {\r\n    /** The start (origin) scroll coordinates for each axis. */\r\n    start: XY<number>;\r\n    /** The end scroll coordinates for each axis. */\r\n    end: XY<number>;\r\n  };\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        () => destroyed,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const {\r\n            _overflowEdgeChanged,\r\n            _overflowAmountChanged,\r\n            _overflowStyleChanged,\r\n            _scrollCoordinatesChanged,\r\n          } = _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                scrollCoordinatesChanged: !!_scrollCoordinatesChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n          _scrollCoordinates,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            scrollCoordinates: {\r\n              start: _scrollCoordinates._start,\r\n              end: _scrollCoordinates._end,\r\n            },\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["createCache","options","update","_initialValue","_equal","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isBrowser","window","document","wnd","mathMax","Math","max","mathMin","min","mathRound","round","mathAbs","abs","mathSign","sign","cAF","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","getApi","name","undefined","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","ElementNodeType","Node","ELEMENT_NODE","_Object$prototype","Object","prototype","toString","hasOwnProperty","typeRgx","isUndefined","obj","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","key","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","animationCurrentTime","performance","now","animateNumber","from","to","duration","onFrame","easing","animationFrameId","timeStart","finalDuration","frame","complete","timeNow","timeElapsed","stopAnimation","percent","progress","animationCompleted","each","source","callback","i","keys","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","createOrKeepArray","value","isEmptyArray","deduplicateArray","Set","runEachAndClear","args","keep","runFn","fn","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strVisible","strHidden","strScroll","capitalizeFirstLetter","str","finalStr","String","toUpperCase","slice","equal","props","propMutation","result","prop","compareA","compareB","equalWH","equalXY","equalTRBL","noop","bind","_len","arguments","_key","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","_ref","_timeout","_maxDelay","_leading","_mergeParams","maxTimeoutId","prevArguments","latestArguments","leadingInvoked","clear","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","_","copy","copyIsArray","src","clone","removeUndefinedProperties","deep","isEmptyObject","capNumber","number","getDomTokensArray","tokens","split","filter","token","getAttr","elm","attrName","getAttribute","hasAttr","hasAttribute","setAttrs","attrNames","setAttribute","removeAttrs","removeAttribute","domTokenListAttr","initialArr","setElmAttr","domTokenListOperation","operationTokens","operation","initialArrSet","join","_remove","removeTokens","_add","addTokens","_has","hasTokens","tokenSet","reduce","boolean","includes","removeAttrClass","addAttrClass","addRemoveAttrClass","add","hasAttrClass","createDomTokenListClass","removeClass","className","addClass","find","selector","rootElm","querySelectorAll","findFirst","querySelector","is","matches","isBodyElement","contents","childNodes","parent","parentElement","closest","getFocusedElement","doc","activeElement","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","removeElements","nodes","e","parentElm","removeChild","before","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","insertAfter","insertedNodes","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","trim","customCssPropRegex","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","notNaN","isFinite","parseToZeroOrNumber","parseFloat","ratioToCssPercent","ratio","toFixed","numberToCssPx","setStyles","styles","rawValue","elmStyle","style","test","setProperty","_unused","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","elementHasDimensions","offsetWidth","offsetHeight","getClientRects","zeroObj","w","h","getElmWidthHeightProperty","property","getWindowSize","customWnd","getOffsetSize","getClientSize","getScrollSize","getFractionalSize","cssWidth","cssHeight","getBoundingClientRect","hasDimensions","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","rectHadDimensions","removeEventListener","eventNames","listener","capture","eventName","addEventListener","passive","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","stopAndPrevent","scrollElementTo","position","scrollLeft","scrollTop","getElementScroll","getZeroScrollCoordinates","_start","_end","sanitizeScrollCoordinates","rawScrollCoordinates","overflowAmount","sanitizeAxis","start","end","amount","newStart","newEnd","startAbs","endAbs","_sanitizeAxis","startX","endX","_sanitizeAxis2","startY","endY","isDefaultDirectionScrollCoordinates","_ref2","getAxis","getScrollCoordinatesPercent","_ref3","currentScroll","current","focusElement","element","focus","preventScroll","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","get","currListener","forEach","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","o","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentScrollbarHidden","dataAttributeInitialize","dataValueNoClipping","dataAttributeHtmlBody","dataAttributeHost","dataValueHostIsHost","dataAttributeViewport","dataValueViewportOverflowXPrefix","dataValueViewportOverflowYPrefix","dataValueViewportArrange","dataValueViewportMeasuring","dataValueViewportScrollbarHidden","dataValueViewportScrollbarPressed","dataValueViewportNoContent","dataAttributePadding","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbarThemeNone","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","environmentInstance","createEnvironment","getNativeScrollbarSize","measureElm","measureElmChild","body","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","envStyle","envDOM","envElm","envChildElm","_createEventListenerH","_createCache","updateNativeScrollbarSizeCache","getNativeScrollbarSizeCache","_getNativeScrollbarSi","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","viewport","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","env","_nativeScrollbarsSize","_nativeScrollbarsOverlaid","_nativeScrollbarsHiding","_scrollTimeline","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","matchMedia","addZoomListener","onZoom","media","devicePixelRatio","_updateNativeScrollba","updatedNativeScrollbarSize","nativeScrollbarSizeChanged","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","isBody","cancelInitializationValue","_getEnvironment","_getDefaultInitializa","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","osInstance","removeInstance","delete","getInstance","createEventContentChange","eventContentChange","destroyed","destroy","updateElements","getElements","eventElmList","entries","isTargetChild","contains","removeListener","createDOMObserver","isContentObserver","isConnected","_attributes","_styleChangingAttributes","_eventContentChange","_nestedTargetSelector","_ignoreTargetChange","_ignoreContentChange","debouncedEventContentChange","_createEventContentCh","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","pluginModules","staticPluginModuleInstances","addPlugins","addedPlugin","plugin","registerPluginModuleInstances","staticObj","instanceInfo","_plugin$name","osStatic","static","instance","instanceObj","instancePluginMap","getStaticPluginModuleInstance","pluginModuleName","_extends","module","assign","exports","__esModule","optionsTemplateTypes","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","optionsValue","templateValue","templateIsComplex","propPrefix","_validateRecursive","validated","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","validateOptions","optionsValidationPluginModuleName","_static","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","optionsTemplate","_validateOptions","sizeObserverPluginName","SizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","_setStyles","scrollAmount","scrollEventName","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","destroyFns","getShowNativeOverlaidScrollbars","checkOption","_checkOption","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowIsVisible","overflowBehavior","createViewportOverflowState","hasOverflow","getAxisOverflowStyle","axisBehavior","axisHasOverflow","perpendicularBehavior","perpendicularOverflow","behaviorStyle","axisOverflowVisible","perpendicularOverflowVisible","nonPerpendicularOverflow","nonOverflow","_overflowStyle","_overflowScroll","scrollbarsHidingPluginName","ScrollbarsHidingPlugin","_viewportArrangement","structureSetupElements","structureSetupState","observersSetupState","checkOptions","_viewportIsTarget","_viewport","doViewportArrange","_getShowNativeOverlai","readViewportOverflowState","getStatePerAxis","styleKey","overflowStyle","overflowScroll","_getStatePerAxis","xOverflowStyle","xOverflowScroll","_getStatePerAxis2","yOverflowStyle","yOverflowScroll","_getViewportOverflowHideOffset","viewportOverflowState","arrangeHideOffset","getHideOffsetPerAxis","isOverlaid","nativeScrollbarSize","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","_getHideOffsetPerAxis","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","_getHideOffsetPerAxis2","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","_hideNativeScrollbars","viewportArrange","_directionIsRTL","_assignDeep","viewportStyleObj","_getViewportOverflowH","arrangeX","arrangeY","hideOffsetX","hideOffsetY","_viewportPaddingStyle","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_arrangeViewport","viewportScrollSize","sizeFraction","_getViewportOverflowH2","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","_undoViewportArrange","finalViewportOverflowState","viewportPaddingStyle","_getViewportOverflowH3","finalPaddingStyle","assignProps","prevStyle","addArrange","clickScrollPluginModuleName","ClickScrollPlugin","moveHandleRelative","getHandleOffset","startOffset","handleLength","relativeTrackPointerOffset","iteration","animateClickScroll","clickScrollProgress","animationProgress","handleStartBound","handleEndBound","mouseBetweenHandleBounds","firstIterationPauseTimeout","createSizeObserver","_appear","sizeObserverPlugin","updateResizeObserverContentRectCache","baseElements","sizeObserver","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","skip","_updateResizeObserver","contentRect","currRContentRect","_sizeChanged","resizeObserverInstance","pop","_sizeObserverPlugin","pluginAppearCallback","pluginDestroyFns","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","getCurrentOption","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","prevDirectionIsRTL","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","_target","_host","_scrollOffsetElement","_content","_isTextarea","_isBody","_viewportHasClass","_viewportAddRemoveClass","getDirectionIsRTL","state","_heightIntrinsic","scrollbarsHidingPlugin","viewportIsTargetBody","noClipping","isArranged","scrollOffset","revertMeasuring","redoViewportArrange","viewportScroll","fractional","updateContentSizeCache","contentMutationObserverAttr","onObserversUpdatedDebounced","prev","prevObj","currObj","setDirection","updateHints","newDirectionIsRTL","_directionChanged","onTrinsicChanged","heightIntrinsicCache","_heightIntrinsicChanged","exclusiveSizeChange","updateFn","onContentMutation","contentChangedThroughEvent","_updateContentSizeCac","_contentMutation","onHostMutation","_hostMutation","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","_createDOMObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","onWindowResizeDebounced","_updateContentSizeCac2","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_takeRecords","_force","_checkOption2","_checkOption3","attributesChanged","_checkOption4","elementEventsChanged","_checkOption5","debounceValue","debounceChanged","contentMutationObserverChanged","ignoreMutationFromOptions","_createDOMObserver2","ignore","construct","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","createScrollbarsSetupElements","scrollbarsSetupEvents","defaultInitScrollbars","defaultInitScrollbarsSlot","_targetIsElm","scrollbarsInit","initScrollbarsSlot","elementAnimations","initScrollTimeline","axis","scrollTimeline","evaluatedScrollbarSlot","generalDynamicInitializationElement","getScrollbarHandleLengthRatio","scrollbarStructure","_track","_handle","handleSize","trackSize","_overflowAmount","_overflowEdge","viewportSize","getScrollbarHandleOffsetRatio","scrollPercent","lengthRatio","addDirectionRTLKeyframes","keyframes","cancelElementAnimations","currAnimations","doCancel","animation","setElementAnimation","timeline","composite","activeAnimations","activeAnimation","effect","KeyframeEffect","animate","scrollbarStructureAddRemoveClass","scrollbarStructures","action","_scrollbar","scrollbarStyle","_elmStyle","scrollbarStructureRefreshHandleLength","structure","scrollbarStructureRefreshHandleOffset","_scrollCoordinates","xyKey","axisScrollTimeline","axisIsDefaultDirectionScroll","getAxisTransformValue","transform","doRefreshScrollbarOffset","scrollbar","horizontalScrollbars","verticalScrollbars","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","refreshScrollbarsScrollbarOffset","isDefaultDirectionScroll","cushion","_ref4","setScrollbarElementAnimation","styleScrollbarPosition","getTranslateValue","axisScrollPercent","axisOverflowAmount","axisIsDefaultCoordinates","px","generateScrollbarDOM","scrollbarClassName","track","handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","appendElements","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_refreshScrollbarsScrollbarOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","createScrollbarsSetupEvents","scrollbarHandlePointerInteraction","refreshScrollbarStructuresHandleOffset","_documentElm","_selfClearTimeout","wheelTimeout","clearWheelTimeout","_selfClearTimeout2","scrollSnapScrollTransitionTimeout","clearScrollSnapScrollTransitionTimeout","_selfClearTimeout3","requestHandleTransitionAnimationFrame","clearHandleTransitionTimeout","refreshHandleOffsetTransition","scrollOffsetElementScrollBy","coordinates","scrollBy","behavior","widthHeightKey","createInteractiveScrollEvents","releasePointerCaptureEvents","clientXYKey","leftTopKey","whKey","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","_scrollElementTo","handleTrackDiff","scrollDeltaPercent","scrollDelta","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","button","isPrimary","pointerType","continuePointerDown","instantClickScroll","shiftKey","getHandleRect","getTrackRect","handleRect","trackRect","axisScale","pointerDownOffset","handleCenter","releasePointerCapture","pointerUpEvent","pointerId","addScrollbarPressedClass","removeScrollbarPressedClass","withoutSnapScrollOffset","withSnapScrollOffset","snapScrollDiff","pointerMoveEvent","relativeMovement","setPointerCapture","wheelScrollBy","isAffectingTransition","propertyName","focusedElement","wheelEvent","deltaX","deltaY","deltaMode","animateHandleOffset","createScrollbarsSetup","mouseInHost","autoHideIsMove","autoHideIsLeave","autoHideIsNever","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","isHoverablePointerType","requestScrollAnimationFrame","cancelScrollAnimationFrame","autoHideInstantInteractionTimeout","clearAutoHideInstantInteractionTimeout","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","_selfClearTimeout4","auotHideTimeout","clearAutoHideTimeout","_createScrollbarsSetu","manageScrollbarsAutoHideInstantInteraction","_scrollEventElement","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","manageAutoHideSuspension","onHostMouseEnter","_observersUpdateHints","_structureUpdateHints","_overflowEdgeChanged","_overflowAmountChanged","_overflowStyleChanged","_scrollCoordinatesChanged","_hasOverflow","themeChanged","visibilityChanged","autoHideChanged","_checkOption6","autoHideSuspendChanged","_checkOption7","_checkOption8","dragScrollChanged","_checkOption9","clickScrollChanged","_checkOption10","overflowChanged","trulyAppeared","updateScrollbars","updateVisibility","setScrollbarVisibility","isVisible","xVisible","yVisible","hasCorner","createStructureSetupElements","defaultInitElements","defaultHostInitialization","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","hostInitialization","paddingInitialization","viewportInitialization","contentInitialization","targetElement","isTextarea","ownerDocument","docElement","documentElement","getDocumentWindow","defaultView","generalStaticInitializationElement","createNewDiv","generateViewportElement","generateContentElement","possibleViewportElement","viewportIsTarget","possibleContentElement","viewportIsContent","viewportElement","nonBodyHostElement","hostElement","paddingElement","contentElement","generatedElements","elementIsGenerated","originalNonBodyScrollOffsetElement","evaluatedTargetObj","_padding","_originalScrollOffsetElement","_windowElm","viewportAttributeClassName","isTextareaHostGenerated","targetContents","contentSlot","docWnd","initActiveElm","unwrap","prepareWrapUnwrapFocus","tabIndexStr","originalViewportTabIndex","undoInitWrapUndwrapFocus","destroyActiveElm","viewportIsGenerated","destroyFocusElement","undoDestroyWrapUndwrapFocus","createTrinsicUpdateSegment","_observersState","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","_currentPaddingCache","paddingChanged","paddingAbsoluteChanged","contentMutation","_updatePaddingCache","paddingStyleChanged","_paddingStyle","_viewportStyle","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_paddingStyleChanged","createOverflowUpdateSegment","max0","flowDirectionStyleArr","whCacheOptions","partialXYOptions","setMeasuringMode","active","getOverflowAmount","viewportClientSize","tollerance","updateSizeFraction","getCurrentSizeFraction","_createCache2","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","_createCache3","updateOverflowAmountCache","getCurrentOverflowAmountCache","_createCache4","updateHasOverflowCache","_createCache5","updateOverflowEdge","getCurrentOverflowEdgeCache","_createCache6","updateOverflowStyleCache","_createCache7","currVal","newValu","updateFlowDirectionStyles","_createCache8","originalScrollOffset","removeNoContent","removeScrollBlock","scrollEventScrollOffset","isTrusted","scrollSize","tmp","updateMeasuredScrollCoordinates","getCurrentMeasuredScrollCoordinates","createViewportOverflowStyleClassName","prefix","setViewportOverflowStyle","viewportOverflowStyle","createAllOverflowStyleClassNames","allOverflowStyleClassNames","scrollbarsHidingPluginViewportArrangement","overflowXVisible","overflowYVisible","viewportChanged","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","_ref5","_sizeFractionCache","_viewportScrollSizeCa","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","_overflowEdgeCache","overflowEdge","overflowEdgeChanged","_overflowAmuntCache","overflowAmountChanged","_viewportScrollSizeCa2","viewportScrollSizeChanged","_sizeFractionCache2","sizeFractionChanged","_updateHasOverflowCac","hasOverflowChanged","removeClipping","adjustViewportStyle","_updateOverflowStyleC","overflowStyleChanged","_updateFlowDirectionS","flowDirectionStylesChanged","adjustMeasuredScrollCoordinates","_ref6","scrollCoordinates","scrollCoordinatesChanged","_scrolled","createStructureSetup","_createStructureSetup","appendStructureElements","canceled","updateSegments","updateInfo","adjustScrollOffset","updateSegment","createSetups","isDestroyed","onUpdated","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","_createObserversSetup","observersUpdateHints","observersSetupCreate","observersSetupUpdate","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","updateHintsAreTruthy","hints","some","observerUpdateHints","rawChangedOptions","_changedOptions","rawForce","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","_createEventListenerH2","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","_createSetups","sizeChanged","directionChanged","hostMutation","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","pure","base","on","off","_setupsState","directionRTL","_setupsElements$_stru","_setupsElements$_scro","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","translatedStructure","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugins","isArr","pluginsToAdd","valid","hasElmsFn","_getEnvironment2","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","setDefaultInitialization","setDefaultOptions"],"mappings":";;;;;;;;;;;EAiCO,IAAMA,IAA2B,SAA3BA,YACXC,GACAC;IAEA,IAAQC,IAA+CF,EAA/CE,GAAeC,IAAgCH,EAAhCG,GAAQC,IAAwBJ,EAAxBI;IAC/B,IAAIC,IAAgBH;IACpB,IAAII;IAEJ,IAAMC,IAAsD,SAAtDA,sBAAuDC,GAAUC;MACrE,IAAMC,IAAOL;MAEb,IAAMM,IAASH;MACf,IAAMI,IAAUH,MAAUN,KAAUA,EAAOO,GAAMC,KAAUD,MAASC;MAEpE,IAAIC,KAAWR,GAAqB;QAClCC,IAASM;QACTL,IAAYI;AACd;MAEA,OAAO,EAACL,GAAQO,GAASN;;IAE3B,IAAMO,IAA0C,SAA1CA,oBAA2CJ;MAAM,OACrDF,EAAsBN,EAAQI,GAAQC,IAAYG;AAAM;IAE1D,IAAMK,IAA0C,SAA1CA,gBAA2CL;MAAe,OAAK,EACnEJ,KACEI,GACFH;AACD;IAED,OAAO,EAACL,IAASY,IAAsBN,GAAuBO;AAGhE;EClEO,IAAMC,WACJC,WAAW,sBAEXC,aAAa;ECDf,IAAMC,IAAOH,IAAYC,SAAS;EAClC,IAAMG,IAAUC,KAAKC;EACrB,IAAMC,IAAUF,KAAKG;EACrB,IAAMC,IAAYJ,KAAKK;EAGvB,IAAMC,IAAUN,KAAKO;EACrB,IAAMC,IAAWR,KAAKS;EACtB,IAAMC,IAAMZ,EAAIa;EAChB,IAAMC,IAAMd,EAAIe;EAChB,IAAMC,IAAOhB,EAAIiB;EACjB,IAAMC,IAASlB,EAAImB;ECX1B,IAAMC,IAAS,SAATA,OAAaC;IAAY,cACrBrB,EAAIqB,OAA8B,cACtCrB,EAAIqB,UACJC;AAAS;EAER,IAAMC,IAA8BH,EAAgC;EACpE,IAAMI,IACXJ,EAAoC;EAC/B,IAAMK,IAA4BL,EAA8B;EAChE,IAAMM,IAAUN,EAAwD;ECR/E,IAAMO,IAAkB9B,KAAa+B,KAAKC;EAC1C,IAAAC,IAAqCC,OAAOC,WAApCC,IAAQH,EAARG,UAAUC,IAAcJ,EAAdI;EAClB,IAAMC,IAAU;EAET,IAAMC,IAAc,SAAdA,YAAeC;IAAQ,OAAuBA,WAAQf;AAAS;EAErE,IAAMgB,IAAS,SAATA,OAAUD;IAAQ,OAAkBA,MAAQ;AAAI;EAEtD,IAAME,IAAO,SAAPA,KAAQF;IAAQ,OAC3BD,EAAYC,MAAQC,EAAOD,KAAI,KACxBA,IACHJ,EAASO,KAAKH,GAAKI,QAAQN,GAAS,MAAMO;AAAa;EAEtD,IAAMC,IAAW,SAAXA,SAAYN;IAAQ,cAA2BA,MAAQ;AAAQ;EAErE,IAAMO,IAAW,SAAXA,SAAYP;IAAQ,cAA2BA,MAAQ;AAAQ;EAErE,IAAMQ,IAAY,SAAZA,UAAaR;IAAQ,cAA4BA,MAAQ;AAAS;EAExE,IAAMS,IAAa,SAAbA,WAAcT;IAAQ,cAA4CA,MAAQ;AAAU;EAE1F,IAAMU,IAAU,SAAVA,QAAoBV;IAAQ,OAAsBW,MAAMD,QAAQV;AAAI;EAE1E,IAAMY,IAAW,SAAXA,SAAYZ;IAAQ,cACxBA,MAAQ,aAAaU,EAAQV,OAASC,EAAOD;AAAI;EAMnD,IAAMa,IAAc,SAAdA,YAA4Cb;IACvD,IAAMc,MAAWd,KAAOA,EAAIc;IAC5B,IAAMC,IAAsBT,EAASQ,MAAWA,KAAU,KAAKA,IAAS,KAAK;IAE7E,OAAOJ,EAAQV,OAAUS,EAAWT,MAAQe,IACxCD,IAAS,KAAKF,EAASZ,KACrBc,IAAS,KAAKd,IACd,OACF;AACN;EAMO,IAAMgB,IAAgB,SAAhBA,cAA0BhB;IACrC,KAAKA,MAAQY,EAASZ;MACpB,OAAO;;IAGT,IAAIiB;IACJ,IAAMC,IAAO;IACb,IAAMC,IAAOnB,EAAIkB;IACjB,IAAME,IAAYD,KAAQA,EAAKxB;IAC/B,IAAM0B,IAAoBxB,EAAeM,KAAKH,GAAKkB;IACnD,IAAMI,IAAmBF,KAAavB,EAAeM,KAAKiB,GAAW;IAErE,IAAID,MAASE,MAAsBC;MACjC,OAAO;;IAIT,KAAKL,KAAOjB;IAKZ,OAAOD,EAAYkB,MAAQpB,EAAeM,KAAKH,GAAKiB;AACtD;EAMO,IAAMM,IAAgB,SAAhBA,cAAiBvB;IAC5B,IAAMwB,IAAgBC;IACtB,OAAOzB,IACHwB,IACExB,aAAewB,IACfxB,EAAI0B,aAAapC,IACnB;AACN;EAMO,IAAMqC,IAAY,SAAZA,UAAa3B;IACxB,IAAMwB,IAAgBI;IACtB,OAAO5B,IACHwB,IACExB,aAAewB,IACfxB,EAAI0B,aAAapC,IACnB;AACN;EC/EA,IAAMuC,IAAuB,SAAvBA;IAAoB,OAASC,YAAYC;AAAK;EAE7C,IAAMC,IAAgB,SAAhBA,cACXC,GACAC,GACAC,GACAC,GACAC;IAEA,IAAIC,IAAmB;IACvB,IAAMC,IAAYV;IAClB,IAAMW,IAAgB5E,EAAQ,GAAGuE;IACjC,IAAMM,IAAQ,SAARA,MAASC;MACb,IAAMC,IAAUd;MAChB,IAAMe,IAAcD,IAAUJ;MAC9B,IAAMM,IAAgBD,KAAeJ;MACrC,IAAMM,IAAUJ,IACZ,IACA,KAAK9E,EAAQ,GAAG2E,IAAYC,IAAgBG,KAAWH,KAAiB;MAC5E,IAAMO,KACHb,IAAKD,MACHxB,EAAW4B,KACRA,EAAOS,GAASA,IAAUN,GAAe,GAAG,GAAGA,KAC/CM,KACNb;MACF,IAAMe,IAAqBH,KAAiBC,MAAY;MAExDV,KAAWA,EAAQW,GAAUD,GAASE;MAEtCV,IAAmBU,IAAqB,IAAIvE,GAAK;QAAA,OAAMgE;;;IAEzDA;IACA,OAAO,SAACC;MACNnE,EAAK+D;MACLI,KAAYD,EAAMC;;AAEtB;EC7BgB,SAAAO,KACdC,GACAC;IAEA,IAAItC,EAAYqC;MACd,KAAK,IAAIE,IAAI,GAAGA,IAAIF,EAAOpC,QAAQsC;QACjC,IAAID,EAASD,EAAOE,IAAIA,GAAGF,OAAY;UACrC;;;WAGC,IAAIA;MAETD,KAAKvD,OAAO2D,KAAKH,KAAS,SAACjC;QAAG,OAAKkC,EAASD,EAAOjC,IAAMA,GAAKiC;;;IAEhE,OAAOA;AACT;EAQO,IAAMI,IAAU,SAAVA,QAAoBC,GAAyBC;IAAO,OAC/DD,EAAIE,QAAQD,MAAS;AAAC;EAQjB,IAAME,IAAS,SAATA,OAAaC,GAA2BC;IAAyB,OAAUD,EAAED,OAAOE;AAAE;EAO5F,IAAMC,IAAO,SAAPA,KAAWC,GAAYC,GAAyBC;KAC1DA,MAAsBzD,EAASwD,MAAUlD,EAAYkD,KAClDpD,MAAMhB,UAAUkE,KAAKI,MAAMH,GAAOC,KAClCD,EAAMD,KAAKE;IACf,OAAOD;AACT;EAMO,IAAM7B,IAAO,SAAPA,KAAiBsB;IAA2B,OAAK5C,MAAMsB,KAAKsB,KAAO;AAAG;EAO5E,IAAMW,IAAoB,SAApBA,kBAAwBC;IAAc,OAAWzD,EAAQyD,KAASA,IAAQ,EAACA;AAAM;EAMvF,IAAMC,IAAe,SAAfA,aAAgBN;IAA+B,SAAgBA,MAAUA,EAAMhD;AAAM;EAO3F,IAAMuD,IAAmB,SAAnBA,iBAAqCP;IAAQ,OAAQ7B,EAAK,IAAIqC,IAAIR;AAAY;EAQpF,IAAMS,IAAkB,SAAlBA,gBAAmBhB,GAAoBiB,GAAcC;IAEhE,IAAMC,IAAQ,SAARA,MAASC;MAAe,OAAKA,KAAMA,EAAGV,WAAMhF,GAAWuF,KAAQ;AAAG;IACxEvB,KAAKM,GAAKmB;KACTD,MAAUlB,EAAczC,SAAS;AACpC;EC5GO,IAAM8D,IAAgB;EACtB,IAAMC,IAAkB;EACxB,IAAMC,IAAiB;EACvB,IAAMC,IAAmB;EACzB,IAAMC,IAAgB;EACtB,IAAMC,IAAiB;EACvB,IAAMC,IAAkB;EACxB,IAAMC,IAAe;EACrB,IAAMC,KAAe;EACrB,IAAMC,KAAW;EACjB,IAAMC,KAAY;EAClB,IAAMC,KAAa;EACnB,IAAMC,KAAY;EAClB,IAAMC,KAAY;EAElB,IAAMC,KAAwB,SAAxBA,sBAAyBC;IACpC,IAAMC,IAAWC,OAAOF,KAAO;IAC/B,OAAOC,IAAWA,EAAS,GAAGE,gBAAgBF,EAASG,MAAM,KAAK;AACpE;ECJO,IAAMC,KAAQ,SAARA,MACXrC,GACAC,GACAqC,GACAC;IAEA,IAAIvC,KAAKC,GAAG;MACV,IAAIuC,IAAS;MACblD,KAAKgD,IAAO,SAACG;QACX,IAAMC,IAAWH,IAAeA,EAAavC,EAAEyC,MAASzC,EAAEyC;QAC1D,IAAME,IAAWJ,IAAeA,EAAatC,EAAEwC,MAASxC,EAAEwC;QAC1D,IAAIC,MAAaC;UACfH,IAAS;;AAEb;MACA,OAAOA;AACT;IACA,OAAO;AACT;EAQO,IAAMI,KAAU,SAAVA,QAAc5C,GAAoBC;IAAkB,OAC/DoC,GAAsBrC,GAAGC,GAAG,EAAC,KAAK;AAAK;EAQlC,IAAM4C,KAAU,SAAVA,QAAc7C,GAAoBC;IAAkB,OAC/DoC,GAAsBrC,GAAGC,GAAG,EAAC,KAAK;AAAK;EAQlC,IAAM6C,KAAY,SAAZA,UAAa9C,GAAUC;IAAQ,OAAKoC,GAAYrC,GAAGC,GAAG,EAAC,KAAK,KAAK,KAAK;AAAK;EC1DjF,IAAM8C,KAAO,SAAPA,QAAe;ECmCrB,IAAMC,KAAO,SAAPA,KACXhC;IAAgC,KAAAiC,IAAAA,IAAAC,UAAA/F,QAC7B0D,QAAO7D,MAAAiG,IAAAA,IAAAA,YAAAE,IAAA,GAAAA,IAAAF,GAAAE;MAAPtC,EAAOsC,IAAAD,KAAAA,UAAAC;;IAAA,OACcnC,EAAGgC,KAAI1C,MAAPU,GAAE,EAAM,IAACjB,OAAKc;AAAK;EAOtC,IAAMuC,KAAmB,SAAnBA,iBAAoBC;IAC/B,IAAIC;IACJ,IAAMC,IAASF,IAAUrI,IAAOF;IAChC,IAAM0I,IAAWH,IAAUnI,IAASN;IACpC,OAAO,EACL,SAAC4E;MACCgE,EAASF;MAETA,IAAKC,GAAO;QAAA,OAAM/D;AAAY1C,UAAAA,EAAWuG,KAAWA,MAAYA;AAClE,OACA;MAAA,OAAMG,EAASF;;AAEnB;EAOO,IAAMG,KAAW,SAAXA,SACXC,GACA5K;IAEA,IAAA6K,IAAwD7K,KAAW,CAAE,GAA7D8K,IAAQD,EAARC,GAAUC,IAASF,EAATE,GAAWC,IAAQH,EAARG,GAAUC,IAAYJ,EAAZI;IACvC,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC,IAAQrB;IAEZ,IAAMsB,IAA2B,SAA3BA,yBAAqCxD;MACzCuD;MACAlJ,EAAO8I;MACPG,IAAiBH,IAAeC,SAAgB3I;MAChD8I,IAAQrB;MAGRW,EAAmBpD,MAAMgE,MAAMzD;;IAGjC,IAAM0D,IAAa,SAAbA,WACJ/K;MAAoC,OAEpCuK,KAAgBE,IAAgBF,EAAaE,GAAezK,KAAQA;AAAI;IAE1E,IAAMgL,IAAQ,SAARA;MAEJ,IAAIJ,MAAUrB;QACZsB,EAAyBE,EAAWL,MAAqBA;;;IAI7D,IAAMO,IAAc,SAAdA;MAEJ,IAAM5D,IAAuCvC,EAAK4E;MAClD,IAAMwB,IAAe5H,EAAW8G,KAAYA,MAAaA;MACzD,IAAMe,IAAahI,EAAS+H,MAAiBA,KAAgB;MAE7D,IAAIC,GAAY;QACd,IAAMC,IAAe9H,EAAW+G,KAAaA,MAAcA;QAC3D,IAAMgB,IAAalI,EAASiI,MAAiBA,KAAgB;QAC7D,IAAME,IAAeJ,IAAe,IAAI1J,IAAOF;QAC/C,IAAMiK,IAAiBL,IAAe,IAAIxJ,IAASN;QACnD,IAAMoK,IAAoBT,EAAW1D;QACrC,IAAMoE,IAAcD,KAAqBnE;QACzC,IAAMqE,IAAcb,EAAyBrB,KAAK,GAAGiC;QACrD,IAAIE;QAMJf;QACA,IAAIN,MAAaK,GAAgB;UAC/Be;UACAf,IAAiB;UAEjBgB,IAAYL,GAAa;YAAA,OAAOX,SAAiB7I;AAAU,cAAEoJ;AAC/D,eAAO;UAELS,IAAYL,EAAaI,GAAaR;UAEtC,IAAIG,MAAeb;YACjBA,IAAehJ,EAAKwJ,GAAOI;;AAE/B;QAEAR,IAAQ,SAAAA;UAAA,OAAMW,EAAeI;AAAoB;QAEjDlB,IAAgBC,IAAkBe;AACpC;QACEZ,EAAyBxD;;;IAG7B4D,EAAYW,IAASZ;IAErB,OAAOC;AACT;ECrIO,IAAMvI,KAAiB,SAAjBA,eAAkBG,GAAUoG;IAA8B,OACrE1G,OAAOC,UAAUE,eAAeM,KAAKH,GAAKoG;AAAK;EAM1C,IAAM/C,KAAO,SAAPA,KAAQrD;IAAQ,OAAqBA,IAAMN,OAAO2D,KAAKrD,KAAO;AAAE;EAyBtE,IAAMgJ,KAAyB,SAAzBA,WACXC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC;IAEA,IAAMC,IAAsB,EAACN,GAASC,GAASC,GAASC,GAASC,GAASC;IAG1E,YAAYN,MAAW,YAAYhJ,EAAOgJ,QAAaxI,EAAWwI;MAChEA,IAAS,CAAA;;IAGXhG,KAAKuG,IAAS,SAACtG;MAEbD,KAAKC,IAAQ,SAACuG,GAAGxI;QACf,IAAMyI,IAAYxG,EAAOjC;QAIzB,IAAIgI,MAAWS;UACb,OAAO;;QAGT,IAAMC,IAAcjJ,EAAQgJ;QAG5B,IAAIA,KAAQ1I,EAAc0I,IAAO;UAC/B,IAAME,IAAMX,EAAOhI;UACnB,IAAI4I,IAAaD;UAGjB,IAAID,MAAgBjJ,EAAQkJ;YAC1BC,IAAQ;iBACH,KAAKF,MAAgB3I,EAAc4I;YACxCC,IAAQ,CAAA;;UAIVZ,EAAOhI,KAAkB+H,WAAWa,GAAOH;AAC7C;UACET,EAAOhI,KAAkB0I,IAAcD,EAAK3D,UAAU2D;;AAE1D;AACF;IAGA,OAAOT;AACT;EAEO,IAAMa,KAA4B,SAA5BA,0BAAoDb,GAAWc;IAAc,OACxF9G,KAAK+F,GAAW,IAAIC,KAAS,SAAC9E,GAAOlD,GAAKyI;MACxC,IAAIvF,WAAUlF;eACLyK,EAAKzI;aACP,IAAI8I,KAAQ5F,KAASnD,EAAcmD;QACxCuF,EAAKzI,KAA4B6I,0BAA0B3F,GAAO4F;;AAEtE;AAAE;EAMG,IAAMC,KAAgB,SAAhBA,cAAiBhK;IAE5B,KAAK,IAAMhB,KAAQgB;MAAK,OAAO;;IAC/B,OAAO;AAET;ECvGO,IAAMiK,KAAY,SAAZA,UAAajM,GAAaF,GAAaoM;IAAc,OAChEtM,EAAQI,GAAKD,EAAQD,GAAKoM;AAAQ;ECH7B,IAAMC,KAAoB,SAApBA,kBAAqBC;IAAiB,OACjDnI,EAAK,IAAIqC,KAAK5D,EAAQ0J,KAAUA,KAAUA,KAAU,IAAIC,MAAM,MAAMC,QAAO,SAACC;MAAK,OAAKA;AAAK;AAAG;EAQzF,IAAMC,KAAU,SAAVA,QAAWC,GAA6BC;IAAgB,OACnED,KAAOA,EAAIE,aAAaD;AAAS;EAQ5B,IAAME,KAAU,SAAVA,QAAWH,GAA6BC;IAAgB,OACnED,KAAOA,EAAII,aAAaH;AAAS;EAO5B,IAAMI,KAAW,SAAXA,SACXL,GACAM,GACA5G;IAEAlB,KAAKkH,GAAkBY,KAAY,SAACL;MAClCD,KAAOA,EAAIO,aAAaN,GAAU7E,OAAO1B,KAAS;AACpD;AACF;EAOO,IAAM8G,KAAc,SAAdA,YAAeR,GAA6BM;IACvD9H,KAAKkH,GAAkBY,KAAY,SAACL;MAAQ,OAAKD,KAAOA,EAAIS,gBAAgBR;;AAC9E;EAEO,IAAMS,KAAmB,SAAnBA,iBAAoBV,GAA6BC;IAC5D,IAAMU,IAAajB,GAAkBK,GAAQC,GAAKC;IAClD,IAAMW,IAAa1E,GAAKmE,IAAUL,GAAKC;IACvC,IAAMY,IAAwB,SAAxBA,sBAAyBC,GAA4BC;MACzD,IAAMC,IAAgB,IAAInH,IAAI8G;MAC9BnI,KAAKkH,GAAkBoB,KAAkB,SAAChB;QACxCkB,EAAcD,GAAWjB;AAC3B;MACA,OAAOtI,EAAKwJ,GAAeC,KAAK;;IAGlC,OAAO;MACLC,GAAS,SAAAA,QAACC;QAAuB,OAAKP,EAAWC,EAAsBM,GAAc;AAAU;MAC/FC,GAAM,SAAAA,KAACC;QAAoB,OAAKT,EAAWC,EAAsBQ,GAAW;AAAO;MACnFC,GAAM,SAAAA,KAACC;QACL,IAAMC,IAAW9B,GAAkB6B;QACnC,OAAOC,EAASC,QACd,SAACC,GAAS5B;UAAK,OAAK4B,KAAWf,EAAWgB,SAAS7B;AAAM,YACzD0B,EAASnL,SAAS;AAEtB;;AAEJ;EAQO,IAAMuL,KAAkB,SAAlBA,gBACX5B,GACAC,GACAvG;IAEAgH,GAAiBV,GAAKC,GAAUiB,EAAQxH;IAExC,OAAOwC,GAAK2F,IAAc7B,GAAKC,GAAUvG;AAC3C;EAQO,IAAMmI,KAAe,SAAfA,aACX7B,GACAC,GACAvG;IAEAgH,GAAiBV,GAAKC,GAAUmB,EAAK1H;IACrC,OAAOwC,GAAK0F,IAAiB5B,GAAKC,GAAUvG;AAC9C;EAEO,IAAMoI,KAAqB,SAArBA,mBACX9B,GACAC,GACAvG,GACAqI;IAAa,QACTA,IAAMF,KAAeD,IAAiB5B,GAAKC,GAAUvG;AAAM;EAS1D,IAAMsI,KAAe,SAAfA,aACXhC,GACAC,GACAvG;IAAgB,OACJgH,GAAiBV,GAAKC,GAAUqB,EAAK5H;AAAM;ECvHzD,IAAMuI,KAA0B,SAA1BA,wBAA2BjC;IAAsB,OAAKU,GAAiBV,GAAK;AAAQ;EAenF,IAAMkC,KAAc,SAAdA,YAAelC,GAAwBmC;IAClDF,GAAwBjC,GAAKkB,EAAQiB;AACvC;EAQO,IAAMC,KAAW,SAAXA,SAAYpC,GAAwBmC;IAC/CF,GAAwBjC,GAAKoB,EAAKe;IAClC,OAAOjG,GAAKgG,IAAalC,GAAKmC;AAChC;ECvBA,IAAME,KAAO,SAAPA,KAAQC,GAAkBtC;IAC9B,IAAMlH,IAAsB;IAC5B,IAAMyJ,IAAUvC,IAAM9I,EAAU8I,MAAQA,IAAM/M;IAE9C,OAAOsP,IAAUnJ,EAAKN,GAAKyJ,EAAQC,iBAAiBF,MAAaxJ;AACnE;EAOA,IAAM2J,KAAY,SAAZA,UAAaH,GAAkBtC;IACnC,IAAMuC,IAAUvC,IAAM9I,EAAU8I,MAAQA,IAAM/M;IAE9C,OAAOsP,IAAUA,EAAQG,cAAcJ,KAAY;AACrD;EAOA,IAAMK,KAAK,SAALA,GAAM3C,GAAuBsC;IACjC,IAAIpL,EAAU8I;MACZ,OAAOA,EAAI4C,QAAQN;;IAErB,OAAO;AACT;EAEA,IAAMO,KAAgB,SAAhBA,cAAiB7C;IAAqB,OAAK2C,GAAG3C,GAAK;AAAO;EAsBhE,IAAM8C,KAAW,SAAXA,SAAY9C;IAAqB,OACrCA,IAAMxI,EAAKwI,EAAI+C,cAAc;AAAE;EAMjC,IAAMC,KAAS,SAATA,OAAUhD;IAAqB,OAAwBA,KAAOA,EAAIiD;AAAa;EAQrF,IAAMC,KAAU,SAAVA,QAAWlD,GAAuBsC;IAAgB,OACtDpL,EAAU8I,MAAQA,EAAIkD,QAAQZ;AAAS;EAMzC,IAAMa,KAAoB,SAApBA,kBAAqBC;IAAc,QAAMA,KAAOnQ,UAAUoQ;AAAa;EAQ7E,IAAMC,KAAc,SAAdA,YACJtD,GACAuD,GACAC;IAEA,IAAMC,IAAyBP,GAAQlD,GAAKuD;IAC5C,IAAMG,IAAyB1D,KAAOyC,GAAUe,GAAsBC;IACtE,IAAME,IACJT,GAAQQ,GAAwBH,OAA0BE;IAE5D,OAAOA,KAA0BC,IAC7BD,MAA2BzD,KACzB0D,MAA2B1D,KAC1B2D,KACCT,GAAQA,GAAQlD,GAAKwD,IAAuBD,OAC1CE,IACN;AACN;EClGO,IAAMG,KAAiB,SAAjBA,eAAkBC;IAC7B,IAAIzN,EAAYyN;MACdrL,KAAKhB,EAAKqM,KAAQ,SAACC;QAAC,OAAKF,eAAeE;;WACnC,IAAID,GAAO;MAChB,IAAME,IAAYf,GAAOa;MACzBE,KAAaA,EAAUC,YAAYH;AACrC;AACF;EASA,IAAMI,KAAS,SAATA,OACJF,GACAG,GACAC;IAEA,IAAIA,KAAgBJ,GAAW;MAC7B,IAAIK,IAA6BF;MACjC,IAAIG;MAEJ,IAAIjO,EAAY+N,IAAe;QAC7BE,IAAWpR,SAASqR;QAGpB9L,KAAK2L,IAAc,SAACI;UAClB,IAAIA,MAAgBH;YAClBA,IAASG,EAAYC;;UAEvBH,EAAUI,YAAYF;AACxB;AACF;QACEF,IAAWF;;MAIb,IAAID;QACF,KAAKE;UACHA,IAASL,EAAUW;eACd,IAAIN,MAAWF;UACpBE,IAASA,EAAOO;;;MAIpBZ,EAAUa,aAAaP,GAAUD,KAAU;MAC3C,OAAO;QAAA,OAAMR,GAAeO;AAAa;AAC3C;IACA,OAAOlI;AACT;EAQO,IAAM4I,KAAiB,SAAjBA,eAAkBC,GAA0BC;IAAwB,OAC/Ed,GAAOa,GAAM,MAAMC;AAAS;EA0BvB,IAAMC,KAAc,SAAdA,YAAeF,GAA0BG;IAA6B,OACjFhB,GAAOjB,GAAO8B,IAAOA,KAAQA,EAAKH,aAAaM;AAAc;EC5FxD,IAAMC,KAAY,SAAZA,UAAaC;IACxB,IAAMC,IAAMnS,SAASoS,cAAc;IACnChF,GAAS+E,GAAK,SAASD;IACvB,OAAOC;AACT;EAMO,IAAME,KAAY,SAAZA,UAAaC;IACxB,IAAMC,IAAaN;IACnBM,EAAWC,YAAYF,EAAKG;IAE5B,OAAOlN,KAAKsK,GAAS0C,KAAa,SAACxF;MAAG,OAAK4D,GAAe5D;;AAC5D;ECTA,IAAM2F,KAAqB;EAE3B,IAAMC,KAAY,SAAZA,UAAaC,GAAoClK;IAAoB,OACzEkK,EAAcC,iBAAiBnK,MAASkK,EAAclK,MAAgB;AAAE;EAE1E,IAAMoK,KAAoB,SAApBA,kBAAqBtG;IACzB,IAAMuG,IAASvG,KAAU;IACzB,OAAOwG,SAASD,KAAUA,IAAS;AACrC;EAEA,IAAME,KAAsB,SAAtBA,oBAAuBxM;IAAc,OAAaqM,GAAkBI,WAAWzM,KAAS;AAAI;EAE3F,IAAM0M,KAAoB,SAApBA,kBAAqBC;IAAa,QACzCN,GAAkBM,KAAS,KAAKC,QAAQ,KAAE;AAAA;EAEzC,IAAMC,KAAgB,SAAhBA,cAAiB9G;IAAc,OAAQsG,GAAkBtG,KAAO;AAAA;EAE7D,SAAA+G,UACdxG,GACAyG;IAEAzG,KACEyG,KACAjO,KAAKiO,IAAQ,SAACC,GAA4BnS;MACxC;QACE,IAAMoS,IAAW3G,EAAI4G;QACrB,IAAMlN,IAAQ7D,EAAS6Q,KAAYH,GAAcG,MAAaA,KAAY,MAAM;QAEhF,IAAIf,GAAmBkB,KAAKtS;UAC1BoS,EAASG,YAAYvS,GAAMmF;;UAE3BiN,EAASpS,KAAemF;;AAE5B,QAAE,OAAAqN,IAAO;AACX;AACJ;WAYgBC,UACdhH,GACAyG,GACAQ;IAEA,IAAMC,IAAiBpR,EAAS2Q;IAChC,IAAIU,IAAwCD,IAAiB,KAAK;IAElE,IAAIlH,GAAK;MACP,IAAM6F,IAAgB3S,EAAIkU,iBAAiBpH,GAAKiH,MAAcjH,EAAI4G;MAClEO,IAAkBD,IACdtB,GAAUC,GAAeY,KACzBjP,EAAKiP,GAAQhF,QAAO,SAAC/F,GAAQlF;QAC3BkF,EAAOlF,KAAOoP,GAAUC,GAAerP;QACvC,OAAOkF;AACR,UAAEyL;AACT;IACA,OAAOA;AACT;EAQO,IAAME,KAAqB,SAArBA,mBACXrH,GACAsH,GACAC;IAEA,IAAMC,IAAcF,IAAoBA,UAAoB;IAC5D,IAAMG,IAAcF,IAAqBA,MAAAA,IAAmB;IAC5D,IAAMG,IAASF,IAAW,QAAMC;IAChC,IAAME,IAAWH,IAAW,UAAQC;IACpC,IAAMG,IAAYJ,IAAW,WAASC;IACtC,IAAMI,IAAUL,IAAW,SAAOC;IAClC,IAAM/L,IAASsL,UAAUhH,GAAK,EAAC0H,GAAKC,GAAOC,GAAQC;IACnD,OAAO;MACLC,GAAG5B,GAAoBxK,EAAOgM;MAC9BK,GAAG7B,GAAoBxK,EAAOiM;MAC9BxO,GAAG+M,GAAoBxK,EAAOkM;MAC9BI,GAAG9B,GAAoBxK,EAAOmM;;AAElC;EAEO,IAAMI,KAA4B,SAA5BA,0BACXvO,GACAwO;IAAsB,OAGpB/R,eAAAA,EAASuD,WAAaA,EAAMyO,IAAKzO,MAAAA,EAAM0O,IAAC,OAASF,IAAe,MAAM,OAAG,MAAIxO,IAC/E;AAAA;ECtGF,IAAM2O,KAAuB,SAAvBA,qBAAwBrI;IAAgB,UACzCA,EAAIsI,eAAetI,EAAIuI,gBAAgBvI,EAAIwI,iBAAiBnS;AAAO;EACxE,IAAMoS,KAAc;IAClBC,GAAG;IACHC,GAAG;;EAGL,IAAMC,KAA4B,SAA5BA,0BACJC,GACA7I;IAAiC,OAEjCA,IACI;MACE0I,GAAI1I,EAAe6I,IAAgB;MACnCF,GAAI3I,EAAe6I,IAAQ;QAE7BJ;AAAO;EAKN,IAAMK,KAAgB,SAAhBA,cAAiBC;IAAkB,OAC9CH,GAA0B,SAASG,KAAa7V;AAAI;EAM/C,IAAM8V,KAAgB9M,GAAK0M,IAAwC;EAQnE,IAAMK,KAAgB/M,GAAK0M,IAAwC;EAQnE,IAAMM,KAAgBhN,GAAK0M,IAAwC;EAQnE,IAAMO,KAAoB,SAApBA,kBAAqBnJ;IAChC,IAAMoJ,IAAWjD,WAAWa,UAAUhH,GAAKpF,QAAc;IACzD,IAAMyO,IAAYlD,WAAWa,UAAUhH,GAAKnF,QAAe;IAC3D,OAAO;MACL6N,GAAGU,IAAW5V,EAAU4V;MACxBT,GAAGU,IAAY7V,EAAU6V;;AAE7B;EAMO,IAAMC,KAAwB,SAAxBA,sBAAyBtJ;IAAgB,OAAcA,EAAIsJ;AAAuB;EAMxF,IAAMC,KAAgB,SAAhBA,cAAiBvJ;IAAsB,SAChDA,KAAOqI,GAAqBrI;AAAI;EAK7B,IAAMwJ,KAAuB,SAAvBA,qBAAwBC;IAAqC,UACrEA,MAASA,EAAK5O,OAAc4O,EAAK7O;AAAW;EAQ1C,IAAM8O,KAAkB,SAAlBA,gBACXC,GACAC;IAEA,IAAMC,IAAoBL,GAAqBG;IAC/C,IAAMG,IAAoBN,GAAqBI;IAC/C,QAAQE,KAAqBD;AAC/B;EC/EO,IAAME,KAAsB,SAAtBA,oBACXvL,GACAwL,GACAC,GACAC;IAEA1R,KAAKkH,GAAkBsK,KAAa,SAACG;MACnC3L,KAAUA,EAAOuL,oBAAoBI,GAAWF,GAA2BC;AAC7E;AACF;EASO,IAAME,KAAmB,SAAnBA,iBACX5L,GACAwL,GACAC,GACAjY;IACgB,IAAA6K;IAChB,IAAMwN,KAAOxN,IAAI7K,KAAWA,EAAQsY,MAAQ,OAAAzN,IAAK;IACjD,IAAMqN,IAAWlY,KAAWA,EAAQuY,KAAa;IACjD,IAAMC,IAAQxY,KAAWA,EAAQyY,KAAU;IAC3C,IAAMC,IAAyC;MAC7CL,SAAAA;MACAH,SAAAA;;IAGF,OAAOhO,GACLpC,GACA4F,GAAkBsK,GAAYW,KAAI,SAACR;MACjC,IAAMS,IACJJ,IACI,SAACK;QACCd,GAAoBvL,GAAQ2L,GAAWS,GAAeV;QACtDD,KAAYA,EAASY;AACtB,UACDZ;MAGNzL,KAAUA,EAAO4L,iBAAiBD,GAAWS,GAAeF;MAC5D,OAAOxO,GAAK6N,IAAqBvL,GAAQ2L,GAAWS,GAAeV;AACpE;AAEL;EAwBO,IAAMY,KAAkB,SAAlBA,gBAAmBD;IAAU,OAAWA,EAAIC;AAAiB;EAMnE,IAAMC,KAAiB,SAAjBA,eAAkBF;IAAU,OAAWA,EAAIE;AAAgB;EAMjE,IAAMC,KAAiB,SAAjBA,eAAkBH;IAAU,OACtCC,GAAgBD,MAAuBE,GAAeF;AAAkB;EC9FpE,IAAMI,KAAkB,SAAlBA,gBACXjL,GACAkL;IAEA,IAAArO,IAAiBhH,EAASqV,KAAY;MAAE/C,GAAG+C;MAAU9C,GAAG8C;QAAaA,KAAY,CAAE,GAA3E/C,IAACtL,EAADsL,GAAGC,IAACvL,EAADuL;IACXvS,EAASsS,OAAOnI,EAAImL,aAAahD;IACjCtS,EAASuS,OAAOpI,EAAIoL,YAAYhD;AAClC;EAOO,IAAMiD,KAAmB,SAAnBA,iBAAoBrL;IAAgB,OAAoB;MACnEmI,GAAGnI,EAAImL;MACP/C,GAAGpI,EAAIoL;;AACR;EAKM,IAAME,KAA2B,SAA3BA;IAAwB,OAA6B;MAChEC,GAAQ;QAAEpD,GAAG;QAAGC,GAAG;;MACnBoD,GAAM;QAAErD,GAAG;QAAGC,GAAG;;;AAClB;EAUM,IAAMqD,KAA4B,SAA5BA,0BACXC,GACAC;IAEA,IAAQJ,IAAiBG,EAAjBH,GAAQC,IAASE,EAATF;IAChB,IAAQ9C,IAASiD,EAATjD,GAAGC,IAAMgD,EAANhD;IACX,IAAMiD,IAAe,SAAfA,aAAgBC,GAAeC,GAAaC;MAChD,IAAIC,IAAWpY,EAASiY,KAASE;MACjC,IAAIE,IAASrY,EAASkY,KAAOC;MAE7B,IAAIC,MAAaC,GAAQ;QACvB,IAAMC,IAAWxY,EAAQmY;QACzB,IAAMM,IAASzY,EAAQoY;QAEvBG,IAASC,IAAWC,IAAS,IAAIF;QACjCD,IAAWE,IAAWC,IAAS,IAAIH;AACrC;MAGAA,IAAWA,MAAaC,IAAS,IAAID;MAErC,OAAO,EAACA,IAAW,GAAGC,IAAS;;IAGjC,IAAAG,IAAuBR,EAAaL,EAAOpD,GAAGqD,EAAKrD,GAAGO,IAA/C2D,IAAMD,EAAA,IAAEE,IAAIF,EAAA;IACnB,IAAAG,IAAuBX,EAAaL,EAAOnD,GAAGoD,EAAKpD,GAAGO,IAA/C6D,IAAMD,EAAA,IAAEE,IAAIF,EAAA;IAEnB,OAAO;MACLhB,GAAQ;QACNpD,GAAGkE;QACHjE,GAAGoE;;MAELhB,GAAM;QACJrD,GAAGmE;QACHlE,GAAGqE;;;AAGT;EASO,IAAMC,KAAsC,SAAtCA,oCAAmCC;IAGX,IAFnCpB,IAAMoB,EAANpB,GACAC,IAAImB,EAAJnB;IAEA,IAAMoB,IAAU,SAAVA,QAAWf,GAAeC;MAAW,OAAKD,MAAU,KAAKA,KAASC;AAAG;IAE3E,OAAO;MACL3D,GAAGyE,EAAQrB,EAAOpD,GAAGqD,EAAKrD;MAC1BC,GAAGwE,EAAQrB,EAAOnD,GAAGoD,EAAKpD;;AAE9B;EAOO,IAAMyE,KAA8B,SAA9BA,4BAA2BC,GAEtCC;IACE,IAFAxB,IAAMuB,EAANvB,GAAQC,IAAIsB,EAAJtB;IAGV,IAAMoB,IAAU,SAAVA,QAAWf,GAAeC,GAAakB;MAAe,OAC1DxN,GAAU,GAAG,IAAIqM,IAAQmB,MAAYnB,IAAQC,MAAQ;AAAE;IAEzD,OAAO;MACL3D,GAAGyE,EAAQrB,EAAOpD,GAAGqD,EAAKrD,GAAG4E,EAAc5E;MAC3CC,GAAGwE,EAAQrB,EAAOnD,GAAGoD,EAAKpD,GAAG2E,EAAc3E;;AAE/C;EC7HO,IAAM6E,KAAe,SAAfA,aAAgBC;IAC3B,IAAIA,KAAYA,EAAwBC;MACrCD,EAAwBC,MAAM;QAAEC,eAAe;;;AAEpD;ECsCA,IAAMC,KAAiB,SAAjBA,eACJ3U,GACAuR;IAEAzR,KAAKiB,EAAkBwQ,IAAWvR;AACpC;EAEO,IAAM4U,KAAyB,SAAzBA,uBACXC;IAEA,IAAMC,IAAS,IAAIC;IAEnB,IAAMC,IAAsC,SAAtCA,YAAuCnZ,GAAM0V;MACjD,IAAI1V,GAAM;QACR,IAAMoZ,IAAWH,EAAOI,IAAIrZ;QAC5B8Y,IAAe,SAACQ;UACd,IAAIF;YACFA,EAASE,IAAe,WAAW,SAASA;;AAE/C,YAAE5D;AACL,aAAO;QACLuD,EAAOM,SAAQ,SAACH;UACdA,EAASrQ;AACX;QACAkQ,EAAOlQ;AACT;;IAGF,IAAMyQ,IAAgC,SAAhCA,SACJC,GACAC;MAKA,IAAInY,EAASkY,IAAuB;QAClC,IAAML,IAAWH,EAAOI,IAAII,MAAyB,IAAInU;QACzD2T,EAAOU,IAAIF,GAAsBL;QAEjCN,IAAe,SAACQ;UACd7X,EAAW6X,MAAiBF,EAAS5L,IAAI8L;AAC1C,YAAEI;QAEH,OAAO/R,GACLwR,GACAM,GACAC;AAEJ;MACA,IAAIlY,EAAUkY,MAAmBA;QAC/BP;;MAGF,IAAMS,IAAoBvV,GAAKoV;MAC/B,IAAMI,IAAyB;MAC/B5V,KAAK2V,IAAmB,SAAC3X;QACvB,IAAM6X,IAAiBL,EAAmDxX;QAC1E6X,KAAiBjV,EAAKgV,GAAQL,SAASvX,GAAK6X;AAC9C;MAEA,OAAOnS,GAAKpC,GAAiBsU;;IAG/B,IAAME,IAAwC,SAAxCA,aAAyC/Z,GAAMwF;MACnDvB,KAAKhB,EAAKgW,EAAOI,IAAIrZ,MAAQ,SAACga;QAC5B,IAAIxU,MAASJ,EAAaI;UACvBwU,EAA6D/U,MAAM,GAAGO;;UAEtEwU;;AAEL;;IAGFR,EAASR,KAAyB,CAAA;IAElC,OAAO,EAACQ,GAAUL,GAAaY;AACjC;ECvCA,IAAME,KAAe,SAAfA,aAAgB9U;IAAU,OAC9B+U,KAAKC,UAAUhV,IAAO,SAACsF,GAAG2P;MACxB,IAAI3Y,EAAW2Y;QACb,MAAM;;MAER,OAAOA;AACT;AAAE;EAEJ,IAAMC,KAAgB,SAAhBA,cAAoBrZ,GAAUsZ;IAAY,OAC9CtZ,KACOsZ,KAAAA,GACAjP,MAAM,KACN6B,QAAO,SAACqN,GAAGnT;MAAI,OAAMmT,KAAK1Z,GAAe0Z,GAAGnT,KAAQmT,EAAEnT,UAAQnH;AAAS,QAAGe,UAC7Ef;AAAS;EA8HR,IAAMua,KAAkC;IAC7CC,iBAAiB;IACjBC,8BAA8B;IAC9Bhd,QAAQ;MACNid,eAAe,EAAC,EAAC,OAAO;MACxBvS,UAAU,EAAC,GAAG;MACdwS,YAAY;MACZC,gBAAgB;;IAElBC,UAAU;MACRlH,GAAG;MACHC,GAAG;;IAELkH,YAAY;MACVC,OAAO;MACPC,YAAY;MACZC,UAAU;MACVC,eAAe;MACfC,iBAAiB;MACjBC,YAAY;MACZC,aAAa;MACbC,UAAU,EAAC,SAAS,SAAS;;;EAI1B,IAAMC,KAAiB,SAAjBA,eAAqBC,GAAgBC;IAChD,IAAMC,IAAuB,CAAA;IAC7B,IAAMC,IAAclX,EAAOL,GAAKqX,IAAarX,GAAKoX;IAIlDxX,KAAK2X,IAAa,SAACC;MACjB,IAAMC,IAAkBL,EAAYI;MACpC,IAAME,IAAiBL,EAAWG;MAElC,IAAIja,EAASka,MAAoBla,EAASma,IAAiB;QACzD/R,GAAY2R,EAAKE,KAAa,CAAA,GAAYL,eAAeM,GAAiBC;QAE1E,IAAI/Q,GAAc2Q,EAAKE;iBACdF,EAAKE;;AAEhB,aAAO,IAAIhb,GAAe6a,GAAYG,MAAcE,MAAmBD,GAAiB;QACtF,IAAIE,IAAS;QAEb,IAAIta,EAAQoa,MAAoBpa,EAAQqa;UACtC;YACE,IAAI9B,GAAa6B,OAAqB7B,GAAa8B;cACjDC,IAAS;;AAEb,YAAE,OAAAxJ,IAAO;;QAGX,IAAIwJ;UACFL,EAAKE,KAAaE;;AAEtB;AACF;IAEA,OAAOJ;AACT;EAEO,IAAMM,KACX,SADWA,kBAETxe,GACAye,GACAhe;IAAe,OAEjB,SAACoc;MAAI,OACH,EAACD,GAAc5c,GAAS6c,IAAOpc,KAASmc,GAAc6B,GAAgB5B,YAAUra;AAAU;AAAA;EC5R9F,IAAMkc,KAA8C;EAG7C,IAAMC,KAAuB;EAC7B,IAAMC,KAAyCD,KAAuC;EAGtF,IAAME,KAA6BH,KAAgC;EAGnE,IAAMI,KAAsB;EAG5B,IAAMC,KAA2BL,KAA0B;EAG3D,IAAMM,KAAoBN;EAC1B,IAAMO,KAAsB;EAG5B,IAAMC,KAA2BR,KAA8B;EAC/D,IAAMS,KAAmCzW;EACzC,IAAM0W,KAAmCzW;EACzC,IAAM0W,KAA2B;EACjC,IAAMC,KAA6B;EACnC,IAAMC,KAAmC;EACzC,IAAMC,KAAoC;EAC1C,IAAMC,KAA6B;EAGnC,IAAMC,KAA0BhB,KAA6B;EAG7D,IAAMiB,KAA0BjB,KAA6B;EAG7D,IAAMkB,KAAwB;EAC9B,IAAMC,KAAiCD,KAA8B;EACrE,IAAME,KAAmCF,KAAgC;EACzE,IAAMG,KAAyCD,KAAsC;EACrF,IAAME,KAAuCF,KAAoC;EACjF,IAAMG,KAA4CD,KAAyC;EAG3F,IAAME,KAA2B;EAGjC,IAAMC,KAA8B;EACpC,IAAMC,KAAqB;EAC3B,IAAMC,KAA2BD,KAAwB;EACzD,IAAME,KAAkCF,KAA+B;EACvE,IAAMG,KAAgCH,KAA6B;EACnE,IAAMI,KAA6BJ,KAA0B;EAC7D,IAAMK,KAA8BL,KAA2B;EAC/D,IAAMM,KAA+BN,KAA4B;EACjE,IAAMO,KAAkCP,KAA+B;EAEvE,IAAMQ,KAAmCR,KAAgC;EACzE,IAAMS,KAAgCT,KAA6B;EACnE,IAAMU,KAAgCV,KAA8B;EACpE,IAAMW,KAAsCD,KAAmC;EAC/E,IAAME,KAA6BZ,KAA0B;EAC7D,IAAMa,KAAwCT,KAAqC;EACnF,IAAMU,KAAyCT,KAAsC;ECnB5F,IAAIU;EAEJ,IAAMC,KAAoB,SAApBA;IACJ,IAAMC,IAAyB,SAAzBA,uBACJC,GACAC,GACAjW;MAGAuH,GAAe5R,SAASugB,MAAMF;MAC9BzO,GAAe5R,SAASugB,MAAMF;MAE9B,IAAMG,IAAQxK,GAAcqK;MAC5B,IAAMI,IAAQ1K,GAAcsK;MAC5B,IAAMK,IAAQxK,GAAkBoK;MAEhCjW,KAASsG,GAAe0P;MAExB,OAAO;QACLnL,GAAGuL,EAAM/K,IAAI8K,EAAM9K,IAAIgL,EAAMhL;QAC7BP,GAAGsL,EAAMhL,IAAI+K,EAAM/K,IAAIiL,EAAMjL;;;IAIjC,IAAMkL,IAA4B,SAA5BA,0BAA6BC;MACjC,IAAInY,IAAS;MACb,IAAMoY,IAAc1R,GAASyR,GAASjD;MACtC;QACElV,IACEsL,UAAU6M,GAAS,uBAAyC,UAC5D7M,UAAU6M,GAAS,WAAW,2BAA2B;AAC7D,QAAE,OAAA9M,IAAO;MACT+M;MACA,OAAOpY;;IAIT,IAAMqY,IAAepD,MAAAA,KAAuJA,qIAAAA,KAAkEC,gDAAAA,KAAuEA,sCAAAA,KAA2DA,0BAAAA,KAAsJ;IACtgB,IAAMoD,IAAS1O,GAAS,iBACPqL,KAA2CoD,yBAAAA;IAE5D,IAAME,IAASD,EAAO;IACtB,IAAME,IAAcD,EAAOvP;IAC3B,IAAAyP,IAAmC7G,MAA5BS,IAAQoG,EAAA,IAAI7F,IAAY6F,EAAA;IAC/B,IAAAC,IAAsEriB,EACpE;MACEG,GAAemhB,EAAuBY,GAAQC;MAC9C/hB,GAAQ4J;OAEVG,GAAKmX,GAAwBY,GAAQC,GAAa,QAL7CG,IAA8BD,EAAA,IAAEE,IAA2BF,EAAA;IAOlE,IAAAG,IAA+BD,KAAxBE,IAAoBD,EAAA;IAC3B,IAAME,IAAyBb,EAA0BK;IACzD,IAAMS,IAA2B;MAC/BvM,GAAGqM,EAAqBrM,MAAM;MAC9BC,GAAGoM,EAAqBpM,MAAM;;IAEhC,IAAMuM,IAA8C;MAClDC,UAAU;QACRC,MAAM;QACNC,UAAUL;QACVM,UAAU,SAAAA,SAACvW;UAAM,OAAKiW,KAA0B5R,GAAcrE,MAAWA;AAAM;QAC/EwW,SAAS;;MAEX1F,YAAY;QACV2F,MAAM;;MAERC,QAAQ;QACNR,0BAA0B;QAC1BlB,MAAM;;;IAGV,IAAM2B,IAAuB5W,GAAW,CAAE,GAAEwQ;IAC5C,IAAMqG,IAAoBlZ,GACxBqC,IACA,CAAa,GACb4W;IAEF,IAAME,IAA2BnZ,GAC/BqC,IACA,CAAoB,GACpBoW;IAGF,IAAMW,IAAW;MACfC,GAAuBf;MACvBgB,GAA2Bd;MAC3Be,GAAyBhB;MACzBiB,KAAmB9gB;MACnB+gB,GAAoBzZ,GAAK6R,GAAU;MACnC6H,GAA2BP;MAC3BQ,GAA2B,SAAAA,0BAACC;QAAyB,OACnDvX,GAAWoW,GAA6BmB,MACxCT;AAA0B;MAC5BU,GAAoBX;MACpBY,GAAoB,SAAAA,mBAACC;QAAiB,OACpC1X,GAAW4W,GAAsBc,MAAsBb;AAAmB;MAC5Ec,GAA8B3X,GAAW,CAAE,GAAEoW;MAC7CwB,GAAuB5X,GAAW,CAAE,GAAE4W;;IAGxC3U,GAAYyT,GAAQ;IACpBrQ,GAAeqQ;IAGf7J,GAAiBlX,GAAK,WAAU;MAC9Bob,EAAa,KAAK;AACpB;IAEA,IACEtY,EAAW9C,EAAIkjB,gBACd3B,OACCC,EAAyBvM,MAAMuM,EAAyBtM,IAC1D;MACA,IAAMiO,IAAkB,SAAlBA,gBAAmBC;QACvB,IAAMC,IAAQrjB,EAAIkjB,6BAA2BljB,EAAIsjB,mBAAgB;QACjEpM,GACEmM,GACA,WACA;UACED;UACAD,gBAAgBC;AAClB,YACA;UACE7L,GAAO;;;MAIb4L,GAAgB;QACd,IAAAI,IACEpC,KADKqC,IAA0BD,EAAA,IAAEE,IAA0BF,EAAA;QAG7DlY,GAAW+W,EAAIC,GAAuBmB;QACtCpI,EAAa,KAAK,EAACqI;AACrB;AACF;IAEA,OAAOrB;AACT;EAEA,IAAMsB,KAAiB,SAAjBA;IACJ,KAAKzD;MACHA,KAAsBC;;IAExB,OAAOD;AACT;ECtFO,IAAM0D,KAAwB,SAAxBA,sBACX9c,GACAL;IAAU,OACH1D,EAAW0D,KAASA,EAAMF,MAAM,GAAGO,KAAQL;AAAK;EAElD,IAAMod,KAA8B,SAA9BA,4BACX/c,GACAgd,GACAC,GACAC;IAEA,IAAMC,IAAuB5hB,EAAY2hB,KACrCD,IACAC;IACJ,IAAME,IAAyBN,GAC7B9c,GACAmd;IAEF,OAAOC,KAA0BJ,EAAoCvd,MAAM,GAAGO;AAChF;EAEO,IAAMqd,KAA+B,SAA/BA,6BACXrd,GACAsd,GACAC,GACAC;IAEA,IAAMC,IAAwBliB,EAAYiiB,KACtCD,IACAC;IACJ,IAAMJ,IAAyBN,GAC7B9c,GACAyd;IAEF,SACIL,MACDrgB,EAAcqgB,KACXA,IACAE,EAAqC7d,MAAM,GAAGO;AAEtD;EAEO,IAAM0d,KAAuB,SAAvBA,qBACXC,GACAC;IAEA,IAAA9a,IAA2C8a,KAA6B,CAAE,GAAlEjD,IAAwB7X,EAAxB6X,0BAA0BlB,IAAI3W,EAAJ2W;IAClC,IAAAoE,IACEhB,MADMpB,IAAyBoC,EAAzBpC,GAA2BC,IAAuBmC,EAAvBnC,GAAyBG,IAAyBgC,EAAzBhC;IAE5D,IAAAiC,IACEjC,IAA4BV,QADI4C,IAA+BD,EAAzDnD,0BAAiEqD,IAAWF,EAAjBrE;IAGnE,IAAMwE,IACJtD,KAAAA,OAAAA,IAA4BoD;IAC9B,IAAMG,IAAmC3iB,EAAYke,KAAQuE,IAAcvE;IAE3E,IAAM0E,KACH1C,EAA0BrN,KAAKqN,EAA0BpN,MAC1D4P;IACF,IAAMG,IACJT,MACCliB,EAAOyiB,MACHxC,IACDwC;IAEN,SAASC,OAAmCC;AAC9C;ECzKA,IAAMC,KAAyD,IAAIC;EAO5D,IAAMC,KAAc,SAAdA,YAAe9Z,GAAiB+Z;IAC3CH,GAAkBlK,IAAI1P,GAAQ+Z;AAChC;EAMO,IAAMC,KAAiB,SAAjBA,eAAkBha;IAC7B4Z,GAAkBK,OAAOja;AAC3B;EAMO,IAAMka,KAAc,SAAdA,YAAela;IAAe,OACzC4Z,GAAkBxK,IAAIpP;AAAO;ECqE/B,IAAMma,KAA2B,SAA3BA,yBACJna,GACA9F,GACAkgB;IAEA,IAAIC,IAAY;IAChB,IAAMlO,IAAMiO,IAAqB,IAAIP,UAAiC;IACtE,IAAMS,IAAU,SAAVA;MACJD,IAAY;;IAEd,IAAME,IAAkD,SAAlDA,eAAmDC;MACvD,IAAIrO,KAAOiO,GAAoB;QAC7B,IAAMK,IAAeL,EAAmBjO,KAAI,SAAC5R;UAC3C,IAAA8D,IAA+B9D,KAAQ,IAAhCuJ,IAAQzF,EAAA,IAAEmN,IAAUnN,EAAA;UAC3B,IAAM+X,IAAW5K,KAAc1H,KAAY0W,KAAe3W,IAAMC,GAAU9D,KAAU;UACpF,OAAO,EAACoW,GAAU5K;AACpB;QAEAxR,KAAKygB,IAAc,SAAClgB;UAAI,OACtBP,KAAKO,EAAK,KAAI,SAACiH;YACb,IAAMgK,IAAajR,EAAK;YACxB,IAAMmgB,IAAUvO,EAAIiD,IAAI5N,MAAQ;YAChC,IAAMmZ,IAAgB3a,EAAO4a,SAASpZ;YAEtC,IAAImZ,KAAiBnP,GAAY;cAC/B,IAAMqP,IAAiBjP,GAAiBpK,GAAKgK,IAAY,SAACuE;gBACxD,IAAIsK,GAAW;kBACbQ;kBACA1O,EAAI8N,OAAOzY;AACb;kBACEtH,EAAS6V;;AAEb;cACA5D,EAAIuD,IAAIlO,GAAK5G,EAAK8f,GAASG;AAC7B,mBAAO;cACLvf,EAAgBof;cAChBvO,EAAI8N,OAAOzY;AACb;AACF;;AAEJ;;IAGF+Y;IAEA,OAAO,EAACD,GAASC;AACnB;EAUO,IAAMO,KAAoB,SAApBA,kBACX9a,GACA+a,GACA7gB,GACA1G;IAEA,IAAIwnB,IAAc;IAClB,IAAA7M,IAOK3a,KAAoE,CAAE,GANzEynB,IAAW9M,EAAX8M,GACAC,IAAwB/M,EAAxB+M,GACAC,IAAmBhN,EAAnBgN,GACAC,IAAqBjN,EAArBiN,GACAC,IAAmBlN,EAAnBkN,GACAC,IAAoBnN,EAApBmN;IAEF,IAAMC,IAA8Bpd,IAClC;MAAA,OAAM6c,KAAgB9gB,EAAwC;QAC9D;MAAEoE,GAAU;MAAIC,GAAW;;IAE7B,IAAAid,IAAsErB,GACpEna,GACAub,GACAJ,IAHKM,IAAyBD,EAAA,IAAEE,IAAgCF,EAAA;IAOlE,IAAMG,IAAkBV,KAAe;IACvC,IAAMW,IAA+BV,KAA4B;IACjE,IAAMW,IAAqBphB,EAAOkhB,GAAiBC;IACnD,IAAME,IAAmB,SAAnBA,iBACJC,GACAC;MAEA,KAAK7gB,EAAa6gB,IAAY;QAC5B,IAAMC,IAAqBZ,KAAuB5d;QAClD,IAAMye,IAAsBZ,KAAwB7d;QACpD,IAAM0e,IAA4B;QAClC,IAAMC,IAA+B;QACrC,IAAIC,IAAsD;QAC1D,IAAIC,IAAkD;QAGtDtiB,KAAKgiB,IAAW,SAACO;UACf,IACEC,IAMED,EANFC,eACQC,IAKNF,EALFvc,QACA/I,IAIEslB,EAJFtlB,MACAylB,IAGEH,EAHFG,UACAC,IAEEJ,EAFFI,YACAC,IACEL,EADFK;UAEF,IAAMC,IAAmB5lB,MAAS;UAClC,IAAM6lB,IAAkB7lB,MAAS;UACjC,IAAM8lB,IAAyB/c,MAAWyc;UAC1C,IAAMO,IAAeH,KAAoBL;UACzC,IAAMxoB,IACJgpB,KAAgBzb,GAAQkb,GAA+BD,KAAiB;UAE1E,IAAMS,IAAiB3lB,EAAStD,KAAYA,IAAW;UACvD,IAAMkpB,IAAmBF,KAAgBN,MAAaO;UACtD,IAAME,IACJ9iB,EAAQuhB,GAA8BY,MAAkBU;UAG1D,IAAInC,MAAsB+B,MAAoBC,IAAyB;YACrE,IAAMK,IAAqBP,KAAoBK;YAC/C,IAAMG,IACJD,KACAhC,KACAjX,GAAGsY,GAAgBrB;YACrB,IAAMkC,IAAgBD,KACjBpB,EAAmBQ,GAAgBD,GAAeE,GAAUO,MAC5DJ,KAAoBO;YACzB,IAAMG,IACJD,MAAkBpB,EAAoBK,KAAYc,GAAgBrd,GAAQxM;YAE5EwG,KAAK2iB,IAAY,SAACrW;cAAI,OAAK1L,EAAKuhB,GAAmB7V;;YACnDtM,KAAK4iB,IAAc,SAACtW;cAAI,OAAK1L,EAAKuhB,GAAmB7V;;YAErDgW,IAAiBA,KAAkBiB;AAErC;UAEA,KACGxC,KACDgC,KACAG,MACCjB,EAAmBQ,GAAgBD,GAAgBE,GAAUO,IAC9D;YACAriB,EAAKwhB,GAAoBI;YACzBH,IAAqBA,KAAsBc;AAC7C;AACF;QAGAzB,GAAiC,SAAC5X;UAAgB,OAChD1I,EAAiB+gB,GAAmBlZ,QAAe,SAAC3I,GAAKgM;YACvD1L,EAAKN,GAAKuJ,GAAKC,GAAUwC;YACzB,OAAOnC,GAAGmC,GAAMxC,KAAYlJ,EAAKN,GAAKgM,KAAQhM;AAC/C,cAAE;;QAGL,IAAIygB,GAAmB;WACpBgB,KAAeO,KAAmBpiB,EAAwC;UAC3E,OAAO,EAAC;AAGV;QAEA,KAAKiB,EAAaihB,MAAuBC,GAAoB;UAC3D,IAAM9gB,IAAO,EACXH,EAAiBghB,IACjBC;WAEDN,KAAgB7hB,EAAuCc,MAAM,GAAGO;UAEjE,OAAOA;AACT;AACF;;IAEF,IAAMiiB,IAAqC,IAAIvnB,EAC7CyH,GAAKoe,GAAkB;IAGzB,OAAO,EACL;MACE0B,EAAiBC,QAAQzd,GAAQ;QAC/B2Q,YAAY;QACZ+M,mBAAmB;QACnBC,iBAAiB9B;QACjB+B,SAAS7C;QACT8C,WAAW9C;QACX+C,eAAe/C;;MAEjBC,IAAc;MAEd,OAAO;QACL,IAAIA,GAAa;UACfS;UACA+B,EAAiBO;UACjB/C,IAAc;AAChB;;AAEJ,OACA;MACE,IAAIA,GAAa;QACfO,EAA4Bzb;QAC5B,OAAOgc,EAAiB,MAAM0B,EAAiBQ;AACjD;AACF;AAEJ;ECxLO,IAAMC,KAA8C,CAAA;EAGpD,IAAMC,KAA2E,CAAA;EAOjF,IAAMC,KAAa,SAAbA,WAAcC;IACzBpkB,KAAKokB,IAAa,SAACC;MAAM,OACvBrkB,KAAKqkB,IAAQ,SAAC7d,GAAGxI;QACfimB,GAAcjmB,KAAOqmB,EAAOrmB;AAC9B;;AAEJ;EAEO,IAAMsmB,KAAgC,SAAhCA,8BACXD,GACAE,GACAC;IAIC,OAEDpkB,GAAKikB,GAAQlS,KAAI,SAACpW;MAChB,IAAA0oB,IACEJ,EACAtoB,IAFc2oB,IAAQD,EAAhBE,QAA4B5E,IAAU0E,EAApBG;MAG1B,IAAAvgB,IAAgDmgB,KAAgB,IAAzDK,IAAWxgB,EAAA,IAAE0R,IAAK1R,EAAA,IAAEygB,IAAiBzgB,EAAA;MAC5C,IAAMnG,IAAOsmB,IAAezE,IAAa2E;MACzC,IAAIxmB,GAAM;QACR,IAAM0mB,IAAWJ,IAEXtmB,EAQA2mB,GAAc9O,GAAQwO,KAEtBrmB,EAIAqmB;QACN,QAASO,KAAqBZ,IAA6BnoB,KAAQ6oB;AACrE;AACF;AAAE;EAEG,IAAMG,KAAgC,SAAhCA,8BACXC;IAA6D,OAE7Dd,GAA4Bc;AAAmE;;;;;;;;IChLjG,SAASC;MACPC,YAAiBD,WAAWxoB,OAAO0oB,SAAS1oB,OAAO0oB,OAAOzhB,SAAS,SAAUsC;QAC3E,KAAK,IAAI7F,IAAI,GAAGA,IAAIyD,UAAU/F,QAAQsC,KAAK;UACzC,IAAIF,IAAS2D,UAAUzD;UACvB,KAAK,IAAInC,KAAOiC;YACd,IAAIxD,OAAOC,UAAUE,eAAeM,KAAK+C,GAAQjC;cAC/CgI,EAAOhI,KAAOiC,EAAOjC;;;AAG1B;QACD,OAAOgI;AACX,SAAKkf,EAAAE,QAAAC,IAA4B,MAAMH,EAAOE,QAAQ,aAAaF,EAAOE;MACxE,OAAOH,SAASjkB,MAAMgE,MAAMpB;AAC9B;IACAshB,EAAAE,UAAiBH,UAAUC,EAA4BE,QAAAC,IAAA,MAAMH,EAAOE,QAAQ,aAAaF,EAAOE;;;;ECwDhG,IAAME,KAAuD;IAC3Dpc,SAAS;IACTjC,QAAQ;IACRse,QAAQ;IACR1kB,OAAO;IACP2kB,QAAQ;IACRC,UAAU;IACVC,MAAM;;EAqBR,IAAMC,KAAoB,SAApBA,kBACJC,GACApsB,GACAqsB,GACAC;IAEA,IAAMC,IAAmC,CAAA;IACzC,IAAMC,IAAWf,GAAA,CAAA,GAAwBzrB;IACzC,IAAMwJ,IAAQ5C,GAAKwlB,GAAUve,QAAO,SAAClE;MAAI,OAAKvG,GAAepD,GAAS2J;;IAEtEnD,KAAKgD,IAAO,SAACG;MACX,IAAM8iB,IAAoBzsB,EAAQ2J;MAClC,IAAM+iB,IACJN,EAASziB;MACX,IAAMgjB,IAAoBpoB,EAAcmoB;MACxC,IAAME,IAAaN,IAAcA,UAAc;MAG/C,IAAIK,KAAqBpoB,EAAckoB,IAAe;QACpD,IAAAI,IAA6BV,kBAC3BO,GACAD,GACAJ,GACAO,IAAajjB,IAJRmjB,IAASD,EAAA,IAAEE,IAAOF,EAAA;QAMzBN,EAAiB5iB,KAAQmjB;QACzBN,EAAY7iB,KAAQojB;QAEpBvmB,KAAK,EAACgmB,GAAaD,MAAmB,SAAC7kB;UACrC,IAAI6F,GAAc7F,EAAMiC;mBACfjC,EAAMiC;;AAEjB;AACF,aAAO,KAAKgjB,GAAmB;QAC7B,IAAIK,IAAU;QACd,IAAMC,IAAkC;QACxC,IAAMC,IAAoC;QAC1C,IAAMC,IAAmB1pB,EAAKgpB;QAC9B,IAAMW,IACJ3lB,EAAkBilB;QAEpBlmB,KAAK4mB,IAAkB,SAACC;UAEtB,IAAIC;UACJ9mB,KAAKslB,KAAsB,SAACpkB,GAAelD;YACzC,IAAIkD,MAAU2lB;cACZC,IAAa9oB;;AAEjB;UACA,IAAM+oB,IAAejqB,EAAYgqB;UACjC,IAAIC,KAAgBzpB,EAAS2oB,IAAe;YAE1C,IAAMe,IAAkBH,EAAiBzf,MAAM;YAC/Cof,MAAYQ,EAAgBnd,MAAK,SAACod;cAAW,OAAKA,MAAgBhB;;YAGlErlB,EAAK6lB,GAAkBO;AACzB;YACER,IAAUlB,GAAqBqB,OAAsBE;;UAIvDjmB,EAAK8lB,GAAoBK,IAAezB,GAAqBC,SAASuB;UAGtE,QAAQN;AACV;QAEA,IAAIA;UACFT,EAAiB5iB,KAAQ8iB;eACpB,IAAIJ;UACTqB,QAAQC,KAEJ,iBAAef,IAAajjB,IAA0DwjB,yDAAAA,EAAiB9jB,gBAAsCojB,2BAAAA,0CACpHS,EAAmBje,KAAK,MAAM5F,gBAAa,aAEpE4jB,EAAiB5oB,SAAS,kCACM4oB,EAAiBhe,KAAK,QAClD,QAAA;;eAKHud,EAAY7iB;AACrB;AACF;IAEA,OAAO,EAAC4iB,GAAkBC;AAC5B;EAYA,IAAMoB,KAAkB,SAAlBA,gBACJxB,GACApsB,GACAqsB;IAAuB,OACQF,GAAqBC,GAAUpsB,GAASqsB;AAAc;EC/LhF,IAAMwB,KAAoC;oBAEO,SAAAhjB;IAAA,OAAAA,IAAA,CAAA,GAAAA,EACrDgjB,MAAoC;MACnC1C,QAAQ,SAAA2C;QACN,IAAMC,IAAoDC,GAAOvgB;QACjE,IAAMwgB,IAAsDD,GAAOte;QACnE,IAAMwe,IAA+D,EACnEF,GAAO3mB,OACP2mB,GAAO9B;QAET,IAAMiC,IACJ;QACF,IAAMC,IACJ;QACF,IAAMC,IACJ;QAEF,IAAMC,IAA4C;UAEhDtR,iBAAiBiR;UACjBhR,8BAA8BgR;UAC9BhuB,QAAQ;YACNid,eAAegR;YACf/Q,YAAY+Q;YACZvjB,UAAU,EAACqjB,GAAOvgB,QAAQugB,GAAO3mB,OAAO2mB,GAAO9B;YAC/C9O,gBAAgB,EAAC4Q,GAAO/B,UAAU+B,GAAO9B;;UAE3C7O,UAAU;YACRlH,GAAGgY;YACH/X,GAAG+X;;UAEL7Q,YAAY;YACVC,OAAO,EAACyQ,GAAOjC,QAAQiC,GAAO9B;YAC9B1O,YAAY4Q;YACZ3Q,UAAU4Q;YACV3Q,eAAeqQ;YACfpQ,iBAAiBsQ;YACjBrQ,YAAYqQ;YACZpQ,aAAaoQ;YACbnQ,UAAU,EAACkQ,GAAO3mB,OAAO2mB,GAAO9B;;;QAUpC,OAAO,SAAClsB,GAAyBqsB;UAC/B,IAAAkC,IAA6BX,GAAgBU,GAAiBtuB,GAASqsB,IAAhES,IAASyB,EAAA,IAAExB,IAAOwB,EAAA;UACzB,OAAA9C,GAAA,CAAA,GAAYsB,GAAYD;;AAE5B;OACDjiB;AACD,IAtDsD;ECUjD,IAAM2jB,KAAyB;EAEzBC,IAAAA,qBAAsC,SAAA5jB;IAAA,OAAAA,IAAA,CAAA,GAAAA,EAChD2jB,MAAyB;MACxBrD,QACE,SAAA2C;QAAA,OACA,SACEY,GACAC,GACAC;UACuD,IAAAC;UACvD,IAAMC,IAAe;UACrB,IAAMC,IAAkB;UACxB,IAAMC,IAA0B1b,GAAS,iBACxB0M,KAA4DA,6BAAAA,KAAkDC,mBAAAA,KAAmED,+BAAAA,KAAkDC,mBAAAA;UAEpP,IAAMgP,IAA8BD,EAAwB;UAC5D,IAAME,IAAgBD,EAA4BE;UAClD,IAAMC,IAAgBH,EAA4Bvc;UAClD,IAAM2c,IAAqBD,KAAAA,YAAAA,IAAAA,EAAe1c;UAE1C,IAAI4c,IAAYtY,GAAciY;UAC9B,IAAIM,IAAWD;UACf,IAAIE,IAAU;UACd,IAAIC;UAEJ,IAAMC,IAAQ,SAARA;YACJzW,GAAgBmW,GAAeN;YAC/B7V,GAAgBiW,GAAeJ;;UAEjC,IAAMa,IAAY,SAAZA,UAAaC;YACjBH,IAAQ;YACR,IAAID,GAAS;cACXF,IAAYC;cACZZ,EAAsBiB,MAAW;AACnC;;UAEF,IAAMC,IAAW,SAAXA,SAAYC;YAChBP,IAAWvY,GAAciY;YACzBO,KAAWM,MAAgBhmB,GAAQylB,GAAUD;YAE7C,IAAIQ,GAAa;cACfhX,GAAgBgX;cAEhB,IAAIN,MAAYC,GAAO;gBACrB3tB,EAAK2tB;gBACLA,IAAQztB,EAAK2tB;AACf;AACF;cACEA,EAAUG,MAAgB;;YAG5BJ;;UAEF,IAAMK,IAAa,EACjBld,GAAe6b,GAAiBM,IAChC5W,GAAiBgX,GAAeL,GAAiBc,IACjDzX,GAAiB8W,GAAeH,GAAiBc;UAGnDzf,GAASse,GAAiB3O;UAG1BvL,UAAU6a,IAAkBR,IAAAA,CAAAA,GAAAA,EACzBjmB,MAAWkmB,GAAYD,EACvBhmB,MAAYimB,GAAYD;UAG3B7sB,EAAK0tB;UAEL,OAAO,EAACd,IAAsB1kB,GAAK2lB,GAAU,SAASH,GAAOK;;AAC9D;OACJllB;AAAA,GAtEgD;ECd5C,IAAMmlB,KAAkC,SAAlCA,gCAAmCC,GAAsC3M;IACpF,IAAQE,IAA8BF,EAA9BE;IACR,IAAA0M,IAAkFD,EAChF,iCADKE,IAAkCD,EAAA,IAAEE,IAAmCF,EAAA;IAI9E,OAAO,EACLC,KACE3M,EAA0BrN,KAC1BqN,EAA0BpN,GAC5Bga;AAEJ;EAEO,IAAMC,KAAoB,SAApBA,kBAAqBC;IAAwB,OACxDA,EAAiBtpB,QAAQ8B,QAAgB;AAAC;EAQrC,IAAMynB,KAA8B,SAA9BA,4BACXC,GACAF;IAEA,IAAMG,IAAuB,SAAvBA,qBACJC,GACAC,GACAC,GACAC;MAQA,IAAMC,IACJJ,MAAiB5nB,KACbC,KACC2nB,EAAa/sB,QAAWmF,KAAU,KAAK;MAC9C,IAAMioB,IAAsBV,GAAkBK;MAC9C,IAAMM,IAA+BX,GAAkBO;MAGvD,KAAKD,MAAoBE;QACvB,OAAO9nB;;MAIT,IAAIgoB,KAAuBC;QACzB,OAAOloB;;MAIT,IAAIioB,GAAqB;QACvB,IAAME,IAA2BN,IAAkB7nB,KAAaC;QAChE,OAAO4nB,KAAmBE,IACtBC,IACAG;AACN;MAEA,IAAMC,IACJF,KAAgCH,IAAwB/nB,KAAaC;MACvE,OAAO4nB,IACHG,IACAI;;IAGN,IAAMC,IAAiB;MACrBhb,GAAGsa,EAAqBH,EAAiBna,GAAGqa,EAAYra,GAAGma,EAAiBla,GAAGoa,EAAYpa;MAC3FA,GAAGqa,EAAqBH,EAAiBla,GAAGoa,EAAYpa,GAAGka,EAAiBna,GAAGqa,EAAYra;;IAG7F,OAAO;MACLgb,GAAAA;MACAC,IAAiB;QACfjb,GAAGgb,EAAehb,MAAMnN;QACxBoN,GAAG+a,EAAe/a,MAAMpN;;;AAG9B;EC9DO,IAAMqoB,KAA6B;EAE7BC,IAAAA,qBAA0C,SAAA3W;IAAA,OAAAA,IAAA,CAAA,GAAAA,EACpD0W,MAA6B;MAC5BlG,QAAQ,SAAA2C;QAAA,OAAO;UACbyD,IAAsB,SAAAA,qBACpBC,GACAC,GACAC,GACApO,GACAqO;YAEA,IAAQC,IAAiCJ,EAAjCI,IAAmBC,IAAcL,EAAdK;YAC3B,IAAQpO,IAA8EH,EAA9EG,GAAyBD,IAAqDF,EAArDE,GAA2BD,IAA0BD,EAA1BC;YAC5D,IAAMuO,KACHF,MACAnO,MACAD,EAA0BrN,KAAKqN,EAA0BpN;YAC5D,IAAA2b,IAAuC/B,GAAgC2B,GAAcrO,IAA9ErG,IAA4B8U,EAAA;YAKnC,IAAMC,IAA4B,SAA5BA;cACJ,IAAMC,IAAkB,SAAlBA,gBAAmBC;gBACvB,IAAMC,IAAgBnd,UAAU6c,GAAWK;gBAC3C,IAAME,IAAiBD,MAAkBnpB;gBAEzC,OAAO,EAACmpB,GAAeC;;cAGzB,IAAAC,IAA0CJ,EAAgBvpB,IAAnD4pB,IAAcD,EAAA,IAAEE,IAAeF,EAAA;cACtC,IAAAG,IAA0CP,EAAgBtpB,KAAnD8pB,IAAcD,EAAA,IAAEE,IAAeF,EAAA;cAEtC,OAAO;gBACLrB,GAAgB;kBACdhb,GAAGmc;kBACHlc,GAAGqc;;gBAELrB,IAAiB;kBACfjb,GAAGoc;kBACHnc,GAAGsc;;;;YAST,IAAMC,IAAiC,SAAjCA,+BAAkCC;cACtC,IAAQxB,IAAoBwB,EAApBxB;cACR,IAAMyB,IACJpP,KAA2BxG,IAA+B,IAAI;cAEhE,IAAM6V,IAAuB,SAAvBA,qBACJC,GACAX,GACAY;gBAEA,IAAMC,IAAgCF,IAClCF,IACAG;gBACJ,IAAME,IACJd,MAAmB3O,IAA0BwP,IAAgC;gBAC/E,IAAME,IAA8BJ,OAAgBF;gBAEpD,OAAO,EAACK,GAAsBC;;cAGhC,IAAAC,IAA8DN,EAC5DtP,EAA0BrN,GAC1Bib,EAAgBjb,GAChBoN,EAAsBpN,IAHjBkd,IAAqBD,EAAA,IAAEE,IAA4BF,EAAA;cAK1D,IAAAG,IAA8DT,EAC5DtP,EAA0BpN,GAC1Bgb,EAAgBhb,GAChBmN,EAAsBnN,IAHjBod,IAAqBD,EAAA,IAAEE,IAA4BF,EAAA;cAM1D,OAAO;gBACLG,IAAuB;kBACrBvd,GAAGkd;kBACHjd,GAAGod;;gBAELG,IAA8B;kBAC5Bxd,GAAGmd;kBACHld,GAAGqd;;;;YAYT,IAAMG,IAAwB,SAAxBA,sBACJhB,GAA4C/nB,GAE5CgpB;cAC2B,IAFzBC,IAAejpB,EAAfipB;cAGF,KAAKlC,GAAmB;gBAAA,IAAAmC;gBACtB,IAAMC,IAAgCznB,GACpC,CAAE,IAAAwnB,IAAAA,IAAAA,EAECvrB,KAAiB,GAACurB,EAClBtrB,KAAkB,GAACsrB,EACnBxrB,KAAgB,GAACwrB;gBAGtB,IAAAE,IACEtB,EAA+BC,IADzBc,IAAqBO,EAArBP,IAAuBC,IAA4BM,EAA5BN;gBAE/B,IAAWO,IAA0BP,EAA7Bxd,GAAgBge,IAAaR,EAAhBvd;gBACrB,IAAWge,IAAgCV,EAAnCvd,GAAmBke,IAAgBX,EAAnBtd;gBACxB,IAAQke,IAA0B7C,EAA1B6C;gBACR,IAAMC,IAAyCT,IAC3CvrB,IACAC;gBACJ,IAAMgsB,IAAkDV,IACpDzrB,IACAD;gBACJ,IAAMqsB,IAAwBH,EAAsBC;gBACpD,IAAMG,IAAsBJ,EAAsB7rB;gBAClD,IAAMksB,IAAyBL,EAC7BE;gBAEF,IAAMI,IAAuBN,EAAsBhsB;gBAGnD0rB,EAAiBprB,MACfyrB,kBAAAA,IAAcI,KAAyB,KACpC;gBACLT,EAAiBO,MAAwBF,IAAcI;gBAGvDT,EAAiBvrB,MAAoB2rB,IAAcM;gBAGnD,IAAIb,GAAiB;kBACnBG,EAAiBQ,KACfG,KAA0BR,IAAWE,IAAc;kBACrDL,EAAiB1rB,KACfssB,KAAwBV,IAAWE,IAAc;AACrD;gBAEA,OAAOJ;AACT;;YAUF,IAAMa,IAAmB,SAAnBA,iBACJjC,GACAkC,GACAC;cAEA,IAAIjD,GAAmB;gBACrB,IAAQwC,IAA0B7C,EAA1B6C;gBACR,IAAAU,IACErC,EAA+BC,IADzBc,IAAqBsB,EAArBtB,IAAuBC,IAA4BqB,EAA5BrB;gBAE/B,IAAWO,IAA0BP,EAA7Bxd,GAAgBge,IAAaR,EAAhBvd;gBACrB,IAAWge,IAAgCV,EAAnCvd,GAAmBke,IAAgBX,EAAnBtd;gBACxB,IAAQ0d,IAAoBpC,EAApBoC;gBACR,IAAMmB,IAAyDnB,IAC3D1rB,IACAC;gBACJ,IAAM6sB,IAAwCZ,EAC5CW;gBAEF,IAAME,IAAsCb,EAAsBc;gBAClE,IAAMC,IAAyBP,EAAmBpe,IAAIqe,EAAare;gBACnE,IAAM4e,IAAyBR,EAAmBne,IAAIoe,EAAape;gBACnE,IAAM4e,IAAc;kBAClB7e,GACE2d,KAAeF,IAETE,IAAcgB,IAAyBH,IACzC,OACA;kBACNve,GACEyd,KAAeF,IAETE,IAAckB,IAAyBH,IAEzC,OAAA;;gBAGR3gB,UAAUqd,GAAW;kBACnB,YAAY0D,EAAY7e;kBACxB,YAAY6e,EAAY5e;;AAE5B;cAEA,OAAOmb;;YAUT,IAAM0D,IAAuB,SAAvBA,qBAAwB5C;cAC5B,IAAId,GAAmB;gBACrB,IAAM2D,IAA6B7C,KAAyBZ;gBAC5D,IAA+B0D,IAAyBjE,EAAhD6C;gBACR,IAAAqB,IAAyChD,EACvC8C,IADM9B,IAA4BgC,EAA5BhC;gBAGR,IAAWO,IAA0BP,EAA7Bxd,GAAgBge,IAAaR,EAAhBvd;gBACrB,IAAMwf,IAAiC,CAAA;gBACvC,IAAMC,IAAc,SAAdA,YAAersB;kBAAe,OAClChD,KAAKgD,IAAO,SAACG;oBACXisB,EAAkBjsB,KAChB+rB,EAAqB/rB;AACzB;AAAE;gBAEJ,IAAIuqB;kBACF2B,EAAY,EAACptB,GAAiBN,GAAeG;;gBAG/C,IAAI6rB;kBACF0B,EAAY,EAACttB,GAAeC,GAAgBH,GAAgBD;;gBAG9D,IAAM0tB,IAAY9gB,UAAU6c,GAAWjrB,GAAKgvB;gBAC5C,IAAMG,IAAanmB,GACjBiiB,GACA3S,IACAG;gBAGF7K,UAAUqd,GAAW+D;gBAErB,OAAO,EACL;kBACEphB,UACEqd,GACAtlB,GACE,CAAA,GACAupB,GACAlC,EACE6B,GACA/D,GACAI;kBAINiE;AACD,mBACDN;AAEJ;cACA,OAAO,EAACxrB;;YAGV,OAAO;cACL0oB,IAAAA;cACAkC,IAAAA;cACAW,IAAAA;cACA5B,IAAAA;;AAEJ;;AACD;OACFjZ;AAAA,GAhRoD;EC/BhD,IAAMqb,KAA8B;EAE9BC,IAAAA,qBAAqC,SAAAprB;IAAA,OAAAA,IAAA,CAAA,GAAAA,EAC/CmrB,MAA8B;MAC7B7K,QACE,SAAA2C;QAAA,OACA,SACEoI,GACAC,GACAC,GACAC,GACAC;UAGA,IAAIC,IAAY;UAChB,IAAIjrB,IAAQrB;UACZ,IAAMusB,IAAqB,SAArBA,mBAAsBC;YAC1BnrB,IAAQ/F,EACNkxB,GACAA,IAAsBJ,IAAej1B,KAAKS,KAAKu0B,IAC/C,MACA,SAACM,GAAmB1pB,GAAGzG;cACrB2vB,EAAmBQ;cACnB,IAAMC,IAAmBR;cACzB,IAAMS,IAAiBD,IAAmBN;cAC1C,IAAMQ,IACJP,KAA8BK,KAC9BL,KAA8BM;cAEhC,IAAIrwB,MAAuBswB,GAA0B;gBACnD,IAAIN;kBACFC,mBAAmBE;uBACd;kBACL,IAAMI,IAA6B50B,GAAK;oBACtCs0B,mBAAmBE;AACpB,sBAAE;kBACHprB,IAAQ,SAAAA;oBACNjJ,aAAay0B;;AAEjB;gBACAP;AACF;AACF;;UAIJC,EAAmB;UAEnB,OAAO;YAAA,OAAMlrB;AAAO;;AACrB;OACJT;AAAA,GAhD+C;ECqC3C,IAAMksB,KAAqB,SAArBA,mBACXvqB,GACAmiB,GACA3uB;IAEA,IAAA6K,IAAyC7K,KAAW,CAAE,GAArC4uB,IAAmB/jB,EAA5BmsB;IACR,IAAMC,IACJ1L,GAAyDiD;IAC3D,IAAApM,IAA+CriB,EAAqC;MAClFG,GAAe;MACfE,GAAqB;QAFhB82B,IAAoC9U,EAAA;IAK3C,OAAO;MACL,IAAM2N,IAA6B;MACnC,IAAMoH,IAAe7jB,GAAS,iBACbsM,KAAsCE,mBAAAA;MAEvD,IAAMsX,IAAeD,EAAa;MAClC,IAAMzI,IAAkB0I,EAAa1kB;MACrC,IAAM2kB,IAA6B,SAA7BA,2BAA8BC;QAClC,IAAMC,IAAuBD,aAA8BE;QAE3D,IAAIC,IAAO;QACX,IAAI7H,IAAS;QAGb,IAAI2H,GAAsB;UACxB,IAAAG,IAA8CR,EAC5CI,EAAmBK,cADdC,IAAgBF,EAAA,IAAI9f,IAAe8f,EAAA;UAG1C,IAAMngB,IAAgBC,GAAqBogB;UAC3ChI,IAASlY,GAAgBkgB,GAAkBhgB;UAC3C6f,KAAQ7H,MAAWrY;AACrB;UAGEqY,IAAS0H,MAAuB;;QAGlC,KAAKG;UACH9I,EAAsB;YACpBkJ,IAAc;YACdb,IAASpH;;;;MAKf,IAAIjtB,GAA2B;QAC7B,IAAMm1B,IAAyB,IAAIn1B,GAA0B,SAACukB;UAAO,OACnEmQ,EAA2BnQ,EAAQ6Q;;QAErCD,EAAuB7N,QAAQyE;QAC/BtnB,EAAK2oB,IAAY;UACf+H,EAAuBvN;AACzB;AACD,aAAM,IAAI0M,GAAoB;QAC7B,IAAAe,IAAiDf,EAC/CvI,GACA2I,GACAzI,IAHKqJ,IAAoBD,EAAA,IAAEE,IAAgBF,EAAA;QAK7C5wB,EACE2oB,GACA9oB,EACE,EACEmJ,GAASgnB,GAAcvX,KACvBzH,GAAiBgf,GAAc,kBAAkBa,MAEnDC;AAGN;QACE,OAAOjuB;;MAGT,OAAOC,GAAKpC,GAAiBV,EAAK2oB,GAAYld,GAAerG,GAAQ4qB;;AAEzE;EC9FO,IAAMe,KAAwB,SAAxBA,sBACX3rB,GACA4rB;IAEA,IAAIC;IACJ,IAAMC,IAAoB,SAApBA,kBAAqBC;MAAqD,OAC7EA,EAA6B5hB,MAAM,KACnC4hB,EAA4CC,kBAC5CD,EAA4CE,oBAAoB;AAAC;IACpE,IAAMC,IAAkBxlB,GAAUgN;IAClC,IAAAkC,IAAqCriB,EAAY;MAC/CG,GAAe;QADVy4B,IAA0BvW,EAAA;IAGjC,IAAMwW,IAAkC,SAAlCA,gCACJC,GACAtQ;MAEA,IAAIsQ,GAAa;QACf,IAAMC,IAAkBH,EAA2BL,EAAkBO;QACrE,IAASE,IAA0BD,EAAe;QAClD,OACEC,MACCxQ,KACD6P,EAAyBU,MAAoB,EAACA;AAElD;;IAEF,IAAME,IAA+B,SAA/BA,6BACJzQ,GACArB;MAAoC,OACjC0R,EAAgC1R,EAAQ6Q,OAAOxP;AAAY;IAEhE,OAAO,EACL;MACE,IAAMwH,IAA6B;MAEnC,IAAIrtB,GAAiC;QACnC21B,IAA+B,IAAI31B,EACjCwH,GAAK8uB,GAA8B,QACnC;UAAEC,MAAMzsB;;QAEV6rB,EAA6BpO,QAAQyO;QACrCtxB,EAAK2oB,IAAY;UACfsI,EAA8B9N;AAChC;AACF,aAAO;QACL,IAAM2O,IAAgB,SAAhBA;UACJ,IAAMC,IAAUniB,GAAc0hB;UAC9BE,EAAgCO;;QAElC/xB,EAAK2oB,GAAYgH,GAAmB2B,GAAiBQ,EAApCnC;QACjBmC;AACF;MAEA,OAAOhvB,GAAKpC,GAAiBV,EAAK2oB,GAAYld,GAAerG,GAAQksB;AACvE,OACA;MAAA,OACEL,KACAW,EAA6B,MAAMX,EAA6B7N;;AAEtE;ECrBO,IAAM4O,KAAuB,SAAvBA,qBACX5H,GACAC,GACA4H,GACAC;IAEA,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAI9hB;IACJ,IAAI+hB;IACJ,IAAMC,IAAmB5a,MAAAA,KAAoB;IAI7C,IAAM6a,IAAuB3a,MAAAA,KAAwB;IACrD,IAAM4a,IAA0B;IAChC,IAAMC,IAAiC,EAAC,QAAQ,QAAQ;IACxD,IAAMC,IAAyB,EAAC,MAAM,SAAS,SAAS;IACxD,IACEC,IAUEzI,EAVFyI,IACAC,IASE1I,EATF0I,IACArI,IAQEL,EARFK,IACAsI,IAOE3I,EAPF2I,IACAC,IAME5I,EANF4I,IACAC,IAKE7I,EALF6I,IACAzI,IAIEJ,EAJFI,IACA0I,IAGE9I,EAHF8I,IACAC,IAEE/I,EAFF+I,IACAC,IACEhJ,EADFgJ;IAGF,IAAMC,IAAoB,SAApBA,kBAAqBzsB;MAAgB,OAAcgH,UAAUhH,GAAK,iBAAiB;AAAK;IAE9F,IAAM0sB,IAA6B;MACjCC,IAAkB;MAClB7G,IAAiB2G,EAAkBR;;IAErC,IAAM3W,IAAMsB;IACZ,IAAMgW,IAAyBrP,GAC7B8F;IAGF,IAAAjP,IAAiCriB,EAC/B;MACEI,GAAQ2J;MACR5J,GAAe;QAAEwW,GAAG;QAAGC,GAAG;;QAE5B;MACE,IAAM6e,IACJoF,KACAA,EAAuBrJ,GACrBC,GACAC,GACAiJ,GACApX,GACA+V,GACA7D;MAEJ,IAAMqF,IAAuBP,KAAW1I;MACxC,IAAMkJ,KACHD,KAAwB7qB,GAAakqB,GAAOlb,IAAmBF;MAClE,IAAMic,KAAcnJ,KAAqB2I,EAAkBlb;MAC3D,IAAM2b,IAAeD,KAAc1hB,GAAiB8gB;MAEpD,IAAMc,IAAkBT,EAAwBlb,IAA4Bwb;MAC5E,IAAMI,IAAsBH,KAAcvF,KAAwBA,IAAuB;MACzF,IAAM2F,IAAiBjkB,GAAc2a;MACrC,IAAMuJ,IAAajkB,GAAkB0a;MAErCqJ,KAAuBA;MAEvBjiB,GAAgBkhB,GAAsBa;MACtCF,KAAcG;MAEd,OAAO;QACLvkB,GAAGykB,EAAezkB,IAAI0kB,EAAW1kB;QACjCC,GAAGwkB,EAAexkB,IAAIykB,EAAWzkB;;AAErC,SApCK0kB,IAAsBjZ,EAAA;IAuC7B,IAAMkZ,IAA8BjB,IAChCN,IACA9yB,EAAO+yB,GAAwBD;IAEnC,IAAMwB,IAA8B5wB,GAAS2uB,GAAoB;MAC/DxuB,GAAU,SAAAA;QAAA,OAAMyuB;AAAe;MAC/BxuB,GAAW,SAAAA;QAAA,OAAMyuB;AAAgB;MACjCvuB,GAAYA,SAAAA,aAACuwB,GAAM96B;QACjB,IAAO+6B,IAAWD,EAAI;QACtB,IAAOE,IAAWh7B,EAAI;QACtB,OAAO,EACLuG,EAAOL,GAAK60B,IAAU70B,GAAK80B,IAAUjsB,QAAO,SAAClM,GAAKiB;UAChDjB,EAAIiB,KAAOi3B,EAAQj3B,MAAgCk3B,EAAQl3B;UAC3D,OAAOjB;AACT,YAAG,CAAA;AAEP;;IAGF,IAAMo4B,IAAe,SAAfA,aAAgBC;MACpB,IAAMC,IAAoBpB,EAAkBR;MAC5C1tB,GAAWqvB,GAAa;QAAEE,IAAmBnC,MAAuBkC;;MACpEtvB,GAAWmuB,GAAO;QAAE5G,IAAiB+H;;MACrClC,IAAqBkC;;IAkBvB,IAAME,IAAmB,SAAnBA,iBACJC,GACAzT;MAEA,IAAOuQ,IAA2CkD,EAAoB,IAA9CjD,IAA0BiD,EAAoB;MACtE,IAAMJ,IAAyC;QAC7CK,IAAyBlD;;MAG3BxsB,GAAWmuB,GAAO;QAAEC,IAAkB7B;;OACrCvQ,KAAe+Q,EAAmBsC;MAEnC,OAAOA;;IAGT,IAAM1C,IAAgB,SAAhBA,cAAaruB;MAA6D,IAAvDgtB,IAAYhtB,EAAZgtB,IAAcb,IAAOnsB,EAAPmsB;MACrC,IAAMkF,IAAsBrE,MAAiBb;MAC7C,IAAMmF,KAIHD,KAAuB5Y,EAAIG,IACxB8X,IACAjC;MAEN,IAAMsC,IAAyC;QAC7C/D,IAAcA,KAAgBb;QAC9BA,IAAAA;;MAGF2E,EAAaC;MAEbO,EAASP;;IAGX,IAAMQ,IAAoB,SAApBA,kBACJC,GACA9T;MAEA,IAAA+T,IAA6BjB,KAApBkB,IAAgBD,EAAA;MACzB,IAAMV,IAAyC;QAC7CW,IAAAA;;MAGFZ,EAAaC;MAGb,IAAMO,IAAWE,IAA6B/C,IAAqBiC;MAEnEgB,MAAqBhU,KAAe4T,EAASP;MAE7C,OAAOA;;IAGT,IAAMY,IAAiB,SAAjBA,eACJ5T,GACAC,GACAN;MAEA,IAAMqT,IAAyC;QAC7Ca,IAAe5T;;MAGjB8S,EAAaC;MAEb,IAAI/S,MAAuBN;QACzBgT,EAA4BK;;MAQ9B,OAAOA;;IAGT,IAAAjhB,IAA0Dyf,IACtDjC,GAAsB+B,GAAO6B,KAC7B,IAFGW,IAAwB/hB,EAAA,IAAEgiB,IAAqBhiB,EAAA;IAItD,IAAMiiB,KACHhL,KACDmF,GAAmBmD,GAAOhB,GAAe;MACvClC,IAAS;;IAGb,IAAA6F,IAAoEvV,GAClE4S,GACA,OACAsC,GACA;MACE9U,GAA0BsS;MAC1BvS,GAAaxgB,EAAO+yB,GAAwBF;QANzCgD,IAA6BD,EAAA,IAAEE,IAA0BF,EAAA;IAUhE,IAAMG,IACJpL,KACAjvB,KACA,IAAIA,GAA0B,SAACukB;MAC7B,IAAMvP,IAAkBuP,EAAQA,EAAQ7iB,SAAS,GAAGszB;MACpDuB,EAAc;QACZrB,IAAc;QACdb,IAAStf,GAAgBC,GAAiBC;;MAE5CA,IAAkBD;AACpB;IACF,IAAMslB,IAA0BtyB,IAC9B;MACE,IAAAuyB,IAA6B7B,KAApBkB,IAAgBW,EAAA;MACzB5D,EAAmB;QAAEiD,IAAAA;;AACvB,QACA;MACEzxB,GAAU;MACVE,GAAU;;IAId,OAAO,EACL;MAGEgyB,KAAkCA,EAA+B/S,QAAQiQ;MACzE,IAAMiD,IAAsBP,KAAyBA;MACrD,IAAMQ,IAAyBV,KAA4BA;MAC3D,IAAMW,IAA8BP;MACpC,IAAMQ,IAAuBha,EAAIK,GAAmB,SAAC4Z;QACnD,IAAIA;UACFhC,EAA4B;YAAEgC,IAAAA;;;UAE9BN;;AAEJ;MAEA,OAAO;QACLD,KAAkCA,EAA+BzS;QACjE4S,KAAuBA;QACvBC,KAA0BA;QAC1B1D,KAAkCA;QAClC2D;QACAC;;AAEH,OACD,SAAAxiB;MAA2C,IAAxCoV,IAAYpV,EAAZoV,IAAcsN,IAAY1iB,EAAZ0iB,IAAcC,IAAM3iB,EAAN2iB;MAC7B,IAAM7B,IAAyC,CAAA;MAE/C,IAAA8B,IAAyBxN,EAAa,0BAA/B9S,IAAcsgB,EAAA;MACrB,IAAAC,IAAwCzN,EAAa,sBAA9C/S,IAAUwgB,EAAA,IAAEC,IAAiBD,EAAA;MACpC,IAAAE,IAA8C3N,EAAa,yBAApDhT,IAAa2gB,EAAA,IAAEC,IAAoBD,EAAA;MAC1C,IAAAE,IAAyC7N,EAAa,oBAA/C8N,IAAaD,EAAA,IAAEE,IAAeF,EAAA;MACrC,IAAMG,IAAiCJ,KAAwBF;MAC/D,IAAMpT,IAAcgT,KAAgBC;MACpC,IAAMU,IAA4B,SAA5BA,0BAA6BpV;QAAwB,OACzD/kB,EAAWoZ,MAAmBA,EAAe2L;AAAS;MAExD,IAAImV,GAAgC;QAClCzE,KAAiCA;QACjCC,KAAkCA;QAElC,IAAA0E,IAA4B9W,GAC1B8S,KAAYvI,GACZ,MACAuK,GACA;UACE3U,GAAaxgB,EAAOq0B,GAA6Bne,KAAc;UAC/DwK,GAAqBzK;UACrB0K,GAAuBgS;UACvB9R,GAAsB,SAAAA,qBAACiB,GAAUc;YAC/B,IAAgBZ,IAAkCF,EAA1Cvc,QAAwBwc,IAAkBD,EAAlBC;YAChC,IAAMqV,KACHxU,KAAkBb,MAAkB4I,IACjCtgB,GAAY2X,GAAgB2Q,GAAcC,KAC1C;YACN,OACEwE,OACEntB,GAAQ+X,GAAc,MAAM7I,SAC5B+d,EAA0BpV;AAEhC;YAnBGuV,IAASF,EAAA,IAAEn+B,IAAMm+B,EAAA;QAuBxB1E,IAAiC4E;QACjC7E,IAAgCx5B;AAClC;MAEA,IAAIg+B,GAAiB;QACnB1C,EAA4BjvB;QAC5B,IAAIrI,EAAQ+5B,IAAgB;UAC1B,IAAMzzB,IAAUyzB,EAAc;UAC9B,IAAMO,IAAUP,EAAc;UAC9BzE,IAAkB11B,EAAS0G,MAAYA;UACvCivB,IAAmB31B,EAAS06B,MAAYA;AAC1C,eAAO,IAAI16B,EAASm6B,IAAgB;UAClCzE,IAAkByE;UAClBxE,IAAmB;AACrB,eAAO;UACLD,IAAkB;UAClBC,IAAmB;AACrB;AACF;MAEA,IAAIhP,GAAa;QACf,IAAMgU,IAAmBzB;QACzB,IAAM0B,IAAsB9B,KAAyBA;QACrD,IAAM+B,IACJjF,KAAiCA;QAEnC+E,KACEjyB,GACEqvB,GACAY,EAAegC,EAAiB,IAAIA,EAAiB,IAAIhU;QAG7DiU,KACElyB,GAAWqvB,GAAaG,EAAiB0C,EAAoB,IAAIjU;QAEnEkU,KACEnyB,GAAWqvB,GAAaQ,EAAkBsC,EAAoB,IAAIlU;AACtE;MAEAmR,EAAaC;MAEb,OAAOA;AACR,OACDlB;AAEJ;EC3UO,IAAMiE,KAAgC,SAAhCA,8BACXnyB,GACAglB,GACAC,GACAmN;IAEA,IAAAhZ,IAAsChB,MAA9BhB,IAAyBgC,EAAzBhC;IACR,IAAAiC,IAA8CjC,KAA1Bib,IAAqBhZ,EAAjCvI;IACR,IAAcwhB,IAA8BD,EAApC5b;IACR,IACEgX,IAOEzI,EAPFyI,IACAC,IAME1I,EANF0I,IACArI,IAKEL,EALFK,IACAkN,IAIEvN,EAJFuN,IACA5E,IAGE3I,EAHF2I,IACAG,IAEE9I,EAFF8I,IACA1I,IACEJ,EADFI;IAEF,IAAA/mB,IAAwCk0B,IAAe,CAAA,IAAKvyB,GAAxCwyB,IAAcn0B,EAA1ByS;IACR,IAAA3C,IAAqCqkB,KAAkB,CAAE,GAA3CC,IAAkBtkB,EAAxBsI;IACR,IAAMic,IAAoB,IAAIzjB;IAC9B,IAAM0jB,IAAqB,SAArBA,mBAAsBC;MAAuB,OACjDx8B,KACA,IAAIA,EAAQ;QACV6D,QAAQ0zB;QACRiF,MAAAA;;AACA;IACJ,IAAMC,IAAiB;MACrBlpB,GAAGgpB,EAAmB;MACtB/oB,GAAG+oB,EAAmB;;IAExB,IAAMG,IAAyBC,GAG7B,EAACtF,GAASC,GAAOrI,MACjB;MAAA,OAAOD,KAAqB0I,IAAUL,IAAUC;AAAK,QACrD4E,GACAG;IASF,IAAMO,IAAgC,SAAhCA,8BACJtpB,GACAupB;MAEA,IAAIA,GAAoB;QACtB,IAAML,IAAOlpB,IAAetN,KAAWC;QACvC,IAAQ62B,IAAoBD,EAApBC,IAAQC,IAAYF,EAAZE;QAEhB,IAAMC,IAAatoB,GAAsBqoB,GAASP;QAClD,IAAMS,IAAYvoB,GAAsBooB,GAAQN;QAEhD,OAAO5xB,GAAU,GAAG,GAAGoyB,IAAaC,KAAa;AACnD;MAEA,IAAMT,IAAOlpB,IAAe,MAAM;MAClC,IAAQ4pB,IAAmCrO,EAAnCqO,IAAiBC,IAAkBtO,EAAlBsO;MAEzB,IAAMC,IAAeD,EAAcX;MACnC,IAAMzlB,IAAiBmmB,EAAgBV;MAEvC,OAAO5xB,GAAU,GAAG,GAAGwyB,KAAgBA,IAAermB,MAAmB;;IAW3E,IAAMsmB,IAAgC,SAAhCA,8BACJR,GACAS,GACAhqB;MAEA,IAAMiqB,IAAcX,EAA8BtpB,GAAcupB;MAEhE,OAAQ,IAAIU,KAAgB,IAAIA,KAAeD;;IASjD,IAAME,IAA2B,SAA3BA,yBAA4BC;MAAuD,OACvF9zB,GAAW8zB,GAAW;QAEpB/0B,OAAO,EAAC;;AACR;IAMJ,IAAMg1B,IAA0B,SAA1BA,wBAA2B1d;MAC/Bsc,EAAkBpjB,SAAQ,SAACykB,GAAgBrlB;QACzC,IAAMslB,IAAW5d,IAAW/b,EAAQY,EAAkBmb,IAAW1H,KAAW;QAC5E,IAAIslB,GAAU;UACZh6B,KAAK+5B,KAAkB,KAAI,SAACE;YAC1BA,KAAaA,EAAUvd;AACzB;UACAgc,EAAkBzY,OAAOvL;AAC3B;AACF;;IAUF,IAAMwlB,IAAsB,SAAtBA,oBACJxlB,GACAylB,GACAN,GACAO;MAEA,IAAMC,IAAmB3B,EAAkBtjB,IAAIV,MAAY;MAC3D,IAAM4lB,IAAkBD,EAAiBxwB,MACvC,SAACowB;QAAS,OAAKA,KAAaA,EAAUE,aAAaA;;MAGrD,IAAIG;QACFA,EAAgBC,SAAS,IAAIC,eAAe9lB,GAASmlB,GAAW;UAAEO,WAAAA;;;QAElE1B,EAAkBhjB,IAChBhB,GACAjU,EAAO45B,GAAkB,EACvB3lB,EAAQ+lB,QAAQZ,GAAW;UACzBM,UAAAA;UACAC,WAAAA;;;;IAOV,IAAMM,IAAmC,SAAnCA,iCACJC,GACAhuB,GACApD;MAEA,IAAMqxB,IAASrxB,IAAMK,KAAWF;MAChC1J,KAAK26B,IAAqB,SAAC1B;QACzB2B,EAAO3B,EAAmB4B,IAAYluB;AACxC;;IAEF,IAAMmuB,IAAiB,SAAjBA,eACJH,GACAxsB;MAIAnO,KAAK26B,IAAqB,SAAC1B;QACzB,IAAA8B,IAAsB5sB,EAAS8qB,IAAxBzxB,IAAGuzB,EAAA,IAAE9sB,IAAM8sB,EAAA;QAClB/sB,UAAUxG,GAAKyG;AACjB;;IAEF,IAAM+sB,IAAwC,SAAxCA,sCACJL,GACAjrB;MAEAorB,EAAeH,IAAqB,SAACM;QAAa,IAAA3mB;QAChD,IAAQ6kB,IAAY8B,EAAZ9B;QACR,OAAO,EACLA,IAAO7kB,QAAAA,EAEJ5E,IAAetN,KAAWC,MAAYuL,GACrCorB,EAA8BtpB,KAC/B4E;AAGP;;IAEF,IAAM4mB,IAAwC,SAAxCA,sCACJP,GACAjrB;MAEA,IAAQyrB,IAAuBlQ,EAAvBkQ;MACR,IAAMC,IAAQ1rB,IAAe,MAAM;MACnC,IAAM2rB,IAAqBxC,EAAeuC;MAC1C,IAAME,IACJpnB,GAAoCinB,GAAoBC;MAC1D,IAAMG,IAAwB,SAAxBA,sBAAyBtC,GAAwCS;QAAqB,OAC1FjqB,GACE7B,GACE6rB,EACER,GACAqC,IAA+B5B,IAAgB,IAAIA,GACnDhqB,KAGJA;AACD;MAEH,IAAI2rB;QACFr7B,KAAK26B,IAAqB,SAACM;UACzB,IAAQ9B,IAAY8B,EAAZ9B;UACRe,EACEf,GACAkC,GACAzB,EAAyB;YACvB4B,WAAW,EAAC,GAAG,IAAGrpB,KAAI,SAACtS;cAAO,OAAK07B,EAAsBN,GAAWp7B;AAAQ;;AAGlF;;QAEAi7B,EAAeH,IAAqB,SAACM;UAAS,OAAK,EACjDA,EAAU9B,IACV;YACEqC,WAAWD,EACTN,GACA5mB,GAA4B8mB,GAAoBtoB,GAAiB8gB,IAC/DyH;;;;;IAOZ,IAAMK,IAA2B,SAA3BA,yBAA4BC;MAAsB,OACtDtQ,MAAsB0I,KAAWtpB,GAAOkxB,OAAerQ;AAAS;IAElE,IAAM9B,IAA6B;IACnC,IAAMoS,IAA6C;IACnD,IAAMC,IAA2C;IAEjD,IAAMC,IAA2B,SAA3BA,yBACJlyB,GACAJ,GACAuyB;MAEA,IAAMC,IAAax+B,EAAUu+B;MAC7B,IAAME,IAAgBD,IAAaD,IAAiB;MACpD,IAAMG,IAAcF,KAAcD,IAAiB;MACnDE,KAAiBtB,EAAiCiB,GAAsBhyB,GAAWJ;MACnF0yB,KAAevB,EAAiCkB,GAAoBjyB,GAAWJ;;IAEjF,IAAM2yB,IAAgC,SAAhCA;MACJlB,EAAsCW,GAAsB;MAC5DX,EAAsCY;;IAExC,IAAMO,IAAgC,SAAhCA;MACJjB,EAAsCS,GAAsB;MAC5DT,EAAsCU;;IAExC,IAAMQ,IAAmC,SAAnCA;MACJ,IAAIhR,GAAmB;QACrB,IAAQkO,IAAwCrO,EAAxCqO,IAAiB6B,IAAuBlQ,EAAvBkQ;QACzB,IAAMkB,IAA2BnoB,GAAoCinB;QACrE,IAAMmB,IAAU;QAEhB,IAAIzD,EAAelpB,KAAKkpB,EAAejpB;UACrC5P,KAAKS,EAAOm7B,GAAoBD,KAAuB,SAAAY;YAAmB,IAAhB1B,IAAU0B,EAAV1B;YACxD,IAAIY,EAAyBZ,IAAa;cACxC,IAAM2B,IAA+B,SAA/BA,6BAAgC5D;gBAAuB,OAC3DsB,EACEW,GACAhC,EAAeD,IACfgB,EAAyB;kBACvB4B,WAAW,EAAC,GAAGa,EAAyBzD,KAAQ,KAAK,IAAGzmB,KAAI,SAACtS;oBAAO,OAClE4P,GACE1B,GAAclO,KAAWy5B,EAAgBV,KAAQ0D,KACjD1D,MAAS;AACV;oBAGL;AACD;cAEH4D,EAA6B;cAC7BA,EAA6B;AAC/B;cACE1C,EAAwBe;;AAE5B;eACK;UACL,IAAMnB,IAAgBrlB,GACpB8mB,GACAtoB,GAAiB8gB;UAEnB,IAAM8I,IAAyB,SAAzBA,uBAA0BxB;YAC9B,IAAQJ,IAAeI,EAAfJ;YACR,IAAMrzB,IAAMi0B,EAAyBZ,MAAeA;YACpD,IAAM6B,IAAoB,SAApBA,kBACJC,GACAC,GACAC;cAEA,IAAMC,IAAKF,IAAqBD;cAChC,OAAO5uB,GAAc8uB,IAA2BC,KAAMA;;YAGxD,OAAO,EACLt1B,GACAA,KAAO;cACLg0B,WAAW/rB,GAA0B;gBACnCE,GAAG+sB,EACDhD,EAAc/pB,GACd2pB,EAAgB3pB,GAChB0sB,EAAyB1sB;gBAE3BC,GAAG8sB,EACDhD,EAAc9pB,GACd0pB,EAAgB1pB,GAChBysB,EAAyBzsB;;;;UAMnCkrB,EAAea,GAAsBc;UACrC3B,EAAec,GAAoBa;AACrC;AACF;;IAEF,IAAMM,IAAuB,SAAvBA,qBAAwBrtB;MAC5B,IAAMstB,IAAqBttB,IACvBoK,KACAC;MACJ,IAAM2hB,IAAYhvB,GAAakN,KAAkB,MAAIojB;MACrD,IAAMC,IAAQvwB,GAAUsN;MACxB,IAAMkjB,IAASxwB,GAAUuN;MACzB,IAAM/W,IAAS;QACb23B,IAAYa;QACZxC,IAAQ+D;QACR9D,IAAS+D;;MAGXt8B,EAAK8O,IAAeisB,IAAuBC,GAAoB14B;MAC/DtC,EAAK2oB,GAAY,EACfld,GAAeqvB,GAAWuB,IAC1B5wB,GAAe4wB,GAAOC,IACtBx5B,GAAK0H,IAAgBswB,IACrB5B,GACA1B,EACEl1B,GACA24B,GACAX,GACAxrB;MAIJ,OAAOxM;;IAET,IAAMi6B,IAAuCz5B,GAAKq5B,GAAsB;IACxE,IAAMK,IAAqC15B,GAAKq5B,GAAsB;IACtE,IAAMM,IAAiB,SAAjBA;MACJhxB,GAAeysB,GAAwB6C,EAAqB,GAAGd;MAC/DxuB,GAAeysB,GAAwB8C,EAAmB,GAAGf;MAE7D,OAAOn3B,GAAKpC,GAAiBioB;;IAG/B4T;IACAC;IAEA,OAAO,EACL;MACEE,IAAgCpB;MAChCqB,IAAgCpB;MAChCqB,IAAmCpB;MACnCqB,IAA2B5B;MAC3B6B,IAAa;QACXxgB,GAAiB2b,EAAelpB;QAChCguB,IAAsBhC;QACtBiC,IAAQT;QACRU,IAAQn6B,GAAKo3B,GAAgBa;;MAE/BmC,IAAW;QACT5gB,GAAiB2b,EAAejpB;QAChC+tB,IAAsB/B;QACtBgC,IAAQR;QACRS,IAAQn6B,GAAKo3B,GAAgBc;;OAGjCyB;AAEJ;ECzaO,IAAMU,KAA8B,SAA9BA,4BACXvkC,GACAwxB,GACAC,GACA+S;IAEA,OAAO,SACL/E,GACA4C,GACAoC,GACAvuB;MAEA,IACEgkB,IAME1I,EANF0I,IACArI,IAKEL,EALFK,IACAD,IAIEJ,EAJFI,IACAuI,IAGE3I,EAHF2I,IACAuK,IAEElT,EAFFkT,IACAlK,IACEhJ,EADFgJ;MAEF,IAAQ6G,IAAgC5B,EAAhC4B,IAAY3B,IAAoBD,EAApBC,IAAQC,IAAYF,EAAZE;MAC5B,IAAAgF,IAA0Cr6B,GAAiB,MAApDs6B,IAAYD,EAAA,IAAEE,IAAiBF,EAAA;MACtC,IAAAG,IACEx6B,GAAiB,MADZy6B,IAAiCD,EAAA,IAAEE,IAAsCF,EAAA;MAEhF,IAAAG,IACE36B,MADK46B,IAAqCD,EAAA,IAAEE,IAA4BF,EAAA;MAE1E,IAAMG,IAAgCl7B,GACpCu6B,GACA,EAAChF,KACDvpB;MAEF,IAAMmvB,IAA8B,SAA9BA,4BAA+BC;QACnCthC,EAAWm2B,EAAqBoL,aAC9BpL,EAAqBoL,SAAS;UAC5BC,UAAU;UACV3vB,MAAMyvB,EAAYnvB;UAClBT,KAAK4vB,EAAYlvB;;;MAGvB,IAAMqvB,IAAiBvvB,IAAetN,KAAWC;MAEjD,IAAM68B,IAAgC,SAAhCA;QACJ,IAAMC,IAA8B;QACpC,IAAMC,IAAuB1vB,YAAAA,IAAe,MAAM;QAClD,IAAM2vB,IAAa3vB,IAAe,SAAS;QAC3C,IAAM4vB,IAAQ5vB,IAAe,MAAM;QACnC,IAAM0rB,IAAQ1rB,IAAe,MAAM;QAEnC,IAAM6vB,IACJ,SADIA,yBACHC,GAAyBC;UAAqB,OAAK,SAACC;YAAyB,IAAAC;YAC5E,IAAQrG,IAAoBrO,EAApBqO;YACR,IAAMsG,IAAkBpvB,GAAc0oB,GAAQoG,KAAS9uB,GAAc2oB,GAASmG;YAC9E,IAAMO,IAAsBJ,IAAgBC,IAAiBE;YAC7D,IAAME,IAAcD,IAAqBvG,EAAgB8B;YAEzD3oB,GAAgBkhB,IAAoBgM,QAAAA,EACjCvE,KAAQoE,IAAkBM,GAAWH;;AAEzC;QAEH,OAAO/tB,GAAiBsnB,GAAQ,gBAAe,SAAC6G;UAC9C,IAAMC,IACJt1B,GAAQq1B,EAAiB/5B,QAAoBiU,MAAAA,QAAgCkf;UAC/E,IAAM8G,IAAwBD,IAAe7G,IAAUD;UAEvD,IAAMgH,IAAmB1mC,EAAQsd;UACjC,IAAQqpB,IAAmCJ,EAAnCI,QAAQC,IAA2BL,EAA3BK,WAAWC,IAAgBN,EAAhBM;UAC3B,IAAQ/oB,IAAa4oB,EAAb5oB;UAER,IAAMgpB,IACJH,MAAW,KACXC,KACAF,EAAiBF,IAAe,eAAe,mBAC9C1oB,KAAY,IAAInO,SAASk3B;UAE5B,IAAIC,GAAqB;YACvB9B;YAEA,IAAM+B,KAAsBP,KAAgBD,EAAiBS;YAC7D,IAAMC,IAAgB/8B,GAAKoN,IAAuBqoB;YAClD,IAAMuH,IAAeh9B,GAAKoN,IAAuBooB;YACjD,IAAMvJ,IAAkB,SAAlBA,gBAAmBgR,GAAsBC;cAAmB,QAC/DD,KAAcF,KAAiBpB,MAAeuB,KAAaF,KAAgBrB;AAAW;YACzF,IAAMwB,IACJ7lC,EAAU8V,GAAsB6iB,GAAsBsL,MACpDzuB,GAAcmjB,GAAsB2L,MAAU;YAClD,IAAM5P,IAAqB6P,EACzB1sB,GAAiB8gB,GAAsByH,IACvC,IAAIyF;YAEN,IAAMC,IAAoBf,EAAiBX;YAC3C,IAAMuB,IAAaF;YACnB,IAAMG,IAAYF;YAClB,IAAM7Q,IAAe8Q,EAAW1B;YAChC,IAAM8B,IAAepR,EAAgBgR,GAAYC,KAAa/Q,IAAe;YAC7E,IAAMC,IAA6BgR,IAAoBF,EAAUvB;YACjE,IAAMzP,IAAcoQ,IAAe,IAAIlQ,IAA6BiR;YACpE,IAAMC,IAAwB,SAAxBA,sBAAyBC;cAE7B3/B,EAAgBsU;cAChBqqB,EAAsBe,sBAAsBC,EAAeC;;YAE7D,IAAMC,IAA2B,SAA3BA;cAAwB,OAC5BnN,EAAwBhb,IAAmC;AAAK;YAClE,IAAMooB,IAA8BD;YAEpC,IAAMvrB,IAAS,EACb;cACE,IAAMyrB,IAA0BxuB,GAAiB8gB;cACjDyN;cACA,IAAME,IAAuBzuB,GAAiB8gB;cAC9C,IAAM4N,IAAiB;gBACrB5xB,GAAG2xB,EAAqB3xB,IAAI0xB,EAAwB1xB;gBACpDC,GAAG0xB,EAAqB1xB,IAAIyxB,EAAwBzxB;;cAGtD,IAAI1U,EAAQqmC,EAAe5xB,KAAK,KAAKzU,EAAQqmC,EAAe3xB,KAAK,GAAG;gBAClEuxB;gBACA1uB,GAAgBkhB,GAAsB0N;gBACtCxC,EAA4B0C;gBAC5BhD,EAAkC6C;AACpC;AACF,eACAxvB,GAAiBssB,GAAciB,GAA6B6B,IAC5DpvB,GAAiBssB,GAAc,gBAAe,SAACnoB;cAAY,OAAKxD,GAAewD;gBAAQ;cACrFjE,GAAU;gBAEZF,GAAiBsnB,GAAQiG,GAA6B6B,IACtDpvB,GAAiBsnB,GAAQ,gBAAe,SAACsI;cACvC,IAAMC,IAAmBD,EAAiBpC,KAAe0B;cAEzD,IAAId,KAAgBO;gBAClB7Q,EAAmBE,IAAc6R;;AAEpC;YAGHxB,EAAsByB,kBAAkB3B,EAAiBmB;YAEzD,IAAIX;cACF7Q,EAAmBE;mBACd,KAAKoQ,GAAc;cACxB,IAAMhQ,IAAqBjL,GACzByK;cAGFQ,KACEpvB,EACEgV,GACAoa,EACEN,GACAC,GACAC,GACAC,GACAC;AAGR;AACF;AACF;;MAGF,IAAI6R,IAAgB;MACpB,IAAMC,IAAwB,SAAxBA,sBAAyB7rB;QAAsB,OACnDA,EAAM8rB,aAAarhC,QAAQy+B,MAAmB;AAAC;MAEjD,OAAOv7B,GAAKpC,GAAiB,EAC3BsQ,GAAiBunB,GAAS,4BAA4B6E,IACtDpsB,GAAiBipB,GAAY,iBAAgB;QAC3CgB,EAAyBzhB,IAA+B;AACzD,WACDxI,GAAiBipB,GAAY,+BAA8B;QACzDgB,EAAyBzhB,IAA+B;AACzD,YAEAgR,KACCxZ,GAAiBipB,GAAY,cAAa;QACxC,IAAMiH,IAAiBn3B;QACvB,IACEhD,GAAQm6B,GAAgBppB,OACxB/Q,GAAQm6B,GAAgBtpB,OACxBspB,MAAmBrnC,SAASugB;UAE5Btf,EAAKgI,GAAK+Q,IAAc4W,IAAY;;AAEvC,WAEHzZ,GACEipB,GACA,UACA,SAACkH;QACC,IAAQC,IAA8BD,EAA9BC,QAAQC,IAAsBF,EAAtBE,QAAQC,IAAcH,EAAdG;QAGxB,IAAIP,KAAiBO,MAAc,KAAK13B,GAAOqwB,OAAgBnH;UAC7DmL,EAA4B;YAC1BlvB,GAAGqyB;YACHpyB,GAAGqyB;;;QAIPN,IAAgB;QAChB9F,EAAyBrhB,IAAyB;QAClD4jB,GAAa;UACXuD,IAAgB;UAChB9F,EAAyBrhB;AAC3B;QAEAjI,GAAewvB;AACjB,UACA;QAAEjwB,GAAU;QAAOC,GAAU;UAG/BH,GAAiBunB,GAAS,oBAAmB,SAACpjB;QAC5C,IAAI6rB,EAAsB7rB,IAAQ;UAChC,IAAMosB,IAAsB,SAAtBA;YACJvD;YACAF,EAAsCyD;;UAExCA;AACF;AACD,WACDvwB,GAAiBunB,GAAS,mCAAkC,SAACpjB;QAC3D,IAAI6rB,EAAsB7rB,IAAQ;UAChC4oB;UACAC;AACF;AACF,WAEAhtB,GACEipB,GACA,eAGAn3B,GAAKkO,IAAkBssB,GAAc,SAAS1rB,IAAgB;QAC5DP,GAAO;QACPF,GAAU;QACVD,GAAU;UAEZ;QAAEC,GAAU;UAEdmtB,KACAb,GACAG,GACAG;;AAGN;ECrPO,IAAMyD,KAAwB,SAAxBA,sBACXp8B,GACAxM,GACA0xB,GACAD,GACAD,GACA3B;IAEA,IAAIgZ;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC,IAAyCj/B;IAC7C,IAAIk/B,IAAwB;IAG5B,IAAMC,IAAyB,SAAzBA,uBAA0B7sB;MAAmB,OAAKA,EAAMsqB,gBAAgB;AAAO;IAErF,IAAAlC,IAAkEr6B,MAA3D++B,IAA2B1E,EAAA,IAAE2E,IAA0B3E,EAAA;IAC9D,IAAAG,IACEx6B,GAAiB,MADZi/B,IAAiCzE,EAAA,IAAE0E,IAAsC1E,EAAA;IAEhF,IAAAG,IAA8D36B,GAAiB,MAAxEm/B,IAAsBxE,EAAA,IAAEyE,IAA2BzE,EAAA;IAC1D,IAAA0E,IAAgDr/B,IAAiB;MAAA,OAAM6+B;SAAhES,IAAeD,EAAA,IAAEE,IAAoBF,EAAA;IAC5C,IAAAG,IAAmCnL,GACjCnyB,GACAglB,GACAC,GACA8S,GACEvkC,GACAwxB,GACAC,IACA,SAAClV;MAAK,OACJ6sB,EAAuB7sB,MAEvBwtB;AAA4C,UAX3CnnB,IAAQknB,EAAA,IAAEjG,IAAciG,EAAA;IAc/B,IAAQ5P,IAAwC1I,EAAxC0I,IAAO8P,IAAiCxY,EAAjCwY,IAAqB1P,IAAY9I,EAAZ8I;IACpC,IACE2J,IAIErhB,EAJFqhB,IACAH,IAGElhB,EAHFkhB,IACAC,IAEEnhB,EAFFmhB,IACAC,IACEphB,EADFohB;IAEF,IAAMiG,IAA2B,SAA3BA,yBAA4BC,GAAyBC;MACzDN;MACA,IAAIK;QACFjG,EAA0BljB;aACrB;QACL,IAAMqpB,IAAOlgC,GAAK+5B,GAA2BljB,IAAkC;QAC/E,IAAIooB,IAAwB,MAAMgB;UAChCP,EAAgBQ;;UAEhBA;;AAEJ;;IAEF,IAAML,IAA6C,SAA7CA;MACJ,IAAIhB,KAAmBF,KAAeG,GAAiB;QACrDiB,EAAyB;QACzBV,GAAkC;UAChCU,EAAyB;AAC3B;AACF;;IAEF,IAAMI,IAA2B,SAA3BA,yBAA4Bt6B;MAChCk0B,EAA0BnjB,IAA4B/Q,GAAK;MAC3Dk0B,EAA0BnjB,IAA4B/Q,GAAK;;IAE7D,IAAMu6B,IAAmB,SAAnBA,iBAAoB/tB;MACxB,IAAI6sB,EAAuB7sB,IAAQ;QACjCssB,IAAcE;QACdA,KAAmBkB,EAAyB;AAC9C;;IAEF,IAAMla,IAA6B,EACjC8Z,GACAL,GACAE,GACAJ,GACA;MAAA,OAAMJ;AAAwC,OAE9C9wB,GAAiB8hB,GAAO,eAAeoQ,GAAkB;MAAE7xB,GAAO;QAClEL,GAAiB8hB,GAAO,gBAAgBoQ,IACxClyB,GAAiB8hB,GAAO,iBAAgB,SAAC3d;MACvC,IAAI6sB,EAAuB7sB,IAAQ;QACjCssB,IAAc;QACdE,KAAmBkB,EAAyB;AAC9C;AACD,SACD7xB,GAAiB8hB,GAAO,gBAAe,SAAC3d;MACtC6sB,EAAuB7sB,MACrBusB,KACAiB;AACH,SACD3xB,GAAiB4xB,GAAqB,WAAU,SAACztB;MAC/C8sB,GAA4B;QAC1BtF;QACAgG;AACF;MAEAla,EAAStT;MAETynB;AACD;IAGH,OAAO,EACL;MAAA,OAAM95B,GAAKpC,GAAiBV,EAAK2oB,GAAY8T;AAC7C,OAAA,SAAAh5B;MAA2E,IAAxEqlB,IAAYrlB,EAAZqlB,IAAcuN,IAAM5yB,EAAN4yB,IAAQ8M,IAAqB1/B,EAArB0/B,IAAuBC,IAAqB3/B,EAArB2/B;MAC9C,IAAA7vB,IAKI6vB,KAAyB,CAAE,GAJ7BC,IAAoB9vB,EAApB8vB,IACAC,IAAsB/vB,EAAtB+vB,IACAC,IAAqBhwB,EAArBgwB,IACAC,IAAyBjwB,EAAzBiwB;MAEF,IAAA9vB,IAAuCyvB,KAAyB,CAAE,GAA1DzO,IAAiBhhB,EAAjBghB,IAAmB9E,IAAOlc,EAAPkc;MAC3B,IAAQlD,IAAoBpC,EAApBoC;MACR,IAAAlO,IAAsChB,MAA9BpB,IAAyBoC,EAAzBpC;MACR,IAAQ2N,IAAiCM,EAAjCN,GAAgB0Z,IAAiBpZ,EAAjBoZ;MACxB,IAAAnN,IACExN,EAAa,iCADRC,IAAkCuN,EAAA,IAAEtN,IAAmCsN,EAAA;MAE9E,IAAAC,IAA8BzN,EAAa,qBAApC3S,IAAKogB,EAAA,IAAEmN,IAAYnN,EAAA;MAC1B,IAAAE,IAAwC3N,EAAa,0BAA9C1S,IAAUqgB,EAAA,IAAEkN,IAAiBlN,EAAA;MACpC,IAAAE,IAAoC7N,EAAa,wBAA1CzS,IAAQsgB,EAAA,IAAEiN,IAAejN,EAAA;MAChC,IAAAkN,IAAkD/a,EAAa,+BAAxDvS,IAAestB,EAAA,IAAEC,IAAsBD,EAAA;MAC9C,IAAAE,IAAwBjb,EAAa,6BAA9BxS,IAAaytB,EAAA;MACpB,IAAAC,IAAwClb,EAAa,0BAA9CtS,IAAUwtB,EAAA,IAAEC,KAAiBD,EAAA;MACpC,IAAAE,KAA0Cpb,EAAa,2BAAhDrS,KAAWytB,GAAA,IAAEC,KAAkBD,GAAA;MACtC,IAAAE,KAAoCtb,EAAa,aAA1C7S,KAAQmuB,GAAA,IAAEC,KAAeD,GAAA;MAChC,IAAME,KAAgB1U,MAAYyG;MAClC,IAAMjN,KAAcqa,EAAa10B,KAAK00B,EAAaz0B;MACnD,IAAMu1B,KACJlB,KACAC,KACAE,KACA9O,KACA2B;MACF,IAAMmO,KAAmBjB,KAAyBI,KAAqBU;MACvE,IAAMxuB,KACJkT,KACA3M,EAA0BrN,KAC1BqN,EAA0BpN;MAE5B,IAAMy1B,KAAyB,SAAzBA,uBACJvb,GACA6B,GACAjc;QAEA,IAAM41B,IACJxb,EAAiB3gB,SAAS3G,QACzBwU,MAAe1U,MAAe0U,MAAe,UAAU2U,MAAkBnpB;QAE5Ei7B,EAA0BvjB,IAA2BorB,GAAW51B;QAEhE,OAAO41B;;MAGT3C,IAAwBzrB;MAExB,IAAIguB;QACF,IAAI/tB,KAAmB6S,IAAa;UAClC6Z,EAAyB;UACzBnB;UACAO,GAAuB;YACrBP,IAAyC9wB,GACvC4xB,GACA,UACA9/B,GAAKmgC,GAA0B,OAC/B;cACE5xB,GAAO;;AAGb;AACF;UACE4xB,EAAyB;;;MAI7B,IAAIja;QACF6T,EAA0B9jB,IAA6BlD;;MAGzD,IAAI6tB,GAAc;QAChB7G,EAA0BgF;QAC1BhF,EAA0B1mB,GAAO;QAEjC0rB,IAAY1rB;AACd;MAEA,IAAI2tB,MAA2BvtB;QAC7B0sB,EAAyB;;MAG3B,IAAIW,GAAiB;QACnBlC,IAAiBrrB,MAAa;QAC9BsrB,IAAkBtrB,MAAa;QAC/BurB,IAAkBvrB,MAAa;QAC/BwsB,EAAyBjB,GAAiB;AAC5C;MAEA,IAAIqC;QACFpH,EAA0B/iB,IAAqCtD;;MAGjE,IAAI2tB;QACFtH,EAA0BhjB,IAAoCpD;;MAGhE,IAAI+tB,IAAkB;QACpB,IAAMG,KAAWF,GAAuBxuB,GAASlH,GAAGgb,EAAehb,GAAG;QACtE,IAAM61B,KAAWH,GAAuBxuB,GAASjH,GAAG+a,EAAe/a,GAAG;QACtE,IAAM61B,KAAYF,MAAYC;QAE9B/H,EAA0BtjB,KAA+BsrB;AAC3D;MAEA,IAAIN,IAAkB;QAEpB7H;QACAC;QACAC;QAEAC,EAA0BpjB,KAA6BgqB,EAAa10B,GAAG;QACvE8tB,EAA0BpjB,KAA6BgqB,EAAaz0B,GAAG;QACvE6tB,EAA0B5jB,IAAuByT,MAAoBwG;AACvE;AACF,OACA,CAAA,GACA1X;AAEJ;ECnNO,IAAMspB,KAA+B,SAA/BA,6BACX1/B;IAEA,IAAM8W,IAAMsB;IACZ,IAAQhB,IAAuDN,EAAvDM,GAA2BH,IAA4BH,EAA5BG;IACnC,IAAAoC,IAA0CjC,KAAxBuoB,IAAmBtmB,EAA7BjD;IACR,IACQwpB,IAIJD,EAJFtpB,MACSwpB,IAGPF,EAHFrpB,SACUwpB,IAERH,EAFFppB,UACSwpB,IACPJ,EADFnpB;IAEF,IAAMwpB,IAAc1nC,EAAc0H;IAClC,IAAMigC,IAAiCD,IAAc,CAAE,IAAGhgC;IAC1D,IAAkBkgC,IAAiBD,EAA3B7pB;IACR,IAAA/X,IAKI6hC,KAAgB,CAAE,GAJdC,IAAkB9hC,EAAxBgY,MACS+pB,IAAqB/hC,EAA9BiY,SACU+pB,IAAsBhiC,EAAhCkY,UACS+pB,IAAqBjiC,EAA9BmY;IAGF,IAAM+pB,IAAgBP,IAAchgC,IAASigC,EAA8BjgC;IAC3E,IAAMkZ,IAAS7U,GAAck8B;IAC7B,IAAMC,IAAar8B,GAAGo8B,GAAe;IACrC,IAAME,IAAgBF,EAAcE;IACpC,IAAMC,IAAaD,EAAcE;IACjC,IAAMC,IAAoB,SAApBA;MAAiB,OAASH,EAAcI,eAAensC;AAAG;IAChE,IAAM4jB,IAA8B5a,GAAKojC,IAAoC,EAACP;IAC9E,IAAM3nB,IAA+Blb,GAAKq1B,IAAqC,EAACwN;IAChF,IAAMQ,IAAerjC,GAAKgJ,IAAW;IACrC,IAAMs6B,IAA0BtjC,GAC9B4a,GACAyoB,GACAjB;IAEF,IAAMmB,IAAyBvjC,GAC7Bkb,GACAmoB,GACAhB;IAEF,IAAMmB,IAA0BF,EAAwBX;IACxD,IAAMc,IAAmBD,MAA4BX;IACrD,IAAMlS,IAAuB8S,KAAoBjoB;IACjD,IAAMkoB,KAA0BD,KAAoBF,EAAuBX;IAI3E,IAAMe,KAAqBF,KAAoBD,MAA4BE;IAC3E,IAAME,IAAkBjT,IAAuBqS,IAAaQ;IAC5D,IAAMK,IAAqBf,IACvBloB,EAA4ByoB,GAAcnB,GAA2BO,KACpEI;IACL,IAAMiB,IAAcnT,IAAuBiT,IAAkBC;IAC7D,IAAME,KACHN,KACDvoB,EAA6BmoB,GAAclB,GAA8BO;IAC3E,IAAMsB,KAAkBL,KAAqBD;IAC7C,IAAMO,IAAoB,EAACD,GAAgBJ,GAAiBG,GAAgBD,IAAar1B,KACvF,SAAC3K;MAAG,OAAKlJ,EAAckJ,OAASgD,GAAOhD,MAAQA;;IAEjD,IAAMogC,IAAqB,SAArBA,mBAAsBpgC;MAAwB,OAAKA,KAAOnH,EAAQsnC,GAAmBngC;AAAI;IAC/F,IAAMqgC,IAAqCD,EAAmBN,KAC1Df,IACAe;IAEJ,IAAMQ,IAAgD;MACpDrU,IAAS8S;MACT7S,IAAO8T;MACPnc,IAAWic;MACXS,IAAUN;MACV7T,IAAU8T;MACV/T,IAAsBU,IAAuBqS,IAAaY;MAC1D9D,IAAqBnP,IAAuBoS,IAAgBa;MAC5DU,IAA8B9oB,IAASwnB,IAAamB;MACpD3J,IAAcuI;MACd5S,IAAa2S;MACb1S,IAAS5U;MACTqZ,IAAcyN;MACd5a,IAAmB+b;MACnBc,IAAYrB;MACZ7S,IAAmB,SAAAA,kBAACmU;QAAkC,OACpD1+B,GAAa89B,GAAiB5uB,IAAuBwvB;AAA2B;MAClFlU,IAAyB,SAAAA,wBAACkU,GAAoC3+B;QAAa,OACzED,GAAmBg+B,GAAiB5uB,IAAuBwvB,GAA4B3+B;AAAI;;IAE/F,IAAQkqB,IAAkDqU,EAAlDrU,IAASC,IAAyCoU,EAAzCpU,IAAOqU,IAAkCD,EAAlCC,IAAU1c,IAAwByc,EAAxBzc,IAAWuI,IAAakU,EAAblU;IAC7C,IAAMrK,IAA4B,EAChC;MAEEvhB,GAAY0rB,GAAO,EAAClb,IAAmBH;MACvCrQ,GAAYyrB,GAASpb;MACrB,IAAI6G;QACFlX,GAAY0+B,GAAY,EAACruB,IAAyBG;;AAEtD;IAEF,IAAM2vB,KAA0B3B,KAAcoB,EAAmBlU;IACjE,IAAI0U,KAAiB5B,IACjB/S,IACAnpB,GACE,EAACspB,GAAUvI,GAAW0c,GAAUrU,GAAOD,IAAS5pB,MAC9C,SAACrC;MAAG,OAAKA,MAAQogC,EAAmBpgC;AAAI;IAGhD,IAAM6gC,KAAchU,IAAuBZ,IAAUG,KAAYvI;IACjE,IAAM/K,KAAU5c,GAAKpC,GAAiBioB;IACtC,IAAM8T,KAAiB,SAAjBA;MACJ,IAAMiL,IAAS1B;MACf,IAAM2B,IAAgB59B;MACtB,IAAM69B,IAAS,SAATA,OAAUhhC;QACd6E,GAAe7B,GAAOhD,IAAM8C,GAAS9C;QACrC4D,GAAe5D;;MAGjB,IAAMihC,IAAyB,SAAzBA,uBAA0B59B;QAAiD,OAC/E+G,GAAiB/G,GAAe,+BAA+B2H,IAAgB;UAC7ET,GAAU;UACVD,GAAU;;AACV;MACJ,IAAM42B,IAAc;MACpB,IAAMC,IAA2BphC,GAAQ8jB,GAAWqd;MACpD,IAAME,IAA2BH,EAAuBF;MACxD1gC,GAAS6rB,GAAOlb,IAAmB2uB,IAAmB,KAAK1uB;MAC3D5Q,GAASkgC,GAAU7uB,IAAsB;MACzCrR,GAASwjB,GAAW3S,IAAuB;MAC3C7Q,GAAS+rB,GAAUza,IAAsB;MAEzC,KAAKguB,GAAkB;QACrBt/B,GAASwjB,GAAWqd,GAAaC,KAA4B;QAC7DzpB,KAAUrX,GAAS6+B,GAAYnuB,IAAuB;AACxD;MAGA,IAAI4vB,IAAyB;QAC3B37B,GAAYinB,GAASC;QAErB9yB,EAAK2oB,IAAY;UACf/c,GAAYknB,GAAOD;UACnBroB,GAAesoB;AACjB;AACF;MAEArnB,GAAeg8B,IAAaD;MAC5B/7B,GAAeqnB,GAAOqU;MACtB17B,GAAe07B,KAAYrU,IAAQyT,KAAoB9b;MACvDhf,GAAegf,GAAWuI;MAE1BhzB,EAAK2oB,GAAY,EACfqf,GACA;QACE,IAAMC,IAAmBl+B;QACzB,IAAMm+B,IAAsBlB,EAAmBvc;QAG/C,IAAM0d,IACJD,KAAuBD,MAAqBxd,IAAYoI,IAAUoV;QACpE,IAAMG,IAA8BP,EAAuBM;QAC3D/gC,GAAY+/B,GAAU7uB;QACtBlR,GAAY4rB,GAAUza;QACtBnR,GAAYqjB,GAAW3S;QACvBwG,KAAUlX,GAAY0+B,GAAYnuB;QAClCowB,IACI9gC,GAASwjB,GAAWqd,GAAaC,KACjC3gC,GAAYqjB,GAAWqd;QAE3Bd,EAAmBhU,MAAa4U,EAAO5U;QACvCkV,KAAuBN,EAAOnd;QAC9Buc,EAAmBG,MAAaS,EAAOT;QACvCtzB,GAAas0B;QACbC;AACD;MAGH,IAAI/rB,MAA4BkqB,GAAkB;QAChD99B,GAAagiB,GAAW3S,IAAuBK;QAC/CnY,EAAK2oB,GAAY7lB,GAAKsE,IAAaqjB,GAAW3S;AAChD;MAIAjE,IACG0yB,KAAoBjoB,KAAUqpB,MAAkB9U,KAAW6U,EAAOp5B,QAAQo5B,IACvEjd,IACAkd;MAENK;MAGAR,KAAiB;MAEjB,OAAO9nB;;IAGT,OAAO,EAACwnB,GAAoBzK,IAAgB/c;AAC9C;ECpQO,IAAM2oB,KACX,SADWA,2BAA0B5kC;IAAA,IAClCuvB,IAAQvvB,EAARuvB;IAAQ,OACX,SAAAzf;MAAuD,IAApD4vB,IAAqB5vB,EAArB4vB,IAAuBmF,IAAe/0B,EAAf+0B,IAAiBjS,IAAM9iB,EAAN8iB;MACzC,IAAA3iB,IAAoCyvB,KAAyB,CAAE,GAAvDtO,IAAuBnhB,EAAvBmhB;MACR,IAAQtB,IAAqB+U,EAArB/U;MACR,IAAM5B,IAAyBqB,MAAa6B,KAA2BwB;MAEvE,IAAI1E,GAAwB;QAAA,IAAAlK;QAC1Bra,UAAU4lB,IAAQvL,QAAAA,EACfhmB,MAAY8xB,KAAoB,QAAM9L;AAE3C;;AACD;ECKI,IAAM8gB,KAA2D,SAA3DA,2BAA0B9kC,GAErC6vB;IACE,IAFAR,IAAKrvB,EAALqvB,IAAOqU,IAAQ1jC,EAAR0jC,IAAU1c,IAAShnB,EAATgnB,IAAWD,IAAiB/mB,EAAjB+mB;IAG9B,IAAAxP,IAAkDriB,EAChD;MACEI,GAAQ6J;MACR9J,GAAemV;OAEjBnL,GAAKmL,IAAoB6kB,GAAO,WAAW,MALtC0V,IAAkBxtB,EAAA,IAAEytB,IAAmBztB,EAAA;IAQ9C,OAAO,SAAAzH;MAAqE,IAAlEuV,IAAYvV,EAAZuV,IAAcqa,IAAqB5vB,EAArB4vB,IAAuBmF,IAAe/0B,EAAf+0B,IAAiBjS,IAAM9iB,EAAN8iB;MAC9D,IAAAqS,IAAgCD,EAAoBpS,IAA/C3a,IAAOgtB,EAAA,IAAEC,IAAcD,EAAA;MAC5B,IAAAlqB,IAAoChB,MAA5BnB,IAAuBmC,EAAvBnC;MACR,IAAA3I,IAA8DyvB,KAAyB,CAAE,GAAjF1S,IAAY/c,EAAZ+c,IAAc0E,IAAgBzhB,EAAhByhB,IAAkBT,IAAiBhhB,EAAjBghB;MACxC,IAAQhI,IAAoB4b,EAApB5b;MACR,IAAA4J,IAAkDxN,EAAa,oBAAxDlT,IAAe0gB,EAAA,IAAEsS,IAAsBtS,EAAA;MAC9C,IAAMuS,IAAkBxS,KAAUlB;MAElC,IAAI1E,KAAgBkY,KAAkBE,GAAiB;QAAA,IAAAC,IACzBN,EAAmBnS;QAA9C3a,IAAOotB,EAAA;QAAEH,IAAcG,EAAA;AAC1B;MAEA,IAAMC,KACHve,MAAsBoe,KAA0BlU,KAAqBiU;MAExE,IAAII,GAAqB;QAAA,IAAAC,GAAAC;QAEvB,IAAMC,KAAmBtzB,MAAqBuxB,MAAa9qB;QAC3D,IAAM8sB,IAAoBztB,EAAQ/M,IAAI+M,EAAQ9M;QAC9C,IAAMw6B,IAAkB1tB,EAAQhN,IAAIgN,EAAQ3b;QAE5C,IAAMspC,KAAYL,IAAA,IAAAA,EACf5nC,KAAiB8nC,MAAoBxc,KAAmByc,IAAoB,GAACH,EAC7E3nC,KAAkB6nC,KAAmBE,IAAkB,GAACJ,EACxD7nC,KAAgB+nC,KAAmBxc,KAAmByc,IAAoB;QAACH,EAC5E16B,MAAK46B,KAAmBxtB,EAAQhN,IAAI,GAACs6B,EACrCz6B,QAAO26B,IAAmBxc,KAAmBhR,EAAQ/M,IAAI,SAAU,GAACq6B,EACpEv6B,OAAMy6B,IAAmBxc,IAAkB,UAAUhR,EAAQ9M,IAAK;QAACo6B,EAClExnC,MAAW0nC,sBAAkCC,IAAiB,OAAKH;QAEtE,IAAMM,KAAaL,IAAAA,CAAAA,GAAAA,EAChBloC,KAAgBmoC,IAAkBxtB,EAAQhN,IAAI,GAACu6B,EAC/CjoC,KAAkBkoC,IAAkBxtB,EAAQ/M,IAAI,GAACs6B,EACjD/nC,KAAmBgoC,IAAkBxtB,EAAQ3b,IAAI,GAACkpC,EAClDhoC,KAAiBioC,IAAkBxtB,EAAQ9M,IAAI;QAACq6B;QAInD77B,UAAU+5B,KAAY1c,GAAW4e;QACjCj8B,UAAUqd,GAAW6e;QAErBnkC,GAAWmuB,GAAO;UAChB6T,IAAUzrB;UACV6tB,KAAmBL;UACnBhc,IAAuBia,IACnBmC,IACAnkC,GAAW,CAAE,GAAEkkC,GAAcC;;AAErC;MAEA,OAAO;QACLE,IAAsBT;;;AAG5B;EC1BO,IAAMU,KAA4D,SAA5DA,4BACXrf,GACAC;IAEA,IAAMnO,IAAMsB;IACZ,IACEsV,IASE1I,EATF0I,IACAqU,IAQE/c,EARF+c,IACA1c,IAOEL,EAPFK,IACAD,IAMEJ,EANFI,IACAoY,IAKExY,EALFwY,IACA7P,IAIE3I,EAJF2I,IACAG,IAGE9I,EAHF8I,IACAE,IAEEhJ,EAFFgJ,IACAiU,IACEjd,EADFid;IAEF,IAAQhrB,IAA4BH,EAA5BG;IACR,IAAMoX,IAAuBP,KAAW1I;IACxC,IAAMkf,IAAO5mC,GAAK/I,GAAS;IAC3B,IAAM4vC,IAAwB,EAAC,WAAW,aAAa,iBAAiB;IAExE,IAAMC,IAAiB;MACrB7wC,GAAQ2J;MACR5J,GAAe;QAAEwW,GAAG;QAAGC,GAAG;;;IAE5B,IAAMs6B,IAAmB;MACvB9wC,GAAQ4J;MACR7J,GAAe,CAAE;;IAEnB,IAAMgxC,IAAmB,SAAnBA,iBAAoBC;MAExB3W,EAAwBlb,KAA6Bub,KAAwBsW;;IAG/E,IAAMC,IAAoB,SAApBA,kBACJtc,GACAuc;MAEA,IAAMC,IAAapwC,EAAIsjB,mBAAmB,MAAM,IAAI,IAAI;MACxD,IAAMzK,IAAS;QACbrD,GAAGo6B,EAAKhc,EAAmBpe,IAAI26B,EAAmB36B;QAClDC,GAAGm6B,EAAKhc,EAAmBne,IAAI06B,EAAmB16B;;MAGpD,OAAO;QACLD,GAAGqD,EAAOrD,IAAI46B,IAAav3B,EAAOrD,IAAI;QACtCC,GAAGoD,EAAOpD,IAAI26B,IAAav3B,EAAOpD,IAAI;;;IAG1C,IAAAyL,IAAqDriB,EACnDixC,GACA9mC,GAAKiN,IAAmB0a,KAFnB0f,IAAkBnvB,EAAA,IAAEovB,IAAsBpvB,EAAA;IAIjD,IAAAqvB,IAA2E1xC,EAEzEixC,GAAgB9mC,GAAKgN,IAAe2a,KAF/B6f,IAA6BD,EAAA,IAAEE,IAAiCF,EAAA;IAGvE,IAAAG,IACE7xC,EAAwBixC,IADnBa,IAAyBD,EAAA,IAAEE,IAA6BF,EAAA;IAE/D,IAAAG,IAAiChyC,EAAkCkxC,IAA5De,IAAsBD,EAAA;IAC7B,IAAAE,IAA0DlyC,EAAwBixC,IAA3EkB,IAAkBD,EAAA,IAAEE,IAA2BF,EAAA;IACtD,IAAAG,IAAmCryC,EAAwCkxC,IAApEoB,IAAwBD,EAAA;IAC/B,IAAAE,IAAoCvyC,EAClC;MACEI,GAAQ,SAAAA,OAACoyC,GAASC;QAAO,OAAKjpC,GAAMgpC,GAASC,GAASzB;AAAsB;MAC5E7wC,GAAe,CAAE;QAEnB;MAAA,OAAOqX,GAAcsa,KAAa7c,UAAU6c,GAAWkf,KAAyB;AAAE,SAL7E0B,IAAyBH,EAAA;IAOhC,IAAAI,IACE3yC,EACE;MACEI,GAAQ,SAAAA,OAACoyC,GAAS5xC;QAAM,OACtBoJ,GAAQwoC,EAAQh5B,GAAQ5Y,EAAO4Y,MAAWxP,GAAQwoC,EAAQ/4B,GAAM7Y,EAAO6Y;AAAK;MAC9EtZ,GAAeoZ;QAEjB;MACE43B,EAAiB;MAEjB,IAAMyB,IAAuBt5B,GAAiB8gB;MAC9C,IAAMyY,IAAkBpY,EAAwB/a,IAA4B;MAC5E,IAAMozB,IAAoBz6B,GACxB4xB,GACAhhC,KACA,SAACuT;QACC,IAAMu2B,IAA0Bz5B,GAAiB8gB;QAEjD,IACE5d,EAAMw2B,aACND,EAAwB38B,MAAMw8B,EAAqBx8B,KACnD28B,EAAwB18B,MAAMu8B,EAAqBv8B;UAEnD0C,GAAgByD;;AAEpB,UACA;QACEhE,GAAU;QACVE,GAAO;;MAIXQ,GAAgBkhB,GAAsB;QACpChkB,GAAG;QACHC,GAAG;;MAELw8B;MAEA,IAAMr5B,IAASF,GAAiB8gB;MAChC,IAAM6Y,IAAa97B,GAAcijB;MACjClhB,GAAgBkhB,GAAsB;QACpChkB,GAAG68B,EAAWt8B;QACdN,GAAG48B,EAAWr8B;;MAGhB,IAAMs8B,IAAM55B,GAAiB8gB;MAC7BlhB,GAAgBkhB,GAAsB;QAEpChkB,GAAG88B,EAAI98B,IAAIoD,EAAOpD,IAAI,MAAM68B,EAAWt8B;QACvCN,GAAG68B,EAAI78B,IAAImD,EAAOnD,IAAI,MAAM48B,EAAWr8B;;MAGzC,IAAM6C,IAAOH,GAAiB8gB;MAC9BlhB,GAAgBkhB,GAAsBwY;MACtC3wC,GAAI;QAAA,OAAM6wC;;MAEV,OAAO;QACLt5B,GAAAA;QACAC,GAAAA;;AAEJ,SA5DG05B,IAA+BR,EAAA,IAAES,IAAmCT,EAAA;IA+D3E,IAAM9X,IAAyBrP,GAC7B8F;IAGF,IAAM+hB,IAAuC,SAAvCA,qCACJjhB,GACAjc;MAEA,IAAMm9B,IAASn9B,IACXiJ,KACAC;MACJ,OAAA,KAAUi0B,IAASpqC,GAAsBkpB;;IAE3C,IAAMmhB,IAA2B,SAA3BA,yBAA4BC;MAEhC,IAAMC,IAAmC,SAAnCA,iCAAoCt9B;QAAsB,OAC7D,EAACpN,IAAYC,IAAWC,KAA+B2P,KAAI,SAAC/D;UAAK,OAChEw+B,EAAqCx+B,GAAOsB;;AAC7C;MACH,IAAMu9B,IAA6BD,EAAiC,MACjEvsC,OAAOusC,KACPvkC,KAAK;MAERurB,EAAwBiZ;MACxBjZ,EACG5zB,GAAK2sC,GACH56B,KAAI,SAACymB;QAAI,OACRgU,EAAqCG,EAAsBnU,IAAOA,MAAS;AAAI,UAEhFnwB,KAAK,MACR;;IAIJ,OAAO,SAAApE,GAAA8P;MAGH,IAFAuV,IAAYrlB,EAAZqlB,IAAcqa,IAAqB1/B,EAArB0/B,IAAuBmF,IAAe7kC,EAAf6kC,IAAiBjS,IAAM5yB,EAAN4yB;MAAM,IAC5DmT,IAAoBj2B,EAApBi2B;MAEF,IAAA91B,IACEyvB,KAAyB,CAAE,GADrB1S,IAAY/c,EAAZ+c,IAAc0E,IAAgBzhB,EAAhByhB,IAAkBT,IAAiBhhB,EAAjBghB,IAAmB9E,IAAOlc,EAAPkc,IAASuG,IAAqBziB,EAArByiB;MAEpE,IAAMmW,IACJ9Y,KACAA,EAAuBrJ,GACrBC,GACAC,GACAie,GACApsB,GACA4M;MAGJ,IAAA6S,IACE2Q,KAA6C,CAAE,GADzC7e,IAAgBkO,EAAhBlO,IAAkBW,IAAoBuN,EAApBvN,IAAsB5B,IAAqBmP,EAArBnP;MAGhD,IAAA7B,IACE/B,GAAgCE,GAAc5M,IADzCrG,IAA4B8U,EAAA,IAAE3B,IAAmC2B,EAAA;MAExE,IAAA2L,IAAoCxN,EAAa,aAA1C7S,IAAQqgB,EAAA,IAAE+N,IAAe/N,EAAA;MAChC,IAAMiW,IAAmBtjB,GAAkBhT,EAASlH;MACpD,IAAMy9B,IAAmBvjB,GAAkBhT,EAASjH;MAEpD,IAAMy9B,KACJhc,KACA+Y,KACArU,KACAT,KACAyB,KACAnN;MAEF,IAAI0jB,KAAoBtC,EAAuB/T;MAC/C,IAAIsW,KAA0BpC,EAAkClU;MAChE,IAAIuW,KAAqBlC,EAA8BrU;MACvD,IAAIwW,KAAoB9B,EAA4B1U;MAEpD,IAAIrN,KAAuC3M;QACzC+W,EAAwBjb,KAAmCtC;;MAG7D,IAAI42B,IAAiB;QACnB,IAAI7jC,GAAakqB,GAAOlb,IAAmBF;UACzCoyB,EAAiB;;QAGnB,IAAAgD,KAA8B1e,IAAuBA,MAAyB,IAAvE0F,KAAmBgZ,GAAA;QAE1B,IAAAC,KAAwBL,KAAoBvC,EAAmB9T,IAAxD1I,KAAYof,GAAA;QACnB,IAAAC,KAA8BL,KAC5BrC,EAA8BjU,IADzB3I,KAAkBsf,GAAA;QAEzB,IAAM/C,KAAqBp6B,GAAc4a;QACzC,IAAMwiB,KAAkBxZ,KAAwB/jB,GAAc23B;QAC9D,IAAM6F,KAA2B;UAC/B59B,GAAGo6B,EAAKhc,GAAmBpe,IAAIqe,GAAare;UAC5CC,GAAGm6B,EAAKhc,GAAmBne,IAAIoe,GAAape;;QAG9C,IAAM49B,KAA2B;UAC/B79B,GAAGo6B,GACAuD,KACGA,GAAgB39B,IAChB26B,GAAmB36B,IAAIo6B,EAAKO,GAAmB36B,IAAIoe,GAAmBpe,MACxEqe,GAAare;UAEjBC,GAAGm6B,GACAuD,KACGA,GAAgB19B,IAChB06B,GAAmB16B,IAAIm6B,EAAKO,GAAmB16B,IAAIme,GAAmBne,MACxEoe,GAAape;;QAInBukB,MAAuBA;QAEvB+Y,KAAoB/B,EAAmBqC;QACvCP,KAAqBnC,EACnBT,EAAkBkD,IAA0BC,KAC5C9W;AAEJ;MAEA,IAAA+W,KAA4CP,IAArCQ,KAAYD,GAAA,IAAEE,KAAmBF,GAAA;MACxC,IAAAG,KAAgDX,IAAzCr6B,KAAcg7B,GAAA,IAAEC,KAAqBD,GAAA;MAC5C,IAAAE,KAAwDd,IAAjDjf,KAAkB+f,GAAA,IAAEC,KAAyBD,GAAA;MACpD,IAAAE,KAA4CjB,IAArC/e,KAAYggB,GAAA,IAAEC,KAAmBD,GAAA;MACxC,IAAAE,KAA0CjD,EAAuB;QAC/D77B,GAAGwD,GAAejD,IAAI;QACtBN,GAAGuD,GAAehD,IAAI;UAFjB6Z,KAAWykB,GAAA,IAAEC,KAAkBD,GAAA;MAItC,IAAME,KACHxB,KAAoBC,MAAqBpjB,GAAYra,KAAKqa,GAAYpa,MACtEu9B,KAAoBnjB,GAAYra,MAAMqa,GAAYpa,KAClDw9B,KAAoBpjB,GAAYpa,MAAMoa,GAAYra;MACrD,IAAMi/B,KACJxE,KACA9U,KACAyB,KACAyX,MACAF,MACAJ,MACAE,MACAnJ,KACArb,KACAyjB;MACF,IAAMjhB,KAAwBrC,GAA4BC,IAAanT;MACvE,IAAAg4B,KAA8ChD,EAC5Czf,GAAsBzB,IADjBgB,KAAakjB,GAAA,IAAEC,KAAoBD,GAAA;MAG1C,IAAAE,KAAuC9C,EAA0BhV,IAAxD+X,KAA0BD,GAAA;MAEnC,IAAME,KACJ3Z,KAAqB9E,KAAWwe,MAA8BN,MAAsBzX;MACtF,IAAAiY,KAAsDD,KAClDvC,EAAgCzV,KAChC0V,KAFGwC,KAAiBD,GAAA,IAAEE,KAAwBF,GAAA;MAIlD,IAAIN,IAAqB;QACvBE,MAAwBhC,EAAyB1gB,GAAsBzB;QAEvE,IAAIyC,KAAyBiB;UAC3BrgB,UACEqd,GACA+B,EACEhB,IACA8c,GACA7a,EAAiBjC,IAAuBkC,IAAoBC;;AAIpE;MAEAmc,EAAiB;MAEjBphC,GAAmBoqB,GAAOlb,IAAmBF,IAAqBq2B;MAClErlC,GAAmBy+B,GAAU7uB,IAAsBZ,IAAqBq2B;MAExE5oC,GAAWklB,GAAqB;QAC9BN,GAAgBgB;QAChB4N,IAAe;UACb5pB,GAAGs+B,GAAa/9B;UAChBN,GAAGq+B,GAAa99B;;QAElBmpB,IAAiB;UACf3pB,GAAGwD,GAAejD;UAClBN,GAAGuD,GAAehD;;QAEpBk0B,IAAcra;QACdmR,IAAoBloB,GAA0Bk8B,IAAmBh8B;;MAGnE,OAAO;QACLgxB,IAAuB2K;QACvB7K,IAAsBiK;QACtBhK,IAAwBkK;QACxBhK,IAA2BgL,MAA4BhB;QACvDiB,IAAWJ;;;AAGjB;ECzTO,IAAMK,KAAuB,SAAvBA,qBAAwBtpC;IAAgD,IAAA8nB;IACnF,IAAAyhB,IAAsD7J,GAA6B1/B,IAA5EoW,IAAQmzB,EAAA,IAAEC,IAAuBD,EAAA,IAAEE,IAAQF,EAAA;IAClD,IAAMrb,IAA6B;MACjC6T,IAAU;QACRz4B,GAAG;QACHC,GAAG;QACH5O,GAAG;QACH6O,GAAG;;MAEL26B,IAAkB;MAClBrc,KAAqBA,IAAAA,CAAAA,GAAAA,EAClB9rB,KAAiB,GAAC8rB,EAClB7rB,KAAkB,GAAC6rB,EACnB/rB,KAAgB,GAAC+rB,EACjBnsB,KAAgB,GAACmsB,EACjBlsB,KAAkB,GAACksB,EACnBhsB,KAAmB,GAACgsB,EACpBjsB,KAAiB;MAACisB;MAErByL,IAAe;QAAE5pB,GAAG;QAAGC,GAAG;;MAC1B0pB,IAAiB;QAAE3pB,GAAG;QAAGC,GAAG;;MAC5B+a,GAAgB;QACdhb,GAAGpN;QACHqN,GAAGrN;;MAEL8hC,IAAc;QACZ10B,GAAG;QACHC,GAAG;;MAELurB,IAAoBroB;;IAEtB,IAAQ2gB,IAAqDrX,EAArDqX,IAASE,IAA4CvX,EAA5CuX,IAAsBvI,IAAsBhP,EAAtBgP;IACvC,IAAAhM,IAA+DhB,MAAvDnB,IAAuBmC,EAAvBnC,GAAyBD,IAAyBoC,EAAzBpC;IACjC,IAAMsO,KACHrO,MAA4BD,EAA0BrN,KAAKqN,EAA0BpN;IAExF,IAAM8/B,IAA2C,EAC/CzG,GAA2B7sB,IAC3B+sB,GAA2B/sB,GAAU8X,IACrCmW,GAA4BjuB,GAAU8X;IAGxC,OAAO,EACLsb,GACA,SAACG;MACC,IAAMva,IAAyC,CAAA;MAC/C,IAAMwa,IAAqBtkB;MAC3B,IAAMkJ,IAAeob,KAAsB/8B,GAAiB8gB;MAE5D3zB,KAAK0vC,IAAgB,SAACG;QACpB9pC,GAAWqvB,GAAaya,EAAcF,GAAYva,MAAgB,CAAA;AACpE;MAEA3iB,GAAgBkhB,GAAsBa;OACrCpJ,KAAqB3Y,GAAgBghB,GAAS;MAE/C,OAAO2B;AACT,OACAlB,GACA9X,GACAqzB;AAEJ;EC/DO,IAAMK,KAAe,SAAfA,aACX9pC,GACAxM,GACAu2C,GACAC,GACA3mB;IAEA,IAAMwJ,IAAmB7a,GAAkBxe,GAAS,CAAE;IACtD,IAAA+1C,IAMID,GAAqBtpC,IALvBiqC,IAAoBV,EAAA,IACpBW,IAAoBX,EAAA,IACpBtkB,IAAmBskB,EAAA,IACnBvkB,IAAsBukB,EAAA,IACtBY,IAAsBZ,EAAA;IAExB,IAAAa,IAA0Exd,GACxE5H,GACAC,GACA4H,IACA,SAACwd;MAEC52C,EAAO,CAAA,GAAI42C;AACb,SAPKC,IAAoBF,EAAA,IAAEG,IAAoBH,EAAA,IAAEllB,IAAmBklB,EAAA;IAStE,IAAA9M,IACElB,GACEp8B,GACAxM,GACA0xB,GACAD,GACAD,GACA3B,IAPGmnB,IAAqBlN,EAAA,IAAEmN,IAAqBnN,EAAA,IAAIoN,IAAuBpN,EAAA;IAU9E,IAAMqN,IAAuB,SAAvBA,qBAAwBC;MAAuB,OACnDxwC,GAAKwwC,GAAOC,MAAK,SAAC7yC;QAAG,SAAO4yC,EAAM5yC;;AAA2B;IAE/D,IAAMvE,IAAS,SAATA,OACJk2C,GACAmB;MAEA,IAAIf;QACF,OAAO;;MAGT,IACmBgB,IAIfpB,EAJFqB,IACQC,IAGNtB,EAHF1Y,IACAD,IAEE2Y,EAFF3Y,IACAka,IACEvB,EADFuB;MAEF,IAAMF,IAAkBD,KAAqB;MAC7C,IAAM9Z,MAAWga;MACjB,IAAME,IAAqC;QACzCznB,IAAc1R,GAAkBxe,GAASw3C,GAAiB/Z;QAC1D+Z,IAAAA;QACA/Z,IAAAA;;MAGF,IAAIia,GAAiB;QACnBT,EAAsBU;QACtB,OAAO;AACT;MAEA,IAAMC,IACJN,KACAP,EACExqC,GAAW,CAAA,GAAIorC,GAAmB;QAChCna,IAAAA;;MAIN,IAAMqa,IAAiBnB,EACrBnqC,GAAW,CAAA,GAAIorC,GAAmB;QAChCjI,IAAiBhe;QACjB6Y,IAAuBqN;;MAG3BX,EACE1qC,GAAW,CAAE,GAAEorC,GAAmB;QAChCpN,IAAuBqN;QACvBpN,IAAuBqN;;MAI3B,IAAMC,IAAuBX,EAAqBS;MAClD,IAAMG,IAAuBZ,EAAqBU;MAClD,IAAMj3C,IACJk3C,KAAwBC,MAAyBxqC,GAAciqC,MAAoB/Z;MAErF78B,KACE41C,EAAUL,GAAY;QACpB5L,IAAuBqN;QACvBpN,IAAuBqN;;MAG3B,OAAOj3C;;IAGT,OAAO,EACL;MACE,IAAQ4tC,IAAuDhd,EAAvDgd,IAA8BrU,IAAyB3I,EAAzB2I;MACtC,IAAM6d,IAAgB3+B,GAAiBm1B;MACvC,IAAMze,IAAa,EAAC+mB,KAAwBL,KAAwBO;MAEpE/9B,GAAgBkhB,GAAsB6d;MAEtC,OAAO9tC,GAAKpC,GAAiBioB;AAC9B,OACD9vB,GACA;MAAA,OAAO;QACLg4C,IAAsBvmB;QACtBwmB,IAAsBzmB;;AACvB,OACD;MACE0mB,IAAyB3mB;MACzB4mB,IAA0BlB;OAE5BP;AAEJ;EC4Ga0B,IAAAA,KAA6C,SAA7CA,kBACX7rC,GACAxM,GACAs4C;IAEA,IAAA1yB,IAA+BhB,MAAvBb,IAAkB6B,EAAlB7B;IACR,IAAMw0B,IAAkBzzC,EAAc0H;IACtC,IAAMgsC,IAAiBD,IAAkB/rC,IAASA,EAAOA;IACzD,IAAMisC,IAAoB/xB,GAAY8xB;IACtC,IAAIx4C,MAAYy4C,GAAmB;MACjC,IAAI5xB,IAAY;MAChB,IAAMkJ,IAA6B;MACnC,IAAM2oB,IAAsE,CAAA;MAC5E,IAAM9qB,IAAkB,SAAlBA,gBAAmB3P;QACvB,IAAM06B,IAA6BtrC,GAA0B4Q,GAAY;QACzE,IAAM26B,IAAiBrtB,GACrBsC;QAEF,OAAO+qB,IACHA,EAAeD,GAA4B,QAC3CA;;MAEN,IAAME,IAAkCtsC,GACtC,CAAE,GACFwX,KACA6J,EAAgB5tB;MAElB,IAAAmiB,IACE7G,MADKw9B,IAAc32B,EAAA,IAAE42B,IAAkB52B,EAAA,IAAE62B,IAAkB72B,EAAA;MAE7D,IAAA82B,IACE39B,GAAuBg9B,IADlBY,IAAgBD,EAAA,IAAEE,IAAoBF,EAAA,IAAEG,IAAoBH,EAAA;MAEnE,IAAM38B,IAA0C,SAA1CA,aAA2C/Z,GAAMwF;QACrDqxC,EAAqB72C,GAAMwF;QAC3BixC,EAAmBz2C,GAAMwF;;MAE3B,IAAAsxC,IACE/C,GACE9pC,GACAqsC,IACA;QAAA,OAAMhyB;AAAS,WACf,SAAAhc,GAAA8P;QAAkF,IAA/E68B,IAAe3sC,EAAf2sC,IAAiB/Z,IAAM5yB,EAAN4yB;QAAM,IAAM8M,IAAqB5vB,EAArB4vB,IAAuBC,IAAqB7vB,EAArB6vB;QACrD,IACE3S,IAME0S,EANF1S,IACAiE,IAKEyO,EALFzO,IACAG,IAIEsO,EAJFtO,IACAM,IAGEgO,EAHFhO,IACAE,IAEE8N,EAFF9N,IACAzF,IACEuT,EADFvT;QAGF,IACEyT,IAIED,EAJFC,IACAC,IAGEF,EAHFE,IACAC,IAEEH,EAFFG,IACAC,IACEJ,EADFI;QAGFtuB,EAAa,WAAW,EAEtB8O,GACA;UACEwQ,aAAa;YACX0d,eAAezhB;YACf0hB,oBAAoBzd;YACpB/C,0BAA0BkD;YAC1ByY,uBAAuBjK;YACvBmK,yBAAyBlK;YACzB4K,wBAAwB3K;YACxBiL,4BAA4BhL;YAC5BqF,mBAAmB1T;YACnBid,gBAAgB/c;YAChB7M,UAAUoH;;UAEZvY,gBAAgB+4B,KAAmB,CAAE;UACrC/2C,SAASg9B;;AAGd,WAED,SAAC3N;QAAW,OAAKxT,EAAa,UAAU,EAAC8O,GAAU0E;WA5ChD2pB,IAAeJ,EAAA,IAAEK,IAAYL,EAAA,IAAEM,IAAWN,EAAA,IAAEO,IAAcP,EAAA,IAAEQ,IAAcR,EAAA;MA+CjF,IAAMvyB,IAAU,SAAVA,QAAWmvB;QACfzvB,GAAegyB;QACf1wC,EAAgBioB;QAEhBlJ,IAAY;QAGZvK,EAAa,aAAa,EAAC8O,GAAU6qB;QACrC8C;QACAI;;MAGF,IAAM/tB,IAA8B;QAClCprB,SAAOA,SAAAA,QAACie,GAA6B67B;UACnC,IAAI77B,GAAY;YACd,IAAM87B,IAAOD,IAAO/1B,MAAuB,CAAA;YAC3C,IAAMtF,IAAiBV,GACrB86B,GACAtsC,GAAWwtC,GAAMnsB,EAAgB3P;YAEnC,KAAK1Q,GAAckR,IAAiB;cAClClS,GAAWssC,GAAgBp6B;cAC3Bi7B,EAAa;gBAAElC,IAAiB/4B;;AAClC;AACF;UACA,OAAOlS,GAAW,IAAIssC;AACvB;QACDmB,IAAId;QACJe,KAAK,SAAAA,IAAC13C,GAAM0V;UACV1V,KAAQ0V,KAAYkhC,EAAqB52C,GAAM0V;AAChD;QACDyiB,OAAK,SAAAA;UACH,IAAAwf,IAAuDP,KAA/C1B,IAAoBiC,EAApBjC,IAAsBC,IAAoBgC,EAApBhC;UAC9B,IAAQpkB,IAAoBmkB,EAApBnkB;UACR,IACEiM,IAOEmY,EAPFnY,IACAD,IAMEoY,EANFpY,IACA3O,IAKE+mB,EALF/mB,GACA0Z,IAIEqN,EAJFrN,IACA0D,IAGE2J,EAHF3J,IACAoC,IAEEuH,EAFFvH,IACAhP,IACEuW,EADFvW;UAEF,OAAOp1B,GACL,CAAA,GACA;YACEkoC,cAAc1U;YACdpmB,gBAAgBmmB;YAChB3N,eAAehB;YACfX,aAAaqa;YACb8K,mBAAmB;cACjB97B,OAAO8nB,EAAmBpoB;cAC1BO,KAAK6nB,EAAmBnoB;;YAE1BsJ,SAASyrB;YACTvxB,iBAAiB2zB;YACjBwJ,cAAcrmB;YACdjN,WAAAA;;AAGL;QACDjE,UAAQ,SAAAA;UACN,IAAAw3B,IAQIR,EAAezB,IAPjBle,IAAOmgB,EAAPngB,IACAC,IAAKkgB,EAALlgB,IACAqU,IAAQ6L,EAAR7L,IACA1c,IAASuoB,EAATvoB,IACAuI,IAAQggB,EAARhgB,IACAD,IAAoBigB,EAApBjgB,IACA6P,IAAmBoQ,EAAnBpQ;UAEF,IAAAqQ,IAAmCT,EAAexB,IAA1ClU,IAAWmW,EAAXnW,IAAaI,IAAS+V,EAAT/V;UACrB,IAAMgW,IAA8B,SAA9BA,4BACJ7a;YAEA,IAAQE,IAAgCF,EAAhCE,IAASD,IAAuBD,EAAvBC,IAAQ2B,IAAe5B,EAAf4B;YACzB,OAAO;cACLa,WAAWb;cACXoC,OAAO/D;cACPgE,QAAQ/D;;;UAGZ,IAAM4a,IAAkC,SAAlCA,gCACJC;YAEA,IAAQrW,IAAiCqW,EAAjCrW,IAAsBC,IAAWoW,EAAXpW;YAC9B,IAAMqW,IAAsBH,EAA4BnW,EAAqB;YAE7E,OAAO53B,GAAW,CAAE,GAAEkuC,GAAqB;cACzCrtC,OAAO,SAAAA;gBACL,IAAM1D,IAAS4wC,EAA4BlW;gBAC3CsV,EAAa;kBAAEhC,IAAiB;;gBAChC,OAAOhuC;AACT;;;UAGJ,OAAO6C,GACL,CAAA,GACA;YACEC,QAAQytB;YACRpX,MAAMqX;YACNpX,SAASyrB,KAAY1c;YACrB9O,UAAU8O;YACV7O,SAASoX,KAAYvI;YACrB6oB,qBAAqBvgB;YACrBwgB,oBAAoB3Q;YACpB4Q,qBAAqBL,EAAgCrW;YACrD2W,mBAAmBN,EAAgCjW;;AAGxD;QACDrkC,QAAQ,SAAAA,OAACw9B;UAAgB,OAAKic,EAAa;YAAEjc,IAAAA;YAAQD,IAAc;;AAAO;QAC1E1W,SAAS5c,GAAK4c,GAAS;QACvB+D,QAAQ,SAAAA,OAA2BA;UAAS,OAC1C6tB,EAA8B9xC,GAAKikB,GAAQ;AAE9B;;MAGjBzjB,EAAK2oB,GAAY,EAAC8pB;MAGlBvzB,GAAYkyB,GAAgBptB;MAG5BN,GAA8BL,IAAe4tB,mBAAmB,EAC9DjtB,GACA0tB,GACAJ;MAGF,IACEjzB,GACEm0B,EAAezB,GAAwB7d,KACtCie,KAAmB/rC,EAAO0W,SAE7B;QACA4D,EAAQ;QACR,OAAOsE;AACT;MAEAhkB,EAAK2oB,GAAY0pB;MAEjBn9B,EAAa,eAAe,EAAC8O;MAE7BA,EAASnrB,OAAO;MAEhB,OAAOmrB;AACT;IACA,OAAOqtB;AACT;EAEAJ,GAAkBxtB,SAAS,SAACiwB;IAC1B,IAAMC,IAAQ92C,EAAQ62C;IACtB,IAAME,IACJD,IAAQD,IAAU,EAACA;IACrB,IAAMpxC,IAASsxC,EAAariC,KAC1B,SAACkS;MAAM,OAAKC,GAA8BD,GAAQwtB,IAAmB;;IAEvE1tB,GAAWqwB;IACX,OAAOD,IAAQrxC,IAAUA,EAAO;AAClC;EACA2uC,GAAkB4C,QAAQ,SAAC10B;IACzB,IAAM20B,IAAY30B,KAAeA,EAAiC3D;IAClE,IAAMA,IAAW5e,EAAWk3C,MAAcA;IAC1C,OAAO32C,EAAcqe,QAAe8D,GAAY9D,EAASpW;AAC3D;EACA6rC,GAAkB/0B,MAAM;IACtB,IAAA63B,IAWIv2B,MAVFrB,IAAqB43B,EAArB53B,GACAC,IAAyB23B,EAAzB33B,GACAC,IAAuB03B,EAAvB13B,GACAC,IAAey3B,EAAfz3B,GACAQ,IAA4Bi3B,EAA5Bj3B,GACAC,IAAqBg3B,EAArBh3B,GACAP,IAAyBu3B,EAAzBv3B,GACAC,IAAyBs3B,EAAzBt3B,GACAE,IAAkBo3B,EAAlBp3B,GACAC,IAAkBm3B,EAAlBn3B;IAEF,OAAOzX,GACL,CAAA,GACA;MACE6uC,gBAAgB73B;MAChB83B,oBAAoB73B;MACpB83B,kBAAkB73B;MAClB4b,gBAAgB3b;MAChBf,6BAA6BuB;MAC7Bf,sBAAsBgB;MAEtBd,0BAA0BO;MAC1B23B,0BAA0B13B;MAC1BT,mBAAmBW;MACnBy3B,mBAAmBx3B;;AAGzB;;;;;;","x_google_ignoreList":[31]}